import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.gensp";
/**
 * GenesisState defines the gensp module's genesis state.
 * GenesisState defines the raw genesis transaction in JSON.
 */
export interface GenesisState {
    /** gen_txs defines the genesis transactions. */
    genspTxs: Uint8Array[];
}
export interface GenesisStateProtoMsg {
    typeUrl: "/greenfield.gensp.GenesisState";
    value: Uint8Array;
}
/**
 * GenesisState defines the gensp module's genesis state.
 * GenesisState defines the raw genesis transaction in JSON.
 */
export interface GenesisStateAmino {
    /** gen_txs defines the genesis transactions. */
    gensp_txs?: string[];
}
export interface GenesisStateAminoMsg {
    type: "/greenfield.gensp.GenesisState";
    value: GenesisStateAmino;
}
/**
 * GenesisState defines the gensp module's genesis state.
 * GenesisState defines the raw genesis transaction in JSON.
 */
export interface GenesisStateSDKType {
    gensp_txs: Uint8Array[];
}
export declare const GenesisState: {
    typeUrl: string;
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    fromPartial<I extends {
        genspTxs?: Uint8Array[];
    } & {
        genspTxs?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["genspTxs"], keyof Uint8Array[]>, never>;
    } & Record<Exclude<keyof I, "genspTxs">, never>>(object: I): GenesisState;
    fromSDK(object: GenesisStateSDKType): GenesisState;
    toSDK(message: GenesisState): GenesisStateSDKType;
    fromAmino(object: GenesisStateAmino): GenesisState;
    toAmino(message: GenesisState): GenesisStateAmino;
    fromAminoMsg(object: GenesisStateAminoMsg): GenesisState;
    fromProtoMsg(message: GenesisStateProtoMsg): GenesisState;
    toProto(message: GenesisState): Uint8Array;
    toProtoMsg(message: GenesisState): GenesisStateProtoMsg;
};
