/// <reference types="long" />
import { Long } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.common";
/**
 * Approval is the signature information returned by the Primary Storage Provider (SP) to the user
 * after allowing them to create a bucket or object, which is then used for verification on the chain
 * to ensure agreement between the Primary SP and the user.
 */
export interface Approval {
    /** expired_height is the block height at which the signature expires. */
    expiredHeight: Long;
    /** global_virtual_group_family_id is the family id that stored. */
    globalVirtualGroupFamilyId: number;
    /** The signature needs to conform to the EIP 712 specification. */
    sig: Uint8Array;
}
export interface ApprovalProtoMsg {
    typeUrl: "/greenfield.common.Approval";
    value: Uint8Array;
}
/**
 * Approval is the signature information returned by the Primary Storage Provider (SP) to the user
 * after allowing them to create a bucket or object, which is then used for verification on the chain
 * to ensure agreement between the Primary SP and the user.
 */
export interface ApprovalAmino {
    /** expired_height is the block height at which the signature expires. */
    expired_height?: string;
    /** global_virtual_group_family_id is the family id that stored. */
    global_virtual_group_family_id?: number;
    /** The signature needs to conform to the EIP 712 specification. */
    sig?: string;
}
export interface ApprovalAminoMsg {
    type: "/greenfield.common.Approval";
    value: ApprovalAmino;
}
/**
 * Approval is the signature information returned by the Primary Storage Provider (SP) to the user
 * after allowing them to create a bucket or object, which is then used for verification on the chain
 * to ensure agreement between the Primary SP and the user.
 */
export interface ApprovalSDKType {
    expired_height: Long;
    global_virtual_group_family_id: number;
    sig: Uint8Array;
}
export declare const Approval: {
    typeUrl: string;
    encode(message: Approval, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Approval;
    fromJSON(object: any): Approval;
    toJSON(message: Approval): unknown;
    fromPartial<I extends {
        expiredHeight?: string | number | Long.Long;
        globalVirtualGroupFamilyId?: number;
        sig?: Uint8Array;
    } & {
        expiredHeight?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["expiredHeight"], keyof Long.Long>, never>);
        globalVirtualGroupFamilyId?: number;
        sig?: Uint8Array;
    } & Record<Exclude<keyof I, keyof Approval>, never>>(object: I): Approval;
    fromSDK(object: ApprovalSDKType): Approval;
    toSDK(message: Approval): ApprovalSDKType;
    fromAmino(object: ApprovalAmino): Approval;
    toAmino(message: Approval): ApprovalAmino;
    fromAminoMsg(object: ApprovalAminoMsg): Approval;
    fromProtoMsg(message: ApprovalProtoMsg): Approval;
    toProto(message: Approval): Uint8Array;
    toProtoMsg(message: Approval): ApprovalProtoMsg;
};
