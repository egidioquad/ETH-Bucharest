"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VersionedParams = exports.Params = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
const math_1 = require("@cosmjs/math");
exports.protobufPackage = "greenfield.payment";
function createBaseParams() {
    return {
        versionedParams: exports.VersionedParams.fromPartial({}),
        paymentAccountCountLimit: helpers_1.Long.UZERO,
        forcedSettleTime: helpers_1.Long.UZERO,
        maxAutoSettleFlowCount: helpers_1.Long.UZERO,
        maxAutoResumeFlowCount: helpers_1.Long.UZERO,
        feeDenom: "",
        withdrawTimeLockThreshold: "",
        withdrawTimeLockDuration: helpers_1.Long.UZERO
    };
}
exports.Params = {
    typeUrl: "/greenfield.payment.Params",
    encode(message, writer = _m0.Writer.create()) {
        if (message.versionedParams !== undefined) {
            exports.VersionedParams.encode(message.versionedParams, writer.uint32(10).fork()).ldelim();
        }
        if (!message.paymentAccountCountLimit.isZero()) {
            writer.uint32(16).uint64(message.paymentAccountCountLimit);
        }
        if (!message.forcedSettleTime.isZero()) {
            writer.uint32(24).uint64(message.forcedSettleTime);
        }
        if (!message.maxAutoSettleFlowCount.isZero()) {
            writer.uint32(32).uint64(message.maxAutoSettleFlowCount);
        }
        if (!message.maxAutoResumeFlowCount.isZero()) {
            writer.uint32(40).uint64(message.maxAutoResumeFlowCount);
        }
        if (message.feeDenom !== "") {
            writer.uint32(50).string(message.feeDenom);
        }
        if (message.withdrawTimeLockThreshold !== "") {
            writer.uint32(58).string(message.withdrawTimeLockThreshold);
        }
        if (!message.withdrawTimeLockDuration.isZero()) {
            writer.uint32(64).uint64(message.withdrawTimeLockDuration);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.versionedParams = exports.VersionedParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.paymentAccountCountLimit = reader.uint64();
                    break;
                case 3:
                    message.forcedSettleTime = reader.uint64();
                    break;
                case 4:
                    message.maxAutoSettleFlowCount = reader.uint64();
                    break;
                case 5:
                    message.maxAutoResumeFlowCount = reader.uint64();
                    break;
                case 6:
                    message.feeDenom = reader.string();
                    break;
                case 7:
                    message.withdrawTimeLockThreshold = reader.string();
                    break;
                case 8:
                    message.withdrawTimeLockDuration = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            versionedParams: (0, helpers_1.isSet)(object.versionedParams) ? exports.VersionedParams.fromJSON(object.versionedParams) : undefined,
            paymentAccountCountLimit: (0, helpers_1.isSet)(object.paymentAccountCountLimit) ? helpers_1.Long.fromValue(object.paymentAccountCountLimit) : helpers_1.Long.UZERO,
            forcedSettleTime: (0, helpers_1.isSet)(object.forcedSettleTime) ? helpers_1.Long.fromValue(object.forcedSettleTime) : helpers_1.Long.UZERO,
            maxAutoSettleFlowCount: (0, helpers_1.isSet)(object.maxAutoSettleFlowCount) ? helpers_1.Long.fromValue(object.maxAutoSettleFlowCount) : helpers_1.Long.UZERO,
            maxAutoResumeFlowCount: (0, helpers_1.isSet)(object.maxAutoResumeFlowCount) ? helpers_1.Long.fromValue(object.maxAutoResumeFlowCount) : helpers_1.Long.UZERO,
            feeDenom: (0, helpers_1.isSet)(object.feeDenom) ? String(object.feeDenom) : "",
            withdrawTimeLockThreshold: (0, helpers_1.isSet)(object.withdrawTimeLockThreshold) ? String(object.withdrawTimeLockThreshold) : "",
            withdrawTimeLockDuration: (0, helpers_1.isSet)(object.withdrawTimeLockDuration) ? helpers_1.Long.fromValue(object.withdrawTimeLockDuration) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.versionedParams !== undefined && (obj.versionedParams = message.versionedParams ? exports.VersionedParams.toJSON(message.versionedParams) : undefined);
        message.paymentAccountCountLimit !== undefined && (obj.paymentAccountCountLimit = (message.paymentAccountCountLimit || helpers_1.Long.UZERO).toString());
        message.forcedSettleTime !== undefined && (obj.forcedSettleTime = (message.forcedSettleTime || helpers_1.Long.UZERO).toString());
        message.maxAutoSettleFlowCount !== undefined && (obj.maxAutoSettleFlowCount = (message.maxAutoSettleFlowCount || helpers_1.Long.UZERO).toString());
        message.maxAutoResumeFlowCount !== undefined && (obj.maxAutoResumeFlowCount = (message.maxAutoResumeFlowCount || helpers_1.Long.UZERO).toString());
        message.feeDenom !== undefined && (obj.feeDenom = message.feeDenom);
        message.withdrawTimeLockThreshold !== undefined && (obj.withdrawTimeLockThreshold = message.withdrawTimeLockThreshold);
        message.withdrawTimeLockDuration !== undefined && (obj.withdrawTimeLockDuration = (message.withdrawTimeLockDuration || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.versionedParams = object.versionedParams !== undefined && object.versionedParams !== null ? exports.VersionedParams.fromPartial(object.versionedParams) : undefined;
        message.paymentAccountCountLimit = object.paymentAccountCountLimit !== undefined && object.paymentAccountCountLimit !== null ? helpers_1.Long.fromValue(object.paymentAccountCountLimit) : helpers_1.Long.UZERO;
        message.forcedSettleTime = object.forcedSettleTime !== undefined && object.forcedSettleTime !== null ? helpers_1.Long.fromValue(object.forcedSettleTime) : helpers_1.Long.UZERO;
        message.maxAutoSettleFlowCount = object.maxAutoSettleFlowCount !== undefined && object.maxAutoSettleFlowCount !== null ? helpers_1.Long.fromValue(object.maxAutoSettleFlowCount) : helpers_1.Long.UZERO;
        message.maxAutoResumeFlowCount = object.maxAutoResumeFlowCount !== undefined && object.maxAutoResumeFlowCount !== null ? helpers_1.Long.fromValue(object.maxAutoResumeFlowCount) : helpers_1.Long.UZERO;
        message.feeDenom = object.feeDenom ?? "";
        message.withdrawTimeLockThreshold = object.withdrawTimeLockThreshold ?? "";
        message.withdrawTimeLockDuration = object.withdrawTimeLockDuration !== undefined && object.withdrawTimeLockDuration !== null ? helpers_1.Long.fromValue(object.withdrawTimeLockDuration) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            versionedParams: object.versioned_params ? exports.VersionedParams.fromSDK(object.versioned_params) : undefined,
            paymentAccountCountLimit: object?.payment_account_count_limit,
            forcedSettleTime: object?.forced_settle_time,
            maxAutoSettleFlowCount: object?.max_auto_settle_flow_count,
            maxAutoResumeFlowCount: object?.max_auto_resume_flow_count,
            feeDenom: object?.fee_denom,
            withdrawTimeLockThreshold: object?.withdraw_time_lock_threshold,
            withdrawTimeLockDuration: object?.withdraw_time_lock_duration
        };
    },
    toSDK(message) {
        const obj = {};
        message.versionedParams !== undefined && (obj.versioned_params = message.versionedParams ? exports.VersionedParams.toSDK(message.versionedParams) : undefined);
        obj.payment_account_count_limit = message.paymentAccountCountLimit;
        obj.forced_settle_time = message.forcedSettleTime;
        obj.max_auto_settle_flow_count = message.maxAutoSettleFlowCount;
        obj.max_auto_resume_flow_count = message.maxAutoResumeFlowCount;
        obj.fee_denom = message.feeDenom;
        obj.withdraw_time_lock_threshold = message.withdrawTimeLockThreshold;
        obj.withdraw_time_lock_duration = message.withdrawTimeLockDuration;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseParams();
        if (object.versioned_params !== undefined && object.versioned_params !== null) {
            message.versionedParams = exports.VersionedParams.fromAmino(object.versioned_params);
        }
        if (object.payment_account_count_limit !== undefined && object.payment_account_count_limit !== null) {
            message.paymentAccountCountLimit = helpers_1.Long.fromString(object.payment_account_count_limit);
        }
        if (object.forced_settle_time !== undefined && object.forced_settle_time !== null) {
            message.forcedSettleTime = helpers_1.Long.fromString(object.forced_settle_time);
        }
        if (object.max_auto_settle_flow_count !== undefined && object.max_auto_settle_flow_count !== null) {
            message.maxAutoSettleFlowCount = helpers_1.Long.fromString(object.max_auto_settle_flow_count);
        }
        if (object.max_auto_resume_flow_count !== undefined && object.max_auto_resume_flow_count !== null) {
            message.maxAutoResumeFlowCount = helpers_1.Long.fromString(object.max_auto_resume_flow_count);
        }
        if (object.fee_denom !== undefined && object.fee_denom !== null) {
            message.feeDenom = object.fee_denom;
        }
        if (object.withdraw_time_lock_threshold !== undefined && object.withdraw_time_lock_threshold !== null) {
            message.withdrawTimeLockThreshold = object.withdraw_time_lock_threshold;
        }
        if (object.withdraw_time_lock_duration !== undefined && object.withdraw_time_lock_duration !== null) {
            message.withdrawTimeLockDuration = helpers_1.Long.fromString(object.withdraw_time_lock_duration);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.versioned_params = message.versionedParams ? exports.VersionedParams.toAmino(message.versionedParams) : undefined;
        obj.payment_account_count_limit = message.paymentAccountCountLimit ? message.paymentAccountCountLimit.toString() : undefined;
        obj.forced_settle_time = message.forcedSettleTime ? message.forcedSettleTime.toString() : undefined;
        obj.max_auto_settle_flow_count = message.maxAutoSettleFlowCount ? message.maxAutoSettleFlowCount.toString() : undefined;
        obj.max_auto_resume_flow_count = message.maxAutoResumeFlowCount ? message.maxAutoResumeFlowCount.toString() : undefined;
        obj.fee_denom = message.feeDenom;
        obj.withdraw_time_lock_threshold = message.withdrawTimeLockThreshold;
        obj.withdraw_time_lock_duration = message.withdrawTimeLockDuration ? message.withdrawTimeLockDuration.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.Params.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.Params.decode(message.value);
    },
    toProto(message) {
        return exports.Params.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.payment.Params",
            value: exports.Params.encode(message).finish()
        };
    }
};
function createBaseVersionedParams() {
    return {
        reserveTime: helpers_1.Long.UZERO,
        validatorTaxRate: ""
    };
}
exports.VersionedParams = {
    typeUrl: "/greenfield.payment.VersionedParams",
    encode(message, writer = _m0.Writer.create()) {
        if (!message.reserveTime.isZero()) {
            writer.uint32(8).uint64(message.reserveTime);
        }
        if (message.validatorTaxRate !== "") {
            writer.uint32(18).string(math_1.Decimal.fromUserInput(message.validatorTaxRate, 18).atomics);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVersionedParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.reserveTime = reader.uint64();
                    break;
                case 2:
                    message.validatorTaxRate = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            reserveTime: (0, helpers_1.isSet)(object.reserveTime) ? helpers_1.Long.fromValue(object.reserveTime) : helpers_1.Long.UZERO,
            validatorTaxRate: (0, helpers_1.isSet)(object.validatorTaxRate) ? String(object.validatorTaxRate) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.reserveTime !== undefined && (obj.reserveTime = (message.reserveTime || helpers_1.Long.UZERO).toString());
        message.validatorTaxRate !== undefined && (obj.validatorTaxRate = message.validatorTaxRate);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseVersionedParams();
        message.reserveTime = object.reserveTime !== undefined && object.reserveTime !== null ? helpers_1.Long.fromValue(object.reserveTime) : helpers_1.Long.UZERO;
        message.validatorTaxRate = object.validatorTaxRate ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            reserveTime: object?.reserve_time,
            validatorTaxRate: object?.validator_tax_rate
        };
    },
    toSDK(message) {
        const obj = {};
        obj.reserve_time = message.reserveTime;
        obj.validator_tax_rate = message.validatorTaxRate;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseVersionedParams();
        if (object.reserve_time !== undefined && object.reserve_time !== null) {
            message.reserveTime = helpers_1.Long.fromString(object.reserve_time);
        }
        if (object.validator_tax_rate !== undefined && object.validator_tax_rate !== null) {
            message.validatorTaxRate = object.validator_tax_rate;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.reserve_time = message.reserveTime ? message.reserveTime.toString() : undefined;
        obj.validator_tax_rate = message.validatorTaxRate;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.VersionedParams.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.VersionedParams.decode(message.value);
    },
    toProto(message) {
        return exports.VersionedParams.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.payment.VersionedParams",
            value: exports.VersionedParams.encode(message).finish()
        };
    }
};
//# sourceMappingURL=params.js.map