"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutFlow = exports.outFlowStatusToJSON = exports.outFlowStatusFromJSON = exports.OutFlowStatusAmino = exports.OutFlowStatusSDKType = exports.OutFlowStatus = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
const helpers_1 = require("../../helpers");
exports.protobufPackage = "greenfield.payment";
/** OutFlowStatus defines the status of a out flow */
var OutFlowStatus;
(function (OutFlowStatus) {
    /** OUT_FLOW_STATUS_ACTIVE - OUT_FLOW_STATUS_ACTIVE defines the active status of a out flow. */
    OutFlowStatus[OutFlowStatus["OUT_FLOW_STATUS_ACTIVE"] = 0] = "OUT_FLOW_STATUS_ACTIVE";
    /** OUT_FLOW_STATUS_FROZEN - OUT_FLOW_STATUS_FROZEN defines the frozen status of a out flow. */
    OutFlowStatus[OutFlowStatus["OUT_FLOW_STATUS_FROZEN"] = 1] = "OUT_FLOW_STATUS_FROZEN";
    OutFlowStatus[OutFlowStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(OutFlowStatus = exports.OutFlowStatus || (exports.OutFlowStatus = {}));
exports.OutFlowStatusSDKType = OutFlowStatus;
exports.OutFlowStatusAmino = OutFlowStatus;
function outFlowStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "OUT_FLOW_STATUS_ACTIVE":
            return OutFlowStatus.OUT_FLOW_STATUS_ACTIVE;
        case 1:
        case "OUT_FLOW_STATUS_FROZEN":
            return OutFlowStatus.OUT_FLOW_STATUS_FROZEN;
        case -1:
        case "UNRECOGNIZED":
        default:
            return OutFlowStatus.UNRECOGNIZED;
    }
}
exports.outFlowStatusFromJSON = outFlowStatusFromJSON;
function outFlowStatusToJSON(object) {
    switch (object) {
        case OutFlowStatus.OUT_FLOW_STATUS_ACTIVE:
            return "OUT_FLOW_STATUS_ACTIVE";
        case OutFlowStatus.OUT_FLOW_STATUS_FROZEN:
            return "OUT_FLOW_STATUS_FROZEN";
        case OutFlowStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.outFlowStatusToJSON = outFlowStatusToJSON;
function createBaseOutFlow() {
    return {
        toAddress: "",
        rate: "",
        status: 0
    };
}
exports.OutFlow = {
    typeUrl: "/greenfield.payment.OutFlow",
    encode(message, writer = _m0.Writer.create()) {
        if (message.toAddress !== "") {
            writer.uint32(10).string(message.toAddress);
        }
        if (message.rate !== "") {
            writer.uint32(18).string(message.rate);
        }
        if (message.status !== 0) {
            writer.uint32(24).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOutFlow();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.toAddress = reader.string();
                    break;
                case 2:
                    message.rate = reader.string();
                    break;
                case 3:
                    message.status = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            toAddress: (0, helpers_1.isSet)(object.toAddress) ? String(object.toAddress) : "",
            rate: (0, helpers_1.isSet)(object.rate) ? String(object.rate) : "",
            status: (0, helpers_1.isSet)(object.status) ? outFlowStatusFromJSON(object.status) : -1
        };
    },
    toJSON(message) {
        const obj = {};
        message.toAddress !== undefined && (obj.toAddress = message.toAddress);
        message.rate !== undefined && (obj.rate = message.rate);
        message.status !== undefined && (obj.status = outFlowStatusToJSON(message.status));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseOutFlow();
        message.toAddress = object.toAddress ?? "";
        message.rate = object.rate ?? "";
        message.status = object.status ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            toAddress: object?.to_address,
            rate: object?.rate,
            status: (0, helpers_1.isSet)(object.status) ? outFlowStatusFromJSON(object.status) : -1
        };
    },
    toSDK(message) {
        const obj = {};
        obj.to_address = message.toAddress;
        obj.rate = message.rate;
        message.status !== undefined && (obj.status = outFlowStatusToJSON(message.status));
        return obj;
    },
    fromAmino(object) {
        const message = createBaseOutFlow();
        if (object.to_address !== undefined && object.to_address !== null) {
            message.toAddress = object.to_address;
        }
        if (object.rate !== undefined && object.rate !== null) {
            message.rate = object.rate;
        }
        if (object.status !== undefined && object.status !== null) {
            message.status = outFlowStatusFromJSON(object.status);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.to_address = message.toAddress;
        obj.rate = message.rate;
        obj.status = outFlowStatusToJSON(message.status);
        return obj;
    },
    fromAminoMsg(object) {
        return exports.OutFlow.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.OutFlow.decode(message.value);
    },
    toProto(message) {
        return exports.OutFlow.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.payment.OutFlow",
            value: exports.OutFlow.encode(message).finish()
        };
    }
};
//# sourceMappingURL=out_flow.js.map