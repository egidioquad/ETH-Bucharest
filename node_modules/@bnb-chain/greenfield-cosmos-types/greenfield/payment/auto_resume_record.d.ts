/// <reference types="long" />
import { Long } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.payment";
/**
 * AutoResumeRecord is the record keeps the auto resume information.
 * The EndBlocker of payment module will scan the list of AutoResumeRecord
 * and resume the stream account one by one.
 */
export interface AutoResumeRecord {
    /** timestamp is the unix timestamp to order the records */
    timestamp: Long;
    /** the stream account address */
    addr: string;
}
export interface AutoResumeRecordProtoMsg {
    typeUrl: "/greenfield.payment.AutoResumeRecord";
    value: Uint8Array;
}
/**
 * AutoResumeRecord is the record keeps the auto resume information.
 * The EndBlocker of payment module will scan the list of AutoResumeRecord
 * and resume the stream account one by one.
 */
export interface AutoResumeRecordAmino {
    /** timestamp is the unix timestamp to order the records */
    timestamp?: string;
    /** the stream account address */
    addr?: string;
}
export interface AutoResumeRecordAminoMsg {
    type: "/greenfield.payment.AutoResumeRecord";
    value: AutoResumeRecordAmino;
}
/**
 * AutoResumeRecord is the record keeps the auto resume information.
 * The EndBlocker of payment module will scan the list of AutoResumeRecord
 * and resume the stream account one by one.
 */
export interface AutoResumeRecordSDKType {
    timestamp: Long;
    addr: string;
}
export declare const AutoResumeRecord: {
    typeUrl: string;
    encode(message: AutoResumeRecord, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutoResumeRecord;
    fromJSON(object: any): AutoResumeRecord;
    toJSON(message: AutoResumeRecord): unknown;
    fromPartial<I extends {
        timestamp?: string | number | Long.Long;
        addr?: string;
    } & {
        timestamp?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["timestamp"], keyof Long.Long>, never>);
        addr?: string;
    } & Record<Exclude<keyof I, keyof AutoResumeRecord>, never>>(object: I): AutoResumeRecord;
    fromSDK(object: AutoResumeRecordSDKType): AutoResumeRecord;
    toSDK(message: AutoResumeRecord): AutoResumeRecordSDKType;
    fromAmino(object: AutoResumeRecordAmino): AutoResumeRecord;
    toAmino(message: AutoResumeRecord): AutoResumeRecordAmino;
    fromAminoMsg(object: AutoResumeRecordAminoMsg): AutoResumeRecord;
    fromProtoMsg(message: AutoResumeRecordProtoMsg): AutoResumeRecord;
    toProto(message: AutoResumeRecord): Uint8Array;
    toProtoMsg(message: AutoResumeRecord): AutoResumeRecordProtoMsg;
};
