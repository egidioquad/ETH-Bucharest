/// <reference types="long" />
import { StreamAccountStatus } from "./stream_record";
import { Long } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.payment";
export declare enum FeePreviewType {
    FEE_PREVIEW_TYPE_PRELOCKED_FEE = 0,
    FEE_PREVIEW_TYPE_UNLOCKED_FEE = 1,
    UNRECOGNIZED = -1
}
export declare const FeePreviewTypeSDKType: typeof FeePreviewType;
export declare const FeePreviewTypeAmino: typeof FeePreviewType;
export declare function feePreviewTypeFromJSON(object: any): FeePreviewType;
export declare function feePreviewTypeToJSON(object: FeePreviewType): string;
export interface EventPaymentAccountUpdate {
    /** address of the payment account */
    addr: string;
    /** owner address of the payment account */
    owner: string;
    /** whether the payment account is refundable */
    refundable: boolean;
}
export interface EventPaymentAccountUpdateProtoMsg {
    typeUrl: "/greenfield.payment.EventPaymentAccountUpdate";
    value: Uint8Array;
}
export interface EventPaymentAccountUpdateAmino {
    /** address of the payment account */
    addr?: string;
    /** owner address of the payment account */
    owner?: string;
    /** whether the payment account is refundable */
    refundable?: boolean;
}
export interface EventPaymentAccountUpdateAminoMsg {
    type: "/greenfield.payment.EventPaymentAccountUpdate";
    value: EventPaymentAccountUpdateAmino;
}
export interface EventPaymentAccountUpdateSDKType {
    addr: string;
    owner: string;
    refundable: boolean;
}
/** Stream Payment Record of a stream account */
export interface EventStreamRecordUpdate {
    /** account address */
    account: string;
    /** latest update timestamp of the stream record */
    crudTimestamp: Long;
    /**
     * The per-second rate that an account's balance is changing.
     * It is the sum of the account's inbound and outbound flow rates.
     */
    netflowRate: string;
    /** The frozen netflow rate, which is used when resuming stream account */
    frozenNetflowRate: string;
    /** The balance of the stream account at the latest CRUD timestamp. */
    staticBalance: string;
    /**
     * reserved balance of the stream account
     * If the netflow rate is negative, the reserved balance is `netflow_rate * reserve_time`
     */
    bufferBalance: string;
    /** the locked balance of the stream account after it puts a new object and before the object is sealed */
    lockBalance: string;
    /** the status of the stream account */
    status: StreamAccountStatus;
    /** the unix timestamp when the stream account will be settled */
    settleTimestamp: Long;
}
export interface EventStreamRecordUpdateProtoMsg {
    typeUrl: "/greenfield.payment.EventStreamRecordUpdate";
    value: Uint8Array;
}
/** Stream Payment Record of a stream account */
export interface EventStreamRecordUpdateAmino {
    /** account address */
    account?: string;
    /** latest update timestamp of the stream record */
    crud_timestamp?: string;
    /**
     * The per-second rate that an account's balance is changing.
     * It is the sum of the account's inbound and outbound flow rates.
     */
    netflow_rate?: string;
    /** The frozen netflow rate, which is used when resuming stream account */
    frozen_netflow_rate?: string;
    /** The balance of the stream account at the latest CRUD timestamp. */
    static_balance?: string;
    /**
     * reserved balance of the stream account
     * If the netflow rate is negative, the reserved balance is `netflow_rate * reserve_time`
     */
    buffer_balance?: string;
    /** the locked balance of the stream account after it puts a new object and before the object is sealed */
    lock_balance?: string;
    /** the status of the stream account */
    status?: StreamAccountStatus;
    /** the unix timestamp when the stream account will be settled */
    settle_timestamp?: string;
}
export interface EventStreamRecordUpdateAminoMsg {
    type: "/greenfield.payment.EventStreamRecordUpdate";
    value: EventStreamRecordUpdateAmino;
}
/** Stream Payment Record of a stream account */
export interface EventStreamRecordUpdateSDKType {
    account: string;
    crud_timestamp: Long;
    netflow_rate: string;
    frozen_netflow_rate: string;
    static_balance: string;
    buffer_balance: string;
    lock_balance: string;
    status: StreamAccountStatus;
    settle_timestamp: Long;
}
/**
 * EventForceSettle may be emitted on all Msgs and EndBlocker when a payment account's
 * balance or net outflow rate is changed
 */
export interface EventForceSettle {
    /** address of the payment account */
    addr: string;
    /**
     * left balance of the payment account after force settlement
     * if the balance is positive, it will go to the governance stream account
     * if the balance is negative, it's the debt of the system, which will be paid by the governance stream account
     */
    settledBalance: string;
}
export interface EventForceSettleProtoMsg {
    typeUrl: "/greenfield.payment.EventForceSettle";
    value: Uint8Array;
}
/**
 * EventForceSettle may be emitted on all Msgs and EndBlocker when a payment account's
 * balance or net outflow rate is changed
 */
export interface EventForceSettleAmino {
    /** address of the payment account */
    addr?: string;
    /**
     * left balance of the payment account after force settlement
     * if the balance is positive, it will go to the governance stream account
     * if the balance is negative, it's the debt of the system, which will be paid by the governance stream account
     */
    settled_balance?: string;
}
export interface EventForceSettleAminoMsg {
    type: "/greenfield.payment.EventForceSettle";
    value: EventForceSettleAmino;
}
/**
 * EventForceSettle may be emitted on all Msgs and EndBlocker when a payment account's
 * balance or net outflow rate is changed
 */
export interface EventForceSettleSDKType {
    addr: string;
    settled_balance: string;
}
export interface EventDeposit {
    /** from is the the address of the account to deposit from */
    from: string;
    /** to is the address of the stream account to deposit to */
    to: string;
    /** amount is the amount to deposit */
    amount: string;
}
export interface EventDepositProtoMsg {
    typeUrl: "/greenfield.payment.EventDeposit";
    value: Uint8Array;
}
export interface EventDepositAmino {
    /** from is the the address of the account to deposit from */
    from?: string;
    /** to is the address of the stream account to deposit to */
    to?: string;
    /** amount is the amount to deposit */
    amount?: string;
}
export interface EventDepositAminoMsg {
    type: "/greenfield.payment.EventDeposit";
    value: EventDepositAmino;
}
export interface EventDepositSDKType {
    from: string;
    to: string;
    amount: string;
}
export interface EventWithdraw {
    /** to the address of the receive account */
    to: string;
    /** from is the address of the stream account to withdraw from */
    from: string;
    /** amount is the amount to withdraw */
    amount: string;
}
export interface EventWithdrawProtoMsg {
    typeUrl: "/greenfield.payment.EventWithdraw";
    value: Uint8Array;
}
export interface EventWithdrawAmino {
    /** to the address of the receive account */
    to?: string;
    /** from is the address of the stream account to withdraw from */
    from?: string;
    /** amount is the amount to withdraw */
    amount?: string;
}
export interface EventWithdrawAminoMsg {
    type: "/greenfield.payment.EventWithdraw";
    value: EventWithdrawAmino;
}
export interface EventWithdrawSDKType {
    to: string;
    from: string;
    amount: string;
}
/**
 * emit when upload/cancel/delete object, used for frontend to preview the fee changed
 * only emit in tx simulation
 */
export interface EventFeePreview {
    account: string;
    feePreviewType: FeePreviewType;
    amount: string;
}
export interface EventFeePreviewProtoMsg {
    typeUrl: "/greenfield.payment.EventFeePreview";
    value: Uint8Array;
}
/**
 * emit when upload/cancel/delete object, used for frontend to preview the fee changed
 * only emit in tx simulation
 */
export interface EventFeePreviewAmino {
    account?: string;
    fee_preview_type?: FeePreviewType;
    amount?: string;
}
export interface EventFeePreviewAminoMsg {
    type: "/greenfield.payment.EventFeePreview";
    value: EventFeePreviewAmino;
}
/**
 * emit when upload/cancel/delete object, used for frontend to preview the fee changed
 * only emit in tx simulation
 */
export interface EventFeePreviewSDKType {
    account: string;
    fee_preview_type: FeePreviewType;
    amount: string;
}
export declare const EventPaymentAccountUpdate: {
    typeUrl: string;
    encode(message: EventPaymentAccountUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventPaymentAccountUpdate;
    fromJSON(object: any): EventPaymentAccountUpdate;
    toJSON(message: EventPaymentAccountUpdate): unknown;
    fromPartial<I extends {
        addr?: string;
        owner?: string;
        refundable?: boolean;
    } & {
        addr?: string;
        owner?: string;
        refundable?: boolean;
    } & Record<Exclude<keyof I, keyof EventPaymentAccountUpdate>, never>>(object: I): EventPaymentAccountUpdate;
    fromSDK(object: EventPaymentAccountUpdateSDKType): EventPaymentAccountUpdate;
    toSDK(message: EventPaymentAccountUpdate): EventPaymentAccountUpdateSDKType;
    fromAmino(object: EventPaymentAccountUpdateAmino): EventPaymentAccountUpdate;
    toAmino(message: EventPaymentAccountUpdate): EventPaymentAccountUpdateAmino;
    fromAminoMsg(object: EventPaymentAccountUpdateAminoMsg): EventPaymentAccountUpdate;
    fromProtoMsg(message: EventPaymentAccountUpdateProtoMsg): EventPaymentAccountUpdate;
    toProto(message: EventPaymentAccountUpdate): Uint8Array;
    toProtoMsg(message: EventPaymentAccountUpdate): EventPaymentAccountUpdateProtoMsg;
};
export declare const EventStreamRecordUpdate: {
    typeUrl: string;
    encode(message: EventStreamRecordUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventStreamRecordUpdate;
    fromJSON(object: any): EventStreamRecordUpdate;
    toJSON(message: EventStreamRecordUpdate): unknown;
    fromPartial<I extends {
        account?: string;
        crudTimestamp?: string | number | Long.Long;
        netflowRate?: string;
        frozenNetflowRate?: string;
        staticBalance?: string;
        bufferBalance?: string;
        lockBalance?: string;
        status?: StreamAccountStatus;
        settleTimestamp?: string | number | Long.Long;
    } & {
        account?: string;
        crudTimestamp?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["crudTimestamp"], keyof Long.Long>, never>);
        netflowRate?: string;
        frozenNetflowRate?: string;
        staticBalance?: string;
        bufferBalance?: string;
        lockBalance?: string;
        status?: StreamAccountStatus;
        settleTimestamp?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["settleTimestamp"], keyof Long.Long>, never>);
    } & Record<Exclude<keyof I, keyof EventStreamRecordUpdate>, never>>(object: I): EventStreamRecordUpdate;
    fromSDK(object: EventStreamRecordUpdateSDKType): EventStreamRecordUpdate;
    toSDK(message: EventStreamRecordUpdate): EventStreamRecordUpdateSDKType;
    fromAmino(object: EventStreamRecordUpdateAmino): EventStreamRecordUpdate;
    toAmino(message: EventStreamRecordUpdate): EventStreamRecordUpdateAmino;
    fromAminoMsg(object: EventStreamRecordUpdateAminoMsg): EventStreamRecordUpdate;
    fromProtoMsg(message: EventStreamRecordUpdateProtoMsg): EventStreamRecordUpdate;
    toProto(message: EventStreamRecordUpdate): Uint8Array;
    toProtoMsg(message: EventStreamRecordUpdate): EventStreamRecordUpdateProtoMsg;
};
export declare const EventForceSettle: {
    typeUrl: string;
    encode(message: EventForceSettle, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventForceSettle;
    fromJSON(object: any): EventForceSettle;
    toJSON(message: EventForceSettle): unknown;
    fromPartial<I extends {
        addr?: string;
        settledBalance?: string;
    } & {
        addr?: string;
        settledBalance?: string;
    } & Record<Exclude<keyof I, keyof EventForceSettle>, never>>(object: I): EventForceSettle;
    fromSDK(object: EventForceSettleSDKType): EventForceSettle;
    toSDK(message: EventForceSettle): EventForceSettleSDKType;
    fromAmino(object: EventForceSettleAmino): EventForceSettle;
    toAmino(message: EventForceSettle): EventForceSettleAmino;
    fromAminoMsg(object: EventForceSettleAminoMsg): EventForceSettle;
    fromProtoMsg(message: EventForceSettleProtoMsg): EventForceSettle;
    toProto(message: EventForceSettle): Uint8Array;
    toProtoMsg(message: EventForceSettle): EventForceSettleProtoMsg;
};
export declare const EventDeposit: {
    typeUrl: string;
    encode(message: EventDeposit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventDeposit;
    fromJSON(object: any): EventDeposit;
    toJSON(message: EventDeposit): unknown;
    fromPartial<I extends {
        from?: string;
        to?: string;
        amount?: string;
    } & {
        from?: string;
        to?: string;
        amount?: string;
    } & Record<Exclude<keyof I, keyof EventDeposit>, never>>(object: I): EventDeposit;
    fromSDK(object: EventDepositSDKType): EventDeposit;
    toSDK(message: EventDeposit): EventDepositSDKType;
    fromAmino(object: EventDepositAmino): EventDeposit;
    toAmino(message: EventDeposit): EventDepositAmino;
    fromAminoMsg(object: EventDepositAminoMsg): EventDeposit;
    fromProtoMsg(message: EventDepositProtoMsg): EventDeposit;
    toProto(message: EventDeposit): Uint8Array;
    toProtoMsg(message: EventDeposit): EventDepositProtoMsg;
};
export declare const EventWithdraw: {
    typeUrl: string;
    encode(message: EventWithdraw, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventWithdraw;
    fromJSON(object: any): EventWithdraw;
    toJSON(message: EventWithdraw): unknown;
    fromPartial<I extends {
        to?: string;
        from?: string;
        amount?: string;
    } & {
        to?: string;
        from?: string;
        amount?: string;
    } & Record<Exclude<keyof I, keyof EventWithdraw>, never>>(object: I): EventWithdraw;
    fromSDK(object: EventWithdrawSDKType): EventWithdraw;
    toSDK(message: EventWithdraw): EventWithdrawSDKType;
    fromAmino(object: EventWithdrawAmino): EventWithdraw;
    toAmino(message: EventWithdraw): EventWithdrawAmino;
    fromAminoMsg(object: EventWithdrawAminoMsg): EventWithdraw;
    fromProtoMsg(message: EventWithdrawProtoMsg): EventWithdraw;
    toProto(message: EventWithdraw): Uint8Array;
    toProtoMsg(message: EventWithdraw): EventWithdrawProtoMsg;
};
export declare const EventFeePreview: {
    typeUrl: string;
    encode(message: EventFeePreview, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventFeePreview;
    fromJSON(object: any): EventFeePreview;
    toJSON(message: EventFeePreview): unknown;
    fromPartial<I extends {
        account?: string;
        feePreviewType?: FeePreviewType;
        amount?: string;
    } & {
        account?: string;
        feePreviewType?: FeePreviewType;
        amount?: string;
    } & Record<Exclude<keyof I, keyof EventFeePreview>, never>>(object: I): EventFeePreview;
    fromSDK(object: EventFeePreviewSDKType): EventFeePreview;
    toSDK(message: EventFeePreview): EventFeePreviewSDKType;
    fromAmino(object: EventFeePreviewAmino): EventFeePreview;
    toAmino(message: EventFeePreview): EventFeePreviewAmino;
    fromAminoMsg(object: EventFeePreviewAminoMsg): EventFeePreview;
    fromProtoMsg(message: EventFeePreviewProtoMsg): EventFeePreview;
    toProto(message: EventFeePreview): Uint8Array;
    toProtoMsg(message: EventFeePreview): EventFeePreviewProtoMsg;
};
