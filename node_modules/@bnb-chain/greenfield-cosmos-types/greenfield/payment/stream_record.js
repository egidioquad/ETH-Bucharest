"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamRecord = exports.streamAccountStatusToJSON = exports.streamAccountStatusFromJSON = exports.StreamAccountStatusAmino = exports.StreamAccountStatusSDKType = exports.StreamAccountStatus = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.payment";
/** StreamAccountStatus defines the status of a stream account */
var StreamAccountStatus;
(function (StreamAccountStatus) {
    /** STREAM_ACCOUNT_STATUS_ACTIVE - STREAM_ACCOUNT_STATUS_ACTIVE defines the active status of a stream account. */
    StreamAccountStatus[StreamAccountStatus["STREAM_ACCOUNT_STATUS_ACTIVE"] = 0] = "STREAM_ACCOUNT_STATUS_ACTIVE";
    /**
     * STREAM_ACCOUNT_STATUS_FROZEN - STREAM_ACCOUNT_STATUS_FROZEN defines the frozen status of a stream account.
     * A frozen stream account cannot be used as payment address for buckets.
     * It can be unfrozen by depositing more BNB to the stream account.
     */
    StreamAccountStatus[StreamAccountStatus["STREAM_ACCOUNT_STATUS_FROZEN"] = 1] = "STREAM_ACCOUNT_STATUS_FROZEN";
    StreamAccountStatus[StreamAccountStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(StreamAccountStatus = exports.StreamAccountStatus || (exports.StreamAccountStatus = {}));
exports.StreamAccountStatusSDKType = StreamAccountStatus;
exports.StreamAccountStatusAmino = StreamAccountStatus;
function streamAccountStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "STREAM_ACCOUNT_STATUS_ACTIVE":
            return StreamAccountStatus.STREAM_ACCOUNT_STATUS_ACTIVE;
        case 1:
        case "STREAM_ACCOUNT_STATUS_FROZEN":
            return StreamAccountStatus.STREAM_ACCOUNT_STATUS_FROZEN;
        case -1:
        case "UNRECOGNIZED":
        default:
            return StreamAccountStatus.UNRECOGNIZED;
    }
}
exports.streamAccountStatusFromJSON = streamAccountStatusFromJSON;
function streamAccountStatusToJSON(object) {
    switch (object) {
        case StreamAccountStatus.STREAM_ACCOUNT_STATUS_ACTIVE:
            return "STREAM_ACCOUNT_STATUS_ACTIVE";
        case StreamAccountStatus.STREAM_ACCOUNT_STATUS_FROZEN:
            return "STREAM_ACCOUNT_STATUS_FROZEN";
        case StreamAccountStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.streamAccountStatusToJSON = streamAccountStatusToJSON;
function createBaseStreamRecord() {
    return {
        account: "",
        crudTimestamp: helpers_1.Long.ZERO,
        netflowRate: "",
        staticBalance: "",
        bufferBalance: "",
        lockBalance: "",
        status: 0,
        settleTimestamp: helpers_1.Long.ZERO,
        outFlowCount: helpers_1.Long.UZERO,
        frozenNetflowRate: ""
    };
}
exports.StreamRecord = {
    typeUrl: "/greenfield.payment.StreamRecord",
    encode(message, writer = _m0.Writer.create()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        if (!message.crudTimestamp.isZero()) {
            writer.uint32(16).int64(message.crudTimestamp);
        }
        if (message.netflowRate !== "") {
            writer.uint32(26).string(message.netflowRate);
        }
        if (message.staticBalance !== "") {
            writer.uint32(34).string(message.staticBalance);
        }
        if (message.bufferBalance !== "") {
            writer.uint32(42).string(message.bufferBalance);
        }
        if (message.lockBalance !== "") {
            writer.uint32(50).string(message.lockBalance);
        }
        if (message.status !== 0) {
            writer.uint32(56).int32(message.status);
        }
        if (!message.settleTimestamp.isZero()) {
            writer.uint32(64).int64(message.settleTimestamp);
        }
        if (!message.outFlowCount.isZero()) {
            writer.uint32(72).uint64(message.outFlowCount);
        }
        if (message.frozenNetflowRate !== "") {
            writer.uint32(82).string(message.frozenNetflowRate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamRecord();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.crudTimestamp = reader.int64();
                    break;
                case 3:
                    message.netflowRate = reader.string();
                    break;
                case 4:
                    message.staticBalance = reader.string();
                    break;
                case 5:
                    message.bufferBalance = reader.string();
                    break;
                case 6:
                    message.lockBalance = reader.string();
                    break;
                case 7:
                    message.status = reader.int32();
                    break;
                case 8:
                    message.settleTimestamp = reader.int64();
                    break;
                case 9:
                    message.outFlowCount = reader.uint64();
                    break;
                case 10:
                    message.frozenNetflowRate = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: (0, helpers_1.isSet)(object.account) ? String(object.account) : "",
            crudTimestamp: (0, helpers_1.isSet)(object.crudTimestamp) ? helpers_1.Long.fromValue(object.crudTimestamp) : helpers_1.Long.ZERO,
            netflowRate: (0, helpers_1.isSet)(object.netflowRate) ? String(object.netflowRate) : "",
            staticBalance: (0, helpers_1.isSet)(object.staticBalance) ? String(object.staticBalance) : "",
            bufferBalance: (0, helpers_1.isSet)(object.bufferBalance) ? String(object.bufferBalance) : "",
            lockBalance: (0, helpers_1.isSet)(object.lockBalance) ? String(object.lockBalance) : "",
            status: (0, helpers_1.isSet)(object.status) ? streamAccountStatusFromJSON(object.status) : -1,
            settleTimestamp: (0, helpers_1.isSet)(object.settleTimestamp) ? helpers_1.Long.fromValue(object.settleTimestamp) : helpers_1.Long.ZERO,
            outFlowCount: (0, helpers_1.isSet)(object.outFlowCount) ? helpers_1.Long.fromValue(object.outFlowCount) : helpers_1.Long.UZERO,
            frozenNetflowRate: (0, helpers_1.isSet)(object.frozenNetflowRate) ? String(object.frozenNetflowRate) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.account !== undefined && (obj.account = message.account);
        message.crudTimestamp !== undefined && (obj.crudTimestamp = (message.crudTimestamp || helpers_1.Long.ZERO).toString());
        message.netflowRate !== undefined && (obj.netflowRate = message.netflowRate);
        message.staticBalance !== undefined && (obj.staticBalance = message.staticBalance);
        message.bufferBalance !== undefined && (obj.bufferBalance = message.bufferBalance);
        message.lockBalance !== undefined && (obj.lockBalance = message.lockBalance);
        message.status !== undefined && (obj.status = streamAccountStatusToJSON(message.status));
        message.settleTimestamp !== undefined && (obj.settleTimestamp = (message.settleTimestamp || helpers_1.Long.ZERO).toString());
        message.outFlowCount !== undefined && (obj.outFlowCount = (message.outFlowCount || helpers_1.Long.UZERO).toString());
        message.frozenNetflowRate !== undefined && (obj.frozenNetflowRate = message.frozenNetflowRate);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseStreamRecord();
        message.account = object.account ?? "";
        message.crudTimestamp = object.crudTimestamp !== undefined && object.crudTimestamp !== null ? helpers_1.Long.fromValue(object.crudTimestamp) : helpers_1.Long.ZERO;
        message.netflowRate = object.netflowRate ?? "";
        message.staticBalance = object.staticBalance ?? "";
        message.bufferBalance = object.bufferBalance ?? "";
        message.lockBalance = object.lockBalance ?? "";
        message.status = object.status ?? 0;
        message.settleTimestamp = object.settleTimestamp !== undefined && object.settleTimestamp !== null ? helpers_1.Long.fromValue(object.settleTimestamp) : helpers_1.Long.ZERO;
        message.outFlowCount = object.outFlowCount !== undefined && object.outFlowCount !== null ? helpers_1.Long.fromValue(object.outFlowCount) : helpers_1.Long.UZERO;
        message.frozenNetflowRate = object.frozenNetflowRate ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            account: object?.account,
            crudTimestamp: object?.crud_timestamp,
            netflowRate: object?.netflow_rate,
            staticBalance: object?.static_balance,
            bufferBalance: object?.buffer_balance,
            lockBalance: object?.lock_balance,
            status: (0, helpers_1.isSet)(object.status) ? streamAccountStatusFromJSON(object.status) : -1,
            settleTimestamp: object?.settle_timestamp,
            outFlowCount: object?.out_flow_count,
            frozenNetflowRate: object?.frozen_netflow_rate
        };
    },
    toSDK(message) {
        const obj = {};
        obj.account = message.account;
        obj.crud_timestamp = message.crudTimestamp;
        obj.netflow_rate = message.netflowRate;
        obj.static_balance = message.staticBalance;
        obj.buffer_balance = message.bufferBalance;
        obj.lock_balance = message.lockBalance;
        message.status !== undefined && (obj.status = streamAccountStatusToJSON(message.status));
        obj.settle_timestamp = message.settleTimestamp;
        obj.out_flow_count = message.outFlowCount;
        obj.frozen_netflow_rate = message.frozenNetflowRate;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseStreamRecord();
        if (object.account !== undefined && object.account !== null) {
            message.account = object.account;
        }
        if (object.crud_timestamp !== undefined && object.crud_timestamp !== null) {
            message.crudTimestamp = helpers_1.Long.fromString(object.crud_timestamp);
        }
        if (object.netflow_rate !== undefined && object.netflow_rate !== null) {
            message.netflowRate = object.netflow_rate;
        }
        if (object.static_balance !== undefined && object.static_balance !== null) {
            message.staticBalance = object.static_balance;
        }
        if (object.buffer_balance !== undefined && object.buffer_balance !== null) {
            message.bufferBalance = object.buffer_balance;
        }
        if (object.lock_balance !== undefined && object.lock_balance !== null) {
            message.lockBalance = object.lock_balance;
        }
        if (object.status !== undefined && object.status !== null) {
            message.status = streamAccountStatusFromJSON(object.status);
        }
        if (object.settle_timestamp !== undefined && object.settle_timestamp !== null) {
            message.settleTimestamp = helpers_1.Long.fromString(object.settle_timestamp);
        }
        if (object.out_flow_count !== undefined && object.out_flow_count !== null) {
            message.outFlowCount = helpers_1.Long.fromString(object.out_flow_count);
        }
        if (object.frozen_netflow_rate !== undefined && object.frozen_netflow_rate !== null) {
            message.frozenNetflowRate = object.frozen_netflow_rate;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.account = message.account;
        obj.crud_timestamp = message.crudTimestamp ? message.crudTimestamp.toString() : undefined;
        obj.netflow_rate = message.netflowRate;
        obj.static_balance = message.staticBalance;
        obj.buffer_balance = message.bufferBalance;
        obj.lock_balance = message.lockBalance;
        obj.status = streamAccountStatusToJSON(message.status);
        obj.settle_timestamp = message.settleTimestamp ? message.settleTimestamp.toString() : undefined;
        obj.out_flow_count = message.outFlowCount ? message.outFlowCount.toString() : undefined;
        obj.frozen_netflow_rate = message.frozenNetflowRate;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.StreamRecord.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.StreamRecord.decode(message.value);
    },
    toProto(message) {
        return exports.StreamRecord.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.payment.StreamRecord",
            value: exports.StreamRecord.encode(message).finish()
        };
    }
};
//# sourceMappingURL=stream_record.js.map