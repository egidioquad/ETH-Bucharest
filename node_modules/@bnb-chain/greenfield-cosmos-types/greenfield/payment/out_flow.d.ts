import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.payment";
/** OutFlowStatus defines the status of a out flow */
export declare enum OutFlowStatus {
    /** OUT_FLOW_STATUS_ACTIVE - OUT_FLOW_STATUS_ACTIVE defines the active status of a out flow. */
    OUT_FLOW_STATUS_ACTIVE = 0,
    /** OUT_FLOW_STATUS_FROZEN - OUT_FLOW_STATUS_FROZEN defines the frozen status of a out flow. */
    OUT_FLOW_STATUS_FROZEN = 1,
    UNRECOGNIZED = -1
}
export declare const OutFlowStatusSDKType: typeof OutFlowStatus;
export declare const OutFlowStatusAmino: typeof OutFlowStatus;
export declare function outFlowStatusFromJSON(object: any): OutFlowStatus;
export declare function outFlowStatusToJSON(object: OutFlowStatus): string;
/**
 * OutFlow defines the accumulative outflow stream rate in BNB
 * from a stream account to a Storage Provider
 */
export interface OutFlow {
    /** stream account address who receives the flow, usually SP(service provider) */
    toAddress: string;
    /** flow rate */
    rate: string;
    /** status */
    status: OutFlowStatus;
}
export interface OutFlowProtoMsg {
    typeUrl: "/greenfield.payment.OutFlow";
    value: Uint8Array;
}
/**
 * OutFlow defines the accumulative outflow stream rate in BNB
 * from a stream account to a Storage Provider
 */
export interface OutFlowAmino {
    /** stream account address who receives the flow, usually SP(service provider) */
    to_address?: string;
    /** flow rate */
    rate?: string;
    /** status */
    status?: OutFlowStatus;
}
export interface OutFlowAminoMsg {
    type: "/greenfield.payment.OutFlow";
    value: OutFlowAmino;
}
/**
 * OutFlow defines the accumulative outflow stream rate in BNB
 * from a stream account to a Storage Provider
 */
export interface OutFlowSDKType {
    to_address: string;
    rate: string;
    status: OutFlowStatus;
}
export declare const OutFlow: {
    typeUrl: string;
    encode(message: OutFlow, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OutFlow;
    fromJSON(object: any): OutFlow;
    toJSON(message: OutFlow): unknown;
    fromPartial<I extends {
        toAddress?: string;
        rate?: string;
        status?: OutFlowStatus;
    } & {
        toAddress?: string;
        rate?: string;
        status?: OutFlowStatus;
    } & Record<Exclude<keyof I, keyof OutFlow>, never>>(object: I): OutFlow;
    fromSDK(object: OutFlowSDKType): OutFlow;
    toSDK(message: OutFlow): OutFlowSDKType;
    fromAmino(object: OutFlowAmino): OutFlow;
    toAmino(message: OutFlow): OutFlowAmino;
    fromAminoMsg(object: OutFlowAminoMsg): OutFlow;
    fromProtoMsg(message: OutFlowProtoMsg): OutFlow;
    toProto(message: OutFlow): Uint8Array;
    toProtoMsg(message: OutFlow): OutFlowProtoMsg;
};
