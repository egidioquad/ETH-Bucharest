/// <reference types="long" />
import { Long } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.challenge";
/** VoteResult defines the result attestation for a challenge. */
export declare enum VoteResult {
    /** CHALLENGE_FAILED - The challenge failed. */
    CHALLENGE_FAILED = 0,
    /** CHALLENGE_SUCCEED - The challenge succeed. */
    CHALLENGE_SUCCEED = 1,
    UNRECOGNIZED = -1
}
export declare const VoteResultSDKType: typeof VoteResult;
export declare const VoteResultAmino: typeof VoteResult;
export declare function voteResultFromJSON(object: any): VoteResult;
export declare function voteResultToJSON(object: VoteResult): string;
/** Slash records the storage provider slashes, which will be pruned periodically. */
export interface Slash {
    /** The slashed storage provider. */
    spId: number;
    /** The slashed object info. */
    objectId: string;
    /** The height when the slash happened, which is used for prune purpose. */
    height: Long;
}
export interface SlashProtoMsg {
    typeUrl: "/greenfield.challenge.Slash";
    value: Uint8Array;
}
/** Slash records the storage provider slashes, which will be pruned periodically. */
export interface SlashAmino {
    /** The slashed storage provider. */
    sp_id?: number;
    /** The slashed object info. */
    object_id?: string;
    /** The height when the slash happened, which is used for prune purpose. */
    height?: string;
}
export interface SlashAminoMsg {
    type: "/greenfield.challenge.Slash";
    value: SlashAmino;
}
/** Slash records the storage provider slashes, which will be pruned periodically. */
export interface SlashSDKType {
    sp_id: number;
    object_id: string;
    height: Long;
}
/** Challenge records the challenge which are not expired yet. */
export interface Challenge {
    /** The id of the challenge. */
    id: Long;
    /** The height at which the challenge will be expired. */
    expiredHeight: Long;
}
export interface ChallengeProtoMsg {
    typeUrl: "/greenfield.challenge.Challenge";
    value: Uint8Array;
}
/** Challenge records the challenge which are not expired yet. */
export interface ChallengeAmino {
    /** The id of the challenge. */
    id?: string;
    /** The height at which the challenge will be expired. */
    expired_height?: string;
}
export interface ChallengeAminoMsg {
    type: "/greenfield.challenge.Challenge";
    value: ChallengeAmino;
}
/** Challenge records the challenge which are not expired yet. */
export interface ChallengeSDKType {
    id: Long;
    expired_height: Long;
}
/** AttestedChallenge records the challenge which are attested. */
export interface AttestedChallenge {
    /** The id of the challenge. */
    id: Long;
    /** The attestation result of the challenge. */
    result: VoteResult;
}
export interface AttestedChallengeProtoMsg {
    typeUrl: "/greenfield.challenge.AttestedChallenge";
    value: Uint8Array;
}
/** AttestedChallenge records the challenge which are attested. */
export interface AttestedChallengeAmino {
    /** The id of the challenge. */
    id?: string;
    /** The attestation result of the challenge. */
    result?: VoteResult;
}
export interface AttestedChallengeAminoMsg {
    type: "/greenfield.challenge.AttestedChallenge";
    value: AttestedChallengeAmino;
}
/** AttestedChallenge records the challenge which are attested. */
export interface AttestedChallengeSDKType {
    id: Long;
    result: VoteResult;
}
/**
 * AttestedChallengeIds stored fixed number of the latest attested challenge ids.
 * To use the storage more efficiently, a circular queue will be constructed using these fields.
 */
export interface AttestedChallengeIds {
    /** The fixed number of challenge ids to save. */
    size: Long;
    /** The latest attested challenges. */
    challenges: AttestedChallenge[];
    /** The cursor to retrieve data from the ids field. */
    cursor: Long;
}
export interface AttestedChallengeIdsProtoMsg {
    typeUrl: "/greenfield.challenge.AttestedChallengeIds";
    value: Uint8Array;
}
/**
 * AttestedChallengeIds stored fixed number of the latest attested challenge ids.
 * To use the storage more efficiently, a circular queue will be constructed using these fields.
 */
export interface AttestedChallengeIdsAmino {
    /** The fixed number of challenge ids to save. */
    size?: string;
    /** The latest attested challenges. */
    challenges?: AttestedChallengeAmino[];
    /** The cursor to retrieve data from the ids field. */
    cursor?: string;
}
export interface AttestedChallengeIdsAminoMsg {
    type: "/greenfield.challenge.AttestedChallengeIds";
    value: AttestedChallengeIdsAmino;
}
/**
 * AttestedChallengeIds stored fixed number of the latest attested challenge ids.
 * To use the storage more efficiently, a circular queue will be constructed using these fields.
 */
export interface AttestedChallengeIdsSDKType {
    size: Long;
    challenges: AttestedChallengeSDKType[];
    cursor: Long;
}
export declare const Slash: {
    typeUrl: string;
    encode(message: Slash, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Slash;
    fromJSON(object: any): Slash;
    toJSON(message: Slash): unknown;
    fromPartial<I extends {
        spId?: number;
        objectId?: string;
        height?: string | number | Long.Long;
    } & {
        spId?: number;
        objectId?: string;
        height?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["height"], keyof Long.Long>, never>);
    } & Record<Exclude<keyof I, keyof Slash>, never>>(object: I): Slash;
    fromSDK(object: SlashSDKType): Slash;
    toSDK(message: Slash): SlashSDKType;
    fromAmino(object: SlashAmino): Slash;
    toAmino(message: Slash): SlashAmino;
    fromAminoMsg(object: SlashAminoMsg): Slash;
    fromProtoMsg(message: SlashProtoMsg): Slash;
    toProto(message: Slash): Uint8Array;
    toProtoMsg(message: Slash): SlashProtoMsg;
};
export declare const Challenge: {
    typeUrl: string;
    encode(message: Challenge, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Challenge;
    fromJSON(object: any): Challenge;
    toJSON(message: Challenge): unknown;
    fromPartial<I extends {
        id?: string | number | Long.Long;
        expiredHeight?: string | number | Long.Long;
    } & {
        id?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["id"], keyof Long.Long>, never>);
        expiredHeight?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["expiredHeight"], keyof Long.Long>, never>);
    } & Record<Exclude<keyof I, keyof Challenge>, never>>(object: I): Challenge;
    fromSDK(object: ChallengeSDKType): Challenge;
    toSDK(message: Challenge): ChallengeSDKType;
    fromAmino(object: ChallengeAmino): Challenge;
    toAmino(message: Challenge): ChallengeAmino;
    fromAminoMsg(object: ChallengeAminoMsg): Challenge;
    fromProtoMsg(message: ChallengeProtoMsg): Challenge;
    toProto(message: Challenge): Uint8Array;
    toProtoMsg(message: Challenge): ChallengeProtoMsg;
};
export declare const AttestedChallenge: {
    typeUrl: string;
    encode(message: AttestedChallenge, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AttestedChallenge;
    fromJSON(object: any): AttestedChallenge;
    toJSON(message: AttestedChallenge): unknown;
    fromPartial<I extends {
        id?: string | number | Long.Long;
        result?: VoteResult;
    } & {
        id?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["id"], keyof Long.Long>, never>);
        result?: VoteResult;
    } & Record<Exclude<keyof I, keyof AttestedChallenge>, never>>(object: I): AttestedChallenge;
    fromSDK(object: AttestedChallengeSDKType): AttestedChallenge;
    toSDK(message: AttestedChallenge): AttestedChallengeSDKType;
    fromAmino(object: AttestedChallengeAmino): AttestedChallenge;
    toAmino(message: AttestedChallenge): AttestedChallengeAmino;
    fromAminoMsg(object: AttestedChallengeAminoMsg): AttestedChallenge;
    fromProtoMsg(message: AttestedChallengeProtoMsg): AttestedChallenge;
    toProto(message: AttestedChallenge): Uint8Array;
    toProtoMsg(message: AttestedChallenge): AttestedChallengeProtoMsg;
};
export declare const AttestedChallengeIds: {
    typeUrl: string;
    encode(message: AttestedChallengeIds, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AttestedChallengeIds;
    fromJSON(object: any): AttestedChallengeIds;
    toJSON(message: AttestedChallengeIds): unknown;
    fromPartial<I extends {
        size?: string | number | Long.Long;
        challenges?: {
            id?: string | number | Long.Long;
            result?: VoteResult;
        }[];
        cursor?: string | number | Long.Long;
    } & {
        size?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["size"], keyof Long.Long>, never>);
        challenges?: {
            id?: string | number | Long.Long;
            result?: VoteResult;
        }[] & ({
            id?: string | number | Long.Long;
            result?: VoteResult;
        } & {
            id?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["challenges"][number]["id"], keyof Long.Long>, never>);
            result?: VoteResult;
        } & Record<Exclude<keyof I["challenges"][number], keyof AttestedChallenge>, never>)[] & Record<Exclude<keyof I["challenges"], keyof {
            id?: string | number | Long.Long;
            result?: VoteResult;
        }[]>, never>;
        cursor?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["cursor"], keyof Long.Long>, never>);
    } & Record<Exclude<keyof I, keyof AttestedChallengeIds>, never>>(object: I): AttestedChallengeIds;
    fromSDK(object: AttestedChallengeIdsSDKType): AttestedChallengeIds;
    toSDK(message: AttestedChallengeIds): AttestedChallengeIdsSDKType;
    fromAmino(object: AttestedChallengeIdsAmino): AttestedChallengeIds;
    toAmino(message: AttestedChallengeIds): AttestedChallengeIdsAmino;
    fromAminoMsg(object: AttestedChallengeIdsAminoMsg): AttestedChallengeIds;
    fromProtoMsg(message: AttestedChallengeIdsProtoMsg): AttestedChallengeIds;
    toProto(message: AttestedChallengeIds): Uint8Array;
    toProtoMsg(message: AttestedChallengeIds): AttestedChallengeIdsProtoMsg;
};
