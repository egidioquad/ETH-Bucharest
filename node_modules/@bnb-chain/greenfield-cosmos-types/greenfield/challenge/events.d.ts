/// <reference types="long" />
import { VoteResult } from "./types";
import { Long } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.challenge";
/** EventStartChallenge to indicate a challenge has bee created. */
export interface EventStartChallenge {
    /** The id of challenge, which is generated by blockchain. */
    challengeId: Long;
    /** The id of object info to be challenged. */
    objectId: string;
    /** The segment/piece index of the object info. */
    segmentIndex: number;
    /** The storage provider to be challenged. */
    spId: number;
    /** The storage provider to be challenged. */
    spOperatorAddress: string;
    /** The redundancy index, which comes from the index of storage providers. */
    redundancyIndex: number;
    /** The challenger who submits the challenge. */
    challengerAddress: string;
    /** The challenge will be expired after this height */
    expiredHeight: Long;
}
export interface EventStartChallengeProtoMsg {
    typeUrl: "/greenfield.challenge.EventStartChallenge";
    value: Uint8Array;
}
/** EventStartChallenge to indicate a challenge has bee created. */
export interface EventStartChallengeAmino {
    /** The id of challenge, which is generated by blockchain. */
    challenge_id?: string;
    /** The id of object info to be challenged. */
    object_id?: string;
    /** The segment/piece index of the object info. */
    segment_index?: number;
    /** The storage provider to be challenged. */
    sp_id?: number;
    /** The storage provider to be challenged. */
    sp_operator_address?: string;
    /** The redundancy index, which comes from the index of storage providers. */
    redundancy_index?: number;
    /** The challenger who submits the challenge. */
    challenger_address?: string;
    /** The challenge will be expired after this height */
    expired_height?: string;
}
export interface EventStartChallengeAminoMsg {
    type: "/greenfield.challenge.EventStartChallenge";
    value: EventStartChallengeAmino;
}
/** EventStartChallenge to indicate a challenge has bee created. */
export interface EventStartChallengeSDKType {
    challenge_id: Long;
    object_id: string;
    segment_index: number;
    sp_id: number;
    sp_operator_address: string;
    redundancy_index: number;
    challenger_address: string;
    expired_height: Long;
}
/** EventAttestChallenge to indicate a challenge has been attested. */
export interface EventAttestChallenge {
    /** The id of challenge. */
    challengeId: Long;
    /** The result of challenge. */
    result: VoteResult;
    /** The slashed storage provider address. */
    spId: number;
    /** The slashed amount from the storage provider. */
    slashAmount: string;
    /** The address of challenger. */
    challengerAddress: string;
    /** The reward amount to the challenger. */
    challengerRewardAmount: string;
    /** The submitter of the challenge attestation. */
    submitterAddress: string;
    /** The reward amount to the submitter. */
    submitterRewardAmount: string;
    /** The reward amount to all current validators. */
    validatorRewardAmount: string;
}
export interface EventAttestChallengeProtoMsg {
    typeUrl: "/greenfield.challenge.EventAttestChallenge";
    value: Uint8Array;
}
/** EventAttestChallenge to indicate a challenge has been attested. */
export interface EventAttestChallengeAmino {
    /** The id of challenge. */
    challenge_id?: string;
    /** The result of challenge. */
    result?: VoteResult;
    /** The slashed storage provider address. */
    sp_id?: number;
    /** The slashed amount from the storage provider. */
    slash_amount?: string;
    /** The address of challenger. */
    challenger_address?: string;
    /** The reward amount to the challenger. */
    challenger_reward_amount?: string;
    /** The submitter of the challenge attestation. */
    submitter_address?: string;
    /** The reward amount to the submitter. */
    submitter_reward_amount?: string;
    /** The reward amount to all current validators. */
    validator_reward_amount?: string;
}
export interface EventAttestChallengeAminoMsg {
    type: "/greenfield.challenge.EventAttestChallenge";
    value: EventAttestChallengeAmino;
}
/** EventAttestChallenge to indicate a challenge has been attested. */
export interface EventAttestChallengeSDKType {
    challenge_id: Long;
    result: VoteResult;
    sp_id: number;
    slash_amount: string;
    challenger_address: string;
    challenger_reward_amount: string;
    submitter_address: string;
    submitter_reward_amount: string;
    validator_reward_amount: string;
}
export declare const EventStartChallenge: {
    typeUrl: string;
    encode(message: EventStartChallenge, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventStartChallenge;
    fromJSON(object: any): EventStartChallenge;
    toJSON(message: EventStartChallenge): unknown;
    fromPartial<I extends {
        challengeId?: string | number | Long.Long;
        objectId?: string;
        segmentIndex?: number;
        spId?: number;
        spOperatorAddress?: string;
        redundancyIndex?: number;
        challengerAddress?: string;
        expiredHeight?: string | number | Long.Long;
    } & {
        challengeId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["challengeId"], keyof Long.Long>, never>);
        objectId?: string;
        segmentIndex?: number;
        spId?: number;
        spOperatorAddress?: string;
        redundancyIndex?: number;
        challengerAddress?: string;
        expiredHeight?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["expiredHeight"], keyof Long.Long>, never>);
    } & Record<Exclude<keyof I, keyof EventStartChallenge>, never>>(object: I): EventStartChallenge;
    fromSDK(object: EventStartChallengeSDKType): EventStartChallenge;
    toSDK(message: EventStartChallenge): EventStartChallengeSDKType;
    fromAmino(object: EventStartChallengeAmino): EventStartChallenge;
    toAmino(message: EventStartChallenge): EventStartChallengeAmino;
    fromAminoMsg(object: EventStartChallengeAminoMsg): EventStartChallenge;
    fromProtoMsg(message: EventStartChallengeProtoMsg): EventStartChallenge;
    toProto(message: EventStartChallenge): Uint8Array;
    toProtoMsg(message: EventStartChallenge): EventStartChallengeProtoMsg;
};
export declare const EventAttestChallenge: {
    typeUrl: string;
    encode(message: EventAttestChallenge, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventAttestChallenge;
    fromJSON(object: any): EventAttestChallenge;
    toJSON(message: EventAttestChallenge): unknown;
    fromPartial<I extends {
        challengeId?: string | number | Long.Long;
        result?: VoteResult;
        spId?: number;
        slashAmount?: string;
        challengerAddress?: string;
        challengerRewardAmount?: string;
        submitterAddress?: string;
        submitterRewardAmount?: string;
        validatorRewardAmount?: string;
    } & {
        challengeId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["challengeId"], keyof Long.Long>, never>);
        result?: VoteResult;
        spId?: number;
        slashAmount?: string;
        challengerAddress?: string;
        challengerRewardAmount?: string;
        submitterAddress?: string;
        submitterRewardAmount?: string;
        validatorRewardAmount?: string;
    } & Record<Exclude<keyof I, keyof EventAttestChallenge>, never>>(object: I): EventAttestChallenge;
    fromSDK(object: EventAttestChallengeSDKType): EventAttestChallenge;
    toSDK(message: EventAttestChallenge): EventAttestChallengeSDKType;
    fromAmino(object: EventAttestChallengeAmino): EventAttestChallenge;
    toAmino(message: EventAttestChallenge): EventAttestChallengeAmino;
    fromAminoMsg(object: EventAttestChallengeAminoMsg): EventAttestChallenge;
    fromProtoMsg(message: EventAttestChallengeProtoMsg): EventAttestChallenge;
    toProto(message: EventAttestChallenge): Uint8Array;
    toProtoMsg(message: EventAttestChallenge): EventAttestChallengeProtoMsg;
};
