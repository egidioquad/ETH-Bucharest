"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventAttestChallenge = exports.EventStartChallenge = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const types_1 = require("./types");
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.challenge";
function createBaseEventStartChallenge() {
    return {
        challengeId: helpers_1.Long.UZERO,
        objectId: "",
        segmentIndex: 0,
        spId: 0,
        spOperatorAddress: "",
        redundancyIndex: 0,
        challengerAddress: "",
        expiredHeight: helpers_1.Long.UZERO
    };
}
exports.EventStartChallenge = {
    typeUrl: "/greenfield.challenge.EventStartChallenge",
    encode(message, writer = _m0.Writer.create()) {
        if (!message.challengeId.isZero()) {
            writer.uint32(8).uint64(message.challengeId);
        }
        if (message.objectId !== "") {
            writer.uint32(18).string(message.objectId);
        }
        if (message.segmentIndex !== 0) {
            writer.uint32(24).uint32(message.segmentIndex);
        }
        if (message.spId !== 0) {
            writer.uint32(32).uint32(message.spId);
        }
        if (message.spOperatorAddress !== "") {
            writer.uint32(42).string(message.spOperatorAddress);
        }
        if (message.redundancyIndex !== 0) {
            writer.uint32(48).int32(message.redundancyIndex);
        }
        if (message.challengerAddress !== "") {
            writer.uint32(58).string(message.challengerAddress);
        }
        if (!message.expiredHeight.isZero()) {
            writer.uint32(64).uint64(message.expiredHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventStartChallenge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.challengeId = reader.uint64();
                    break;
                case 2:
                    message.objectId = reader.string();
                    break;
                case 3:
                    message.segmentIndex = reader.uint32();
                    break;
                case 4:
                    message.spId = reader.uint32();
                    break;
                case 5:
                    message.spOperatorAddress = reader.string();
                    break;
                case 6:
                    message.redundancyIndex = reader.int32();
                    break;
                case 7:
                    message.challengerAddress = reader.string();
                    break;
                case 8:
                    message.expiredHeight = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            challengeId: (0, helpers_1.isSet)(object.challengeId) ? helpers_1.Long.fromValue(object.challengeId) : helpers_1.Long.UZERO,
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : "",
            segmentIndex: (0, helpers_1.isSet)(object.segmentIndex) ? Number(object.segmentIndex) : 0,
            spId: (0, helpers_1.isSet)(object.spId) ? Number(object.spId) : 0,
            spOperatorAddress: (0, helpers_1.isSet)(object.spOperatorAddress) ? String(object.spOperatorAddress) : "",
            redundancyIndex: (0, helpers_1.isSet)(object.redundancyIndex) ? Number(object.redundancyIndex) : 0,
            challengerAddress: (0, helpers_1.isSet)(object.challengerAddress) ? String(object.challengerAddress) : "",
            expiredHeight: (0, helpers_1.isSet)(object.expiredHeight) ? helpers_1.Long.fromValue(object.expiredHeight) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.challengeId !== undefined && (obj.challengeId = (message.challengeId || helpers_1.Long.UZERO).toString());
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.segmentIndex !== undefined && (obj.segmentIndex = Math.round(message.segmentIndex));
        message.spId !== undefined && (obj.spId = Math.round(message.spId));
        message.spOperatorAddress !== undefined && (obj.spOperatorAddress = message.spOperatorAddress);
        message.redundancyIndex !== undefined && (obj.redundancyIndex = Math.round(message.redundancyIndex));
        message.challengerAddress !== undefined && (obj.challengerAddress = message.challengerAddress);
        message.expiredHeight !== undefined && (obj.expiredHeight = (message.expiredHeight || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventStartChallenge();
        message.challengeId = object.challengeId !== undefined && object.challengeId !== null ? helpers_1.Long.fromValue(object.challengeId) : helpers_1.Long.UZERO;
        message.objectId = object.objectId ?? "";
        message.segmentIndex = object.segmentIndex ?? 0;
        message.spId = object.spId ?? 0;
        message.spOperatorAddress = object.spOperatorAddress ?? "";
        message.redundancyIndex = object.redundancyIndex ?? 0;
        message.challengerAddress = object.challengerAddress ?? "";
        message.expiredHeight = object.expiredHeight !== undefined && object.expiredHeight !== null ? helpers_1.Long.fromValue(object.expiredHeight) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            challengeId: object?.challenge_id,
            objectId: object?.object_id,
            segmentIndex: object?.segment_index,
            spId: object?.sp_id,
            spOperatorAddress: object?.sp_operator_address,
            redundancyIndex: object?.redundancy_index,
            challengerAddress: object?.challenger_address,
            expiredHeight: object?.expired_height
        };
    },
    toSDK(message) {
        const obj = {};
        obj.challenge_id = message.challengeId;
        obj.object_id = message.objectId;
        obj.segment_index = message.segmentIndex;
        obj.sp_id = message.spId;
        obj.sp_operator_address = message.spOperatorAddress;
        obj.redundancy_index = message.redundancyIndex;
        obj.challenger_address = message.challengerAddress;
        obj.expired_height = message.expiredHeight;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventStartChallenge();
        if (object.challenge_id !== undefined && object.challenge_id !== null) {
            message.challengeId = helpers_1.Long.fromString(object.challenge_id);
        }
        if (object.object_id !== undefined && object.object_id !== null) {
            message.objectId = object.object_id;
        }
        if (object.segment_index !== undefined && object.segment_index !== null) {
            message.segmentIndex = object.segment_index;
        }
        if (object.sp_id !== undefined && object.sp_id !== null) {
            message.spId = object.sp_id;
        }
        if (object.sp_operator_address !== undefined && object.sp_operator_address !== null) {
            message.spOperatorAddress = object.sp_operator_address;
        }
        if (object.redundancy_index !== undefined && object.redundancy_index !== null) {
            message.redundancyIndex = object.redundancy_index;
        }
        if (object.challenger_address !== undefined && object.challenger_address !== null) {
            message.challengerAddress = object.challenger_address;
        }
        if (object.expired_height !== undefined && object.expired_height !== null) {
            message.expiredHeight = helpers_1.Long.fromString(object.expired_height);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.challenge_id = message.challengeId ? message.challengeId.toString() : undefined;
        obj.object_id = message.objectId;
        obj.segment_index = message.segmentIndex;
        obj.sp_id = message.spId;
        obj.sp_operator_address = message.spOperatorAddress;
        obj.redundancy_index = message.redundancyIndex;
        obj.challenger_address = message.challengerAddress;
        obj.expired_height = message.expiredHeight ? message.expiredHeight.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventStartChallenge.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventStartChallenge.decode(message.value);
    },
    toProto(message) {
        return exports.EventStartChallenge.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.challenge.EventStartChallenge",
            value: exports.EventStartChallenge.encode(message).finish()
        };
    }
};
function createBaseEventAttestChallenge() {
    return {
        challengeId: helpers_1.Long.UZERO,
        result: 0,
        spId: 0,
        slashAmount: "",
        challengerAddress: "",
        challengerRewardAmount: "",
        submitterAddress: "",
        submitterRewardAmount: "",
        validatorRewardAmount: ""
    };
}
exports.EventAttestChallenge = {
    typeUrl: "/greenfield.challenge.EventAttestChallenge",
    encode(message, writer = _m0.Writer.create()) {
        if (!message.challengeId.isZero()) {
            writer.uint32(8).uint64(message.challengeId);
        }
        if (message.result !== 0) {
            writer.uint32(16).int32(message.result);
        }
        if (message.spId !== 0) {
            writer.uint32(24).uint32(message.spId);
        }
        if (message.slashAmount !== "") {
            writer.uint32(34).string(message.slashAmount);
        }
        if (message.challengerAddress !== "") {
            writer.uint32(42).string(message.challengerAddress);
        }
        if (message.challengerRewardAmount !== "") {
            writer.uint32(50).string(message.challengerRewardAmount);
        }
        if (message.submitterAddress !== "") {
            writer.uint32(58).string(message.submitterAddress);
        }
        if (message.submitterRewardAmount !== "") {
            writer.uint32(66).string(message.submitterRewardAmount);
        }
        if (message.validatorRewardAmount !== "") {
            writer.uint32(82).string(message.validatorRewardAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventAttestChallenge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.challengeId = reader.uint64();
                    break;
                case 2:
                    message.result = reader.int32();
                    break;
                case 3:
                    message.spId = reader.uint32();
                    break;
                case 4:
                    message.slashAmount = reader.string();
                    break;
                case 5:
                    message.challengerAddress = reader.string();
                    break;
                case 6:
                    message.challengerRewardAmount = reader.string();
                    break;
                case 7:
                    message.submitterAddress = reader.string();
                    break;
                case 8:
                    message.submitterRewardAmount = reader.string();
                    break;
                case 10:
                    message.validatorRewardAmount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            challengeId: (0, helpers_1.isSet)(object.challengeId) ? helpers_1.Long.fromValue(object.challengeId) : helpers_1.Long.UZERO,
            result: (0, helpers_1.isSet)(object.result) ? (0, types_1.voteResultFromJSON)(object.result) : -1,
            spId: (0, helpers_1.isSet)(object.spId) ? Number(object.spId) : 0,
            slashAmount: (0, helpers_1.isSet)(object.slashAmount) ? String(object.slashAmount) : "",
            challengerAddress: (0, helpers_1.isSet)(object.challengerAddress) ? String(object.challengerAddress) : "",
            challengerRewardAmount: (0, helpers_1.isSet)(object.challengerRewardAmount) ? String(object.challengerRewardAmount) : "",
            submitterAddress: (0, helpers_1.isSet)(object.submitterAddress) ? String(object.submitterAddress) : "",
            submitterRewardAmount: (0, helpers_1.isSet)(object.submitterRewardAmount) ? String(object.submitterRewardAmount) : "",
            validatorRewardAmount: (0, helpers_1.isSet)(object.validatorRewardAmount) ? String(object.validatorRewardAmount) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.challengeId !== undefined && (obj.challengeId = (message.challengeId || helpers_1.Long.UZERO).toString());
        message.result !== undefined && (obj.result = (0, types_1.voteResultToJSON)(message.result));
        message.spId !== undefined && (obj.spId = Math.round(message.spId));
        message.slashAmount !== undefined && (obj.slashAmount = message.slashAmount);
        message.challengerAddress !== undefined && (obj.challengerAddress = message.challengerAddress);
        message.challengerRewardAmount !== undefined && (obj.challengerRewardAmount = message.challengerRewardAmount);
        message.submitterAddress !== undefined && (obj.submitterAddress = message.submitterAddress);
        message.submitterRewardAmount !== undefined && (obj.submitterRewardAmount = message.submitterRewardAmount);
        message.validatorRewardAmount !== undefined && (obj.validatorRewardAmount = message.validatorRewardAmount);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventAttestChallenge();
        message.challengeId = object.challengeId !== undefined && object.challengeId !== null ? helpers_1.Long.fromValue(object.challengeId) : helpers_1.Long.UZERO;
        message.result = object.result ?? 0;
        message.spId = object.spId ?? 0;
        message.slashAmount = object.slashAmount ?? "";
        message.challengerAddress = object.challengerAddress ?? "";
        message.challengerRewardAmount = object.challengerRewardAmount ?? "";
        message.submitterAddress = object.submitterAddress ?? "";
        message.submitterRewardAmount = object.submitterRewardAmount ?? "";
        message.validatorRewardAmount = object.validatorRewardAmount ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            challengeId: object?.challenge_id,
            result: (0, helpers_1.isSet)(object.result) ? (0, types_1.voteResultFromJSON)(object.result) : -1,
            spId: object?.sp_id,
            slashAmount: object?.slash_amount,
            challengerAddress: object?.challenger_address,
            challengerRewardAmount: object?.challenger_reward_amount,
            submitterAddress: object?.submitter_address,
            submitterRewardAmount: object?.submitter_reward_amount,
            validatorRewardAmount: object?.validator_reward_amount
        };
    },
    toSDK(message) {
        const obj = {};
        obj.challenge_id = message.challengeId;
        message.result !== undefined && (obj.result = (0, types_1.voteResultToJSON)(message.result));
        obj.sp_id = message.spId;
        obj.slash_amount = message.slashAmount;
        obj.challenger_address = message.challengerAddress;
        obj.challenger_reward_amount = message.challengerRewardAmount;
        obj.submitter_address = message.submitterAddress;
        obj.submitter_reward_amount = message.submitterRewardAmount;
        obj.validator_reward_amount = message.validatorRewardAmount;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventAttestChallenge();
        if (object.challenge_id !== undefined && object.challenge_id !== null) {
            message.challengeId = helpers_1.Long.fromString(object.challenge_id);
        }
        if (object.result !== undefined && object.result !== null) {
            message.result = (0, types_1.voteResultFromJSON)(object.result);
        }
        if (object.sp_id !== undefined && object.sp_id !== null) {
            message.spId = object.sp_id;
        }
        if (object.slash_amount !== undefined && object.slash_amount !== null) {
            message.slashAmount = object.slash_amount;
        }
        if (object.challenger_address !== undefined && object.challenger_address !== null) {
            message.challengerAddress = object.challenger_address;
        }
        if (object.challenger_reward_amount !== undefined && object.challenger_reward_amount !== null) {
            message.challengerRewardAmount = object.challenger_reward_amount;
        }
        if (object.submitter_address !== undefined && object.submitter_address !== null) {
            message.submitterAddress = object.submitter_address;
        }
        if (object.submitter_reward_amount !== undefined && object.submitter_reward_amount !== null) {
            message.submitterRewardAmount = object.submitter_reward_amount;
        }
        if (object.validator_reward_amount !== undefined && object.validator_reward_amount !== null) {
            message.validatorRewardAmount = object.validator_reward_amount;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.challenge_id = message.challengeId ? message.challengeId.toString() : undefined;
        obj.result = (0, types_1.voteResultToJSON)(message.result);
        obj.sp_id = message.spId;
        obj.slash_amount = message.slashAmount;
        obj.challenger_address = message.challengerAddress;
        obj.challenger_reward_amount = message.challengerRewardAmount;
        obj.submitter_address = message.submitterAddress;
        obj.submitter_reward_amount = message.submitterRewardAmount;
        obj.validator_reward_amount = message.validatorRewardAmount;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventAttestChallenge.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventAttestChallenge.decode(message.value);
    },
    toProto(message) {
        return exports.EventAttestChallenge.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.challenge.EventAttestChallenge",
            value: exports.EventAttestChallenge.encode(message).finish()
        };
    }
};
//# sourceMappingURL=events.js.map