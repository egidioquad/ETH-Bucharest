"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.SubmitInterval = exports.QueryInturnAttestationSubmitterResponse = exports.QueryInturnAttestationSubmitterRequest = exports.QueryLatestAttestedChallengesResponse = exports.QueryLatestAttestedChallengesRequest = exports.QueryAttestedChallengeResponse = exports.QueryAttestedChallengeRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const params_1 = require("./params");
const types_1 = require("./types");
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.challenge";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    typeUrl: "/greenfield.challenge.QueryParamsRequest",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    },
    fromAmino(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryParamsRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryParamsRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryParamsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.challenge.QueryParamsRequest",
            value: exports.QueryParamsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryParamsResponse() {
    return {
        params: params_1.Params.fromPartial({})
    };
}
exports.QueryParamsResponse = {
    typeUrl: "/greenfield.challenge.QueryParamsResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: (0, helpers_1.isSet)(object.params) ? params_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            params: object.params ? params_1.Params.fromSDK(object.params) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toSDK(message.params) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryParamsResponse();
        if (object.params !== undefined && object.params !== null) {
            message.params = params_1.Params.fromAmino(object.params);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.params = message.params ? params_1.Params.toAmino(message.params) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryParamsResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryParamsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryParamsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.challenge.QueryParamsResponse",
            value: exports.QueryParamsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryAttestedChallengeRequest() {
    return {
        challengeId: helpers_1.Long.UZERO
    };
}
exports.QueryAttestedChallengeRequest = {
    typeUrl: "/greenfield.challenge.QueryAttestedChallengeRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (!message.challengeId.isZero()) {
            writer.uint32(8).uint64(message.challengeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAttestedChallengeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.challengeId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            challengeId: (0, helpers_1.isSet)(object.challengeId) ? helpers_1.Long.fromValue(object.challengeId) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.challengeId !== undefined && (obj.challengeId = (message.challengeId || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryAttestedChallengeRequest();
        message.challengeId = object.challengeId !== undefined && object.challengeId !== null ? helpers_1.Long.fromValue(object.challengeId) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            challengeId: object?.challenge_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.challenge_id = message.challengeId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryAttestedChallengeRequest();
        if (object.challenge_id !== undefined && object.challenge_id !== null) {
            message.challengeId = helpers_1.Long.fromString(object.challenge_id);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.challenge_id = message.challengeId ? message.challengeId.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryAttestedChallengeRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryAttestedChallengeRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryAttestedChallengeRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.challenge.QueryAttestedChallengeRequest",
            value: exports.QueryAttestedChallengeRequest.encode(message).finish()
        };
    }
};
function createBaseQueryAttestedChallengeResponse() {
    return {
        challenge: undefined
    };
}
exports.QueryAttestedChallengeResponse = {
    typeUrl: "/greenfield.challenge.QueryAttestedChallengeResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.challenge !== undefined) {
            types_1.AttestedChallenge.encode(message.challenge, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAttestedChallengeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.challenge = types_1.AttestedChallenge.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            challenge: (0, helpers_1.isSet)(object.challenge) ? types_1.AttestedChallenge.fromJSON(object.challenge) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.challenge !== undefined && (obj.challenge = message.challenge ? types_1.AttestedChallenge.toJSON(message.challenge) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryAttestedChallengeResponse();
        message.challenge = object.challenge !== undefined && object.challenge !== null ? types_1.AttestedChallenge.fromPartial(object.challenge) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            challenge: object.challenge ? types_1.AttestedChallenge.fromSDK(object.challenge) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.challenge !== undefined && (obj.challenge = message.challenge ? types_1.AttestedChallenge.toSDK(message.challenge) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryAttestedChallengeResponse();
        if (object.challenge !== undefined && object.challenge !== null) {
            message.challenge = types_1.AttestedChallenge.fromAmino(object.challenge);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.challenge = message.challenge ? types_1.AttestedChallenge.toAmino(message.challenge) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryAttestedChallengeResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryAttestedChallengeResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryAttestedChallengeResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.challenge.QueryAttestedChallengeResponse",
            value: exports.QueryAttestedChallengeResponse.encode(message).finish()
        };
    }
};
function createBaseQueryLatestAttestedChallengesRequest() {
    return {};
}
exports.QueryLatestAttestedChallengesRequest = {
    typeUrl: "/greenfield.challenge.QueryLatestAttestedChallengesRequest",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLatestAttestedChallengesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryLatestAttestedChallengesRequest();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    },
    fromAmino(_) {
        const message = createBaseQueryLatestAttestedChallengesRequest();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryLatestAttestedChallengesRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryLatestAttestedChallengesRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryLatestAttestedChallengesRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.challenge.QueryLatestAttestedChallengesRequest",
            value: exports.QueryLatestAttestedChallengesRequest.encode(message).finish()
        };
    }
};
function createBaseQueryLatestAttestedChallengesResponse() {
    return {
        challenges: []
    };
}
exports.QueryLatestAttestedChallengesResponse = {
    typeUrl: "/greenfield.challenge.QueryLatestAttestedChallengesResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.challenges) {
            types_1.AttestedChallenge.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLatestAttestedChallengesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.challenges.push(types_1.AttestedChallenge.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            challenges: Array.isArray(object?.challenges) ? object.challenges.map((e) => types_1.AttestedChallenge.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.challenges) {
            obj.challenges = message.challenges.map(e => e ? types_1.AttestedChallenge.toJSON(e) : undefined);
        }
        else {
            obj.challenges = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryLatestAttestedChallengesResponse();
        message.challenges = object.challenges?.map(e => types_1.AttestedChallenge.fromPartial(e)) || [];
        return message;
    },
    fromSDK(object) {
        return {
            challenges: Array.isArray(object?.challenges) ? object.challenges.map((e) => types_1.AttestedChallenge.fromSDK(e)) : []
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.challenges) {
            obj.challenges = message.challenges.map(e => e ? types_1.AttestedChallenge.toSDK(e) : undefined);
        }
        else {
            obj.challenges = [];
        }
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryLatestAttestedChallengesResponse();
        message.challenges = object.challenges?.map(e => types_1.AttestedChallenge.fromAmino(e)) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        if (message.challenges) {
            obj.challenges = message.challenges.map(e => e ? types_1.AttestedChallenge.toAmino(e) : undefined);
        }
        else {
            obj.challenges = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryLatestAttestedChallengesResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryLatestAttestedChallengesResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryLatestAttestedChallengesResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.challenge.QueryLatestAttestedChallengesResponse",
            value: exports.QueryLatestAttestedChallengesResponse.encode(message).finish()
        };
    }
};
function createBaseQueryInturnAttestationSubmitterRequest() {
    return {};
}
exports.QueryInturnAttestationSubmitterRequest = {
    typeUrl: "/greenfield.challenge.QueryInturnAttestationSubmitterRequest",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryInturnAttestationSubmitterRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryInturnAttestationSubmitterRequest();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    },
    fromAmino(_) {
        const message = createBaseQueryInturnAttestationSubmitterRequest();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryInturnAttestationSubmitterRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryInturnAttestationSubmitterRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryInturnAttestationSubmitterRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.challenge.QueryInturnAttestationSubmitterRequest",
            value: exports.QueryInturnAttestationSubmitterRequest.encode(message).finish()
        };
    }
};
function createBaseQueryInturnAttestationSubmitterResponse() {
    return {
        blsPubKey: "",
        submitInterval: undefined
    };
}
exports.QueryInturnAttestationSubmitterResponse = {
    typeUrl: "/greenfield.challenge.QueryInturnAttestationSubmitterResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.blsPubKey !== "") {
            writer.uint32(10).string(message.blsPubKey);
        }
        if (message.submitInterval !== undefined) {
            exports.SubmitInterval.encode(message.submitInterval, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryInturnAttestationSubmitterResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.blsPubKey = reader.string();
                    break;
                case 2:
                    message.submitInterval = exports.SubmitInterval.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            blsPubKey: (0, helpers_1.isSet)(object.blsPubKey) ? String(object.blsPubKey) : "",
            submitInterval: (0, helpers_1.isSet)(object.submitInterval) ? exports.SubmitInterval.fromJSON(object.submitInterval) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.blsPubKey !== undefined && (obj.blsPubKey = message.blsPubKey);
        message.submitInterval !== undefined && (obj.submitInterval = message.submitInterval ? exports.SubmitInterval.toJSON(message.submitInterval) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryInturnAttestationSubmitterResponse();
        message.blsPubKey = object.blsPubKey ?? "";
        message.submitInterval = object.submitInterval !== undefined && object.submitInterval !== null ? exports.SubmitInterval.fromPartial(object.submitInterval) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            blsPubKey: object?.bls_pub_key,
            submitInterval: object.submit_interval ? exports.SubmitInterval.fromSDK(object.submit_interval) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bls_pub_key = message.blsPubKey;
        message.submitInterval !== undefined && (obj.submit_interval = message.submitInterval ? exports.SubmitInterval.toSDK(message.submitInterval) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryInturnAttestationSubmitterResponse();
        if (object.bls_pub_key !== undefined && object.bls_pub_key !== null) {
            message.blsPubKey = object.bls_pub_key;
        }
        if (object.submit_interval !== undefined && object.submit_interval !== null) {
            message.submitInterval = exports.SubmitInterval.fromAmino(object.submit_interval);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.bls_pub_key = message.blsPubKey;
        obj.submit_interval = message.submitInterval ? exports.SubmitInterval.toAmino(message.submitInterval) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryInturnAttestationSubmitterResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryInturnAttestationSubmitterResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryInturnAttestationSubmitterResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.challenge.QueryInturnAttestationSubmitterResponse",
            value: exports.QueryInturnAttestationSubmitterResponse.encode(message).finish()
        };
    }
};
function createBaseSubmitInterval() {
    return {
        start: helpers_1.Long.UZERO,
        end: helpers_1.Long.UZERO
    };
}
exports.SubmitInterval = {
    typeUrl: "/greenfield.challenge.SubmitInterval",
    encode(message, writer = _m0.Writer.create()) {
        if (!message.start.isZero()) {
            writer.uint32(8).uint64(message.start);
        }
        if (!message.end.isZero()) {
            writer.uint32(16).uint64(message.end);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubmitInterval();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.start = reader.uint64();
                    break;
                case 2:
                    message.end = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            start: (0, helpers_1.isSet)(object.start) ? helpers_1.Long.fromValue(object.start) : helpers_1.Long.UZERO,
            end: (0, helpers_1.isSet)(object.end) ? helpers_1.Long.fromValue(object.end) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.start !== undefined && (obj.start = (message.start || helpers_1.Long.UZERO).toString());
        message.end !== undefined && (obj.end = (message.end || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSubmitInterval();
        message.start = object.start !== undefined && object.start !== null ? helpers_1.Long.fromValue(object.start) : helpers_1.Long.UZERO;
        message.end = object.end !== undefined && object.end !== null ? helpers_1.Long.fromValue(object.end) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            start: object?.start,
            end: object?.end
        };
    },
    toSDK(message) {
        const obj = {};
        obj.start = message.start;
        obj.end = message.end;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseSubmitInterval();
        if (object.start !== undefined && object.start !== null) {
            message.start = helpers_1.Long.fromString(object.start);
        }
        if (object.end !== undefined && object.end !== null) {
            message.end = helpers_1.Long.fromString(object.end);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.start = message.start ? message.start.toString() : undefined;
        obj.end = message.end ? message.end.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.SubmitInterval.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.SubmitInterval.decode(message.value);
    },
    toProto(message) {
        return exports.SubmitInterval.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.challenge.SubmitInterval",
            value: exports.SubmitInterval.encode(message).finish()
        };
    }
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.AttestedChallenge = this.AttestedChallenge.bind(this);
        this.LatestAttestedChallenges = this.LatestAttestedChallenges.bind(this);
        this.InturnAttestationSubmitter = this.InturnAttestationSubmitter.bind(this);
    }
    Params(request = {}) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.challenge.Query", "Params", data);
        return promise.then(data => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
    }
    AttestedChallenge(request) {
        const data = exports.QueryAttestedChallengeRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.challenge.Query", "AttestedChallenge", data);
        return promise.then(data => exports.QueryAttestedChallengeResponse.decode(new _m0.Reader(data)));
    }
    LatestAttestedChallenges(request = {}) {
        const data = exports.QueryLatestAttestedChallengesRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.challenge.Query", "LatestAttestedChallenges", data);
        return promise.then(data => exports.QueryLatestAttestedChallengesResponse.decode(new _m0.Reader(data)));
    }
    InturnAttestationSubmitter(request = {}) {
        const data = exports.QueryInturnAttestationSubmitterRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.challenge.Query", "InturnAttestationSubmitter", data);
        return promise.then(data => exports.QueryInturnAttestationSubmitterResponse.decode(new _m0.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
//# sourceMappingURL=query.js.map