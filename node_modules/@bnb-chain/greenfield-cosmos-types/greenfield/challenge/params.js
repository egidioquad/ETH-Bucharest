"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
const math_1 = require("@cosmjs/math");
exports.protobufPackage = "greenfield.challenge";
function createBaseParams() {
    return {
        challengeCountPerBlock: helpers_1.Long.UZERO,
        challengeKeepAlivePeriod: helpers_1.Long.UZERO,
        slashCoolingOffPeriod: helpers_1.Long.UZERO,
        slashAmountSizeRate: "",
        slashAmountMin: "",
        slashAmountMax: "",
        rewardValidatorRatio: "",
        rewardSubmitterRatio: "",
        rewardSubmitterThreshold: "",
        heartbeatInterval: helpers_1.Long.UZERO,
        attestationInturnInterval: helpers_1.Long.UZERO,
        attestationKeptCount: helpers_1.Long.UZERO,
        spSlashMaxAmount: "",
        spSlashCountingWindow: helpers_1.Long.UZERO
    };
}
exports.Params = {
    typeUrl: "/greenfield.challenge.Params",
    encode(message, writer = _m0.Writer.create()) {
        if (!message.challengeCountPerBlock.isZero()) {
            writer.uint32(8).uint64(message.challengeCountPerBlock);
        }
        if (!message.challengeKeepAlivePeriod.isZero()) {
            writer.uint32(16).uint64(message.challengeKeepAlivePeriod);
        }
        if (!message.slashCoolingOffPeriod.isZero()) {
            writer.uint32(24).uint64(message.slashCoolingOffPeriod);
        }
        if (message.slashAmountSizeRate !== "") {
            writer.uint32(34).string(math_1.Decimal.fromUserInput(message.slashAmountSizeRate, 18).atomics);
        }
        if (message.slashAmountMin !== "") {
            writer.uint32(42).string(message.slashAmountMin);
        }
        if (message.slashAmountMax !== "") {
            writer.uint32(50).string(message.slashAmountMax);
        }
        if (message.rewardValidatorRatio !== "") {
            writer.uint32(58).string(math_1.Decimal.fromUserInput(message.rewardValidatorRatio, 18).atomics);
        }
        if (message.rewardSubmitterRatio !== "") {
            writer.uint32(66).string(math_1.Decimal.fromUserInput(message.rewardSubmitterRatio, 18).atomics);
        }
        if (message.rewardSubmitterThreshold !== "") {
            writer.uint32(74).string(message.rewardSubmitterThreshold);
        }
        if (!message.heartbeatInterval.isZero()) {
            writer.uint32(80).uint64(message.heartbeatInterval);
        }
        if (!message.attestationInturnInterval.isZero()) {
            writer.uint32(88).uint64(message.attestationInturnInterval);
        }
        if (!message.attestationKeptCount.isZero()) {
            writer.uint32(96).uint64(message.attestationKeptCount);
        }
        if (message.spSlashMaxAmount !== "") {
            writer.uint32(106).string(message.spSlashMaxAmount);
        }
        if (!message.spSlashCountingWindow.isZero()) {
            writer.uint32(112).uint64(message.spSlashCountingWindow);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.challengeCountPerBlock = reader.uint64();
                    break;
                case 2:
                    message.challengeKeepAlivePeriod = reader.uint64();
                    break;
                case 3:
                    message.slashCoolingOffPeriod = reader.uint64();
                    break;
                case 4:
                    message.slashAmountSizeRate = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                case 5:
                    message.slashAmountMin = reader.string();
                    break;
                case 6:
                    message.slashAmountMax = reader.string();
                    break;
                case 7:
                    message.rewardValidatorRatio = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                case 8:
                    message.rewardSubmitterRatio = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                case 9:
                    message.rewardSubmitterThreshold = reader.string();
                    break;
                case 10:
                    message.heartbeatInterval = reader.uint64();
                    break;
                case 11:
                    message.attestationInturnInterval = reader.uint64();
                    break;
                case 12:
                    message.attestationKeptCount = reader.uint64();
                    break;
                case 13:
                    message.spSlashMaxAmount = reader.string();
                    break;
                case 14:
                    message.spSlashCountingWindow = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            challengeCountPerBlock: (0, helpers_1.isSet)(object.challengeCountPerBlock) ? helpers_1.Long.fromValue(object.challengeCountPerBlock) : helpers_1.Long.UZERO,
            challengeKeepAlivePeriod: (0, helpers_1.isSet)(object.challengeKeepAlivePeriod) ? helpers_1.Long.fromValue(object.challengeKeepAlivePeriod) : helpers_1.Long.UZERO,
            slashCoolingOffPeriod: (0, helpers_1.isSet)(object.slashCoolingOffPeriod) ? helpers_1.Long.fromValue(object.slashCoolingOffPeriod) : helpers_1.Long.UZERO,
            slashAmountSizeRate: (0, helpers_1.isSet)(object.slashAmountSizeRate) ? String(object.slashAmountSizeRate) : "",
            slashAmountMin: (0, helpers_1.isSet)(object.slashAmountMin) ? String(object.slashAmountMin) : "",
            slashAmountMax: (0, helpers_1.isSet)(object.slashAmountMax) ? String(object.slashAmountMax) : "",
            rewardValidatorRatio: (0, helpers_1.isSet)(object.rewardValidatorRatio) ? String(object.rewardValidatorRatio) : "",
            rewardSubmitterRatio: (0, helpers_1.isSet)(object.rewardSubmitterRatio) ? String(object.rewardSubmitterRatio) : "",
            rewardSubmitterThreshold: (0, helpers_1.isSet)(object.rewardSubmitterThreshold) ? String(object.rewardSubmitterThreshold) : "",
            heartbeatInterval: (0, helpers_1.isSet)(object.heartbeatInterval) ? helpers_1.Long.fromValue(object.heartbeatInterval) : helpers_1.Long.UZERO,
            attestationInturnInterval: (0, helpers_1.isSet)(object.attestationInturnInterval) ? helpers_1.Long.fromValue(object.attestationInturnInterval) : helpers_1.Long.UZERO,
            attestationKeptCount: (0, helpers_1.isSet)(object.attestationKeptCount) ? helpers_1.Long.fromValue(object.attestationKeptCount) : helpers_1.Long.UZERO,
            spSlashMaxAmount: (0, helpers_1.isSet)(object.spSlashMaxAmount) ? String(object.spSlashMaxAmount) : "",
            spSlashCountingWindow: (0, helpers_1.isSet)(object.spSlashCountingWindow) ? helpers_1.Long.fromValue(object.spSlashCountingWindow) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.challengeCountPerBlock !== undefined && (obj.challengeCountPerBlock = (message.challengeCountPerBlock || helpers_1.Long.UZERO).toString());
        message.challengeKeepAlivePeriod !== undefined && (obj.challengeKeepAlivePeriod = (message.challengeKeepAlivePeriod || helpers_1.Long.UZERO).toString());
        message.slashCoolingOffPeriod !== undefined && (obj.slashCoolingOffPeriod = (message.slashCoolingOffPeriod || helpers_1.Long.UZERO).toString());
        message.slashAmountSizeRate !== undefined && (obj.slashAmountSizeRate = message.slashAmountSizeRate);
        message.slashAmountMin !== undefined && (obj.slashAmountMin = message.slashAmountMin);
        message.slashAmountMax !== undefined && (obj.slashAmountMax = message.slashAmountMax);
        message.rewardValidatorRatio !== undefined && (obj.rewardValidatorRatio = message.rewardValidatorRatio);
        message.rewardSubmitterRatio !== undefined && (obj.rewardSubmitterRatio = message.rewardSubmitterRatio);
        message.rewardSubmitterThreshold !== undefined && (obj.rewardSubmitterThreshold = message.rewardSubmitterThreshold);
        message.heartbeatInterval !== undefined && (obj.heartbeatInterval = (message.heartbeatInterval || helpers_1.Long.UZERO).toString());
        message.attestationInturnInterval !== undefined && (obj.attestationInturnInterval = (message.attestationInturnInterval || helpers_1.Long.UZERO).toString());
        message.attestationKeptCount !== undefined && (obj.attestationKeptCount = (message.attestationKeptCount || helpers_1.Long.UZERO).toString());
        message.spSlashMaxAmount !== undefined && (obj.spSlashMaxAmount = message.spSlashMaxAmount);
        message.spSlashCountingWindow !== undefined && (obj.spSlashCountingWindow = (message.spSlashCountingWindow || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.challengeCountPerBlock = object.challengeCountPerBlock !== undefined && object.challengeCountPerBlock !== null ? helpers_1.Long.fromValue(object.challengeCountPerBlock) : helpers_1.Long.UZERO;
        message.challengeKeepAlivePeriod = object.challengeKeepAlivePeriod !== undefined && object.challengeKeepAlivePeriod !== null ? helpers_1.Long.fromValue(object.challengeKeepAlivePeriod) : helpers_1.Long.UZERO;
        message.slashCoolingOffPeriod = object.slashCoolingOffPeriod !== undefined && object.slashCoolingOffPeriod !== null ? helpers_1.Long.fromValue(object.slashCoolingOffPeriod) : helpers_1.Long.UZERO;
        message.slashAmountSizeRate = object.slashAmountSizeRate ?? "";
        message.slashAmountMin = object.slashAmountMin ?? "";
        message.slashAmountMax = object.slashAmountMax ?? "";
        message.rewardValidatorRatio = object.rewardValidatorRatio ?? "";
        message.rewardSubmitterRatio = object.rewardSubmitterRatio ?? "";
        message.rewardSubmitterThreshold = object.rewardSubmitterThreshold ?? "";
        message.heartbeatInterval = object.heartbeatInterval !== undefined && object.heartbeatInterval !== null ? helpers_1.Long.fromValue(object.heartbeatInterval) : helpers_1.Long.UZERO;
        message.attestationInturnInterval = object.attestationInturnInterval !== undefined && object.attestationInturnInterval !== null ? helpers_1.Long.fromValue(object.attestationInturnInterval) : helpers_1.Long.UZERO;
        message.attestationKeptCount = object.attestationKeptCount !== undefined && object.attestationKeptCount !== null ? helpers_1.Long.fromValue(object.attestationKeptCount) : helpers_1.Long.UZERO;
        message.spSlashMaxAmount = object.spSlashMaxAmount ?? "";
        message.spSlashCountingWindow = object.spSlashCountingWindow !== undefined && object.spSlashCountingWindow !== null ? helpers_1.Long.fromValue(object.spSlashCountingWindow) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            challengeCountPerBlock: object?.challenge_count_per_block,
            challengeKeepAlivePeriod: object?.challenge_keep_alive_period,
            slashCoolingOffPeriod: object?.slash_cooling_off_period,
            slashAmountSizeRate: object?.slash_amount_size_rate,
            slashAmountMin: object?.slash_amount_min,
            slashAmountMax: object?.slash_amount_max,
            rewardValidatorRatio: object?.reward_validator_ratio,
            rewardSubmitterRatio: object?.reward_submitter_ratio,
            rewardSubmitterThreshold: object?.reward_submitter_threshold,
            heartbeatInterval: object?.heartbeat_interval,
            attestationInturnInterval: object?.attestation_inturn_interval,
            attestationKeptCount: object?.attestation_kept_count,
            spSlashMaxAmount: object?.sp_slash_max_amount,
            spSlashCountingWindow: object?.sp_slash_counting_window
        };
    },
    toSDK(message) {
        const obj = {};
        obj.challenge_count_per_block = message.challengeCountPerBlock;
        obj.challenge_keep_alive_period = message.challengeKeepAlivePeriod;
        obj.slash_cooling_off_period = message.slashCoolingOffPeriod;
        obj.slash_amount_size_rate = message.slashAmountSizeRate;
        obj.slash_amount_min = message.slashAmountMin;
        obj.slash_amount_max = message.slashAmountMax;
        obj.reward_validator_ratio = message.rewardValidatorRatio;
        obj.reward_submitter_ratio = message.rewardSubmitterRatio;
        obj.reward_submitter_threshold = message.rewardSubmitterThreshold;
        obj.heartbeat_interval = message.heartbeatInterval;
        obj.attestation_inturn_interval = message.attestationInturnInterval;
        obj.attestation_kept_count = message.attestationKeptCount;
        obj.sp_slash_max_amount = message.spSlashMaxAmount;
        obj.sp_slash_counting_window = message.spSlashCountingWindow;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseParams();
        if (object.challenge_count_per_block !== undefined && object.challenge_count_per_block !== null) {
            message.challengeCountPerBlock = helpers_1.Long.fromString(object.challenge_count_per_block);
        }
        if (object.challenge_keep_alive_period !== undefined && object.challenge_keep_alive_period !== null) {
            message.challengeKeepAlivePeriod = helpers_1.Long.fromString(object.challenge_keep_alive_period);
        }
        if (object.slash_cooling_off_period !== undefined && object.slash_cooling_off_period !== null) {
            message.slashCoolingOffPeriod = helpers_1.Long.fromString(object.slash_cooling_off_period);
        }
        if (object.slash_amount_size_rate !== undefined && object.slash_amount_size_rate !== null) {
            message.slashAmountSizeRate = object.slash_amount_size_rate;
        }
        if (object.slash_amount_min !== undefined && object.slash_amount_min !== null) {
            message.slashAmountMin = object.slash_amount_min;
        }
        if (object.slash_amount_max !== undefined && object.slash_amount_max !== null) {
            message.slashAmountMax = object.slash_amount_max;
        }
        if (object.reward_validator_ratio !== undefined && object.reward_validator_ratio !== null) {
            message.rewardValidatorRatio = object.reward_validator_ratio;
        }
        if (object.reward_submitter_ratio !== undefined && object.reward_submitter_ratio !== null) {
            message.rewardSubmitterRatio = object.reward_submitter_ratio;
        }
        if (object.reward_submitter_threshold !== undefined && object.reward_submitter_threshold !== null) {
            message.rewardSubmitterThreshold = object.reward_submitter_threshold;
        }
        if (object.heartbeat_interval !== undefined && object.heartbeat_interval !== null) {
            message.heartbeatInterval = helpers_1.Long.fromString(object.heartbeat_interval);
        }
        if (object.attestation_inturn_interval !== undefined && object.attestation_inturn_interval !== null) {
            message.attestationInturnInterval = helpers_1.Long.fromString(object.attestation_inturn_interval);
        }
        if (object.attestation_kept_count !== undefined && object.attestation_kept_count !== null) {
            message.attestationKeptCount = helpers_1.Long.fromString(object.attestation_kept_count);
        }
        if (object.sp_slash_max_amount !== undefined && object.sp_slash_max_amount !== null) {
            message.spSlashMaxAmount = object.sp_slash_max_amount;
        }
        if (object.sp_slash_counting_window !== undefined && object.sp_slash_counting_window !== null) {
            message.spSlashCountingWindow = helpers_1.Long.fromString(object.sp_slash_counting_window);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.challenge_count_per_block = message.challengeCountPerBlock ? message.challengeCountPerBlock.toString() : undefined;
        obj.challenge_keep_alive_period = message.challengeKeepAlivePeriod ? message.challengeKeepAlivePeriod.toString() : undefined;
        obj.slash_cooling_off_period = message.slashCoolingOffPeriod ? message.slashCoolingOffPeriod.toString() : undefined;
        obj.slash_amount_size_rate = message.slashAmountSizeRate;
        obj.slash_amount_min = message.slashAmountMin;
        obj.slash_amount_max = message.slashAmountMax;
        obj.reward_validator_ratio = message.rewardValidatorRatio;
        obj.reward_submitter_ratio = message.rewardSubmitterRatio;
        obj.reward_submitter_threshold = message.rewardSubmitterThreshold;
        obj.heartbeat_interval = message.heartbeatInterval ? message.heartbeatInterval.toString() : undefined;
        obj.attestation_inturn_interval = message.attestationInturnInterval ? message.attestationInturnInterval.toString() : undefined;
        obj.attestation_kept_count = message.attestationKeptCount ? message.attestationKeptCount.toString() : undefined;
        obj.sp_slash_max_amount = message.spSlashMaxAmount;
        obj.sp_slash_counting_window = message.spSlashCountingWindow ? message.spSlashCountingWindow.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.Params.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.Params.decode(message.value);
    },
    toProto(message) {
        return exports.Params.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.challenge.Params",
            value: exports.Params.encode(message).finish()
        };
    }
};
//# sourceMappingURL=params.js.map