"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryStorageProviderMaintenanceRecordsResponse = exports.QueryStorageProviderMaintenanceRecordsRequest = exports.QueryStorageProviderByOperatorAddressResponse = exports.QueryStorageProviderByOperatorAddressRequest = exports.QueryStorageProviderResponse = exports.QueryStorageProviderRequest = exports.QueryGlobalSpStorePriceByTimeResponse = exports.QueryGlobalSpStorePriceByTimeRequest = exports.QuerySpStoragePriceResponse = exports.QuerySpStoragePriceRequest = exports.QueryStorageProvidersResponse = exports.QueryStorageProvidersRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const pagination_1 = require("../../cosmos/base/query/v1beta1/pagination");
const params_1 = require("./params");
const types_1 = require("./types");
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.sp";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    typeUrl: "/greenfield.sp.QueryParamsRequest",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    },
    fromAmino(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryParamsRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryParamsRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryParamsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.QueryParamsRequest",
            value: exports.QueryParamsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryParamsResponse() {
    return {
        params: params_1.Params.fromPartial({})
    };
}
exports.QueryParamsResponse = {
    typeUrl: "/greenfield.sp.QueryParamsResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: (0, helpers_1.isSet)(object.params) ? params_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            params: object.params ? params_1.Params.fromSDK(object.params) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toSDK(message.params) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryParamsResponse();
        if (object.params !== undefined && object.params !== null) {
            message.params = params_1.Params.fromAmino(object.params);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.params = message.params ? params_1.Params.toAmino(message.params) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryParamsResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryParamsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryParamsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.QueryParamsResponse",
            value: exports.QueryParamsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryStorageProvidersRequest() {
    return {
        pagination: undefined
    };
}
exports.QueryStorageProvidersRequest = {
    typeUrl: "/greenfield.sp.QueryStorageProvidersRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStorageProvidersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryStorageProvidersRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryStorageProvidersRequest();
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromAmino(object.pagination);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.pagination = message.pagination ? pagination_1.PageRequest.toAmino(message.pagination) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryStorageProvidersRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryStorageProvidersRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryStorageProvidersRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.QueryStorageProvidersRequest",
            value: exports.QueryStorageProvidersRequest.encode(message).finish()
        };
    }
};
function createBaseQueryStorageProvidersResponse() {
    return {
        sps: [],
        pagination: undefined
    };
}
exports.QueryStorageProvidersResponse = {
    typeUrl: "/greenfield.sp.QueryStorageProvidersResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.sps) {
            types_1.StorageProvider.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStorageProvidersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sps.push(types_1.StorageProvider.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sps: Array.isArray(object?.sps) ? object.sps.map((e) => types_1.StorageProvider.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sps) {
            obj.sps = message.sps.map(e => e ? types_1.StorageProvider.toJSON(e) : undefined);
        }
        else {
            obj.sps = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryStorageProvidersResponse();
        message.sps = object.sps?.map(e => types_1.StorageProvider.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            sps: Array.isArray(object?.sps) ? object.sps.map((e) => types_1.StorageProvider.fromSDK(e)) : [],
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.sps) {
            obj.sps = message.sps.map(e => e ? types_1.StorageProvider.toSDK(e) : undefined);
        }
        else {
            obj.sps = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryStorageProvidersResponse();
        message.sps = object.sps?.map(e => types_1.StorageProvider.fromAmino(e)) || [];
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageResponse.fromAmino(object.pagination);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        if (message.sps) {
            obj.sps = message.sps.map(e => e ? types_1.StorageProvider.toAmino(e) : undefined);
        }
        else {
            obj.sps = [];
        }
        obj.pagination = message.pagination ? pagination_1.PageResponse.toAmino(message.pagination) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryStorageProvidersResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryStorageProvidersResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryStorageProvidersResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.QueryStorageProvidersResponse",
            value: exports.QueryStorageProvidersResponse.encode(message).finish()
        };
    }
};
function createBaseQuerySpStoragePriceRequest() {
    return {
        spAddr: ""
    };
}
exports.QuerySpStoragePriceRequest = {
    typeUrl: "/greenfield.sp.QuerySpStoragePriceRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.spAddr !== "") {
            writer.uint32(10).string(message.spAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuerySpStoragePriceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spAddr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            spAddr: (0, helpers_1.isSet)(object.spAddr) ? String(object.spAddr) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.spAddr !== undefined && (obj.spAddr = message.spAddr);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQuerySpStoragePriceRequest();
        message.spAddr = object.spAddr ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            spAddr: object?.sp_addr
        };
    },
    toSDK(message) {
        const obj = {};
        obj.sp_addr = message.spAddr;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQuerySpStoragePriceRequest();
        if (object.sp_addr !== undefined && object.sp_addr !== null) {
            message.spAddr = object.sp_addr;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.sp_addr = message.spAddr;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QuerySpStoragePriceRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QuerySpStoragePriceRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QuerySpStoragePriceRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.QuerySpStoragePriceRequest",
            value: exports.QuerySpStoragePriceRequest.encode(message).finish()
        };
    }
};
function createBaseQuerySpStoragePriceResponse() {
    return {
        spStoragePrice: types_1.SpStoragePrice.fromPartial({})
    };
}
exports.QuerySpStoragePriceResponse = {
    typeUrl: "/greenfield.sp.QuerySpStoragePriceResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.spStoragePrice !== undefined) {
            types_1.SpStoragePrice.encode(message.spStoragePrice, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuerySpStoragePriceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spStoragePrice = types_1.SpStoragePrice.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            spStoragePrice: (0, helpers_1.isSet)(object.spStoragePrice) ? types_1.SpStoragePrice.fromJSON(object.spStoragePrice) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.spStoragePrice !== undefined && (obj.spStoragePrice = message.spStoragePrice ? types_1.SpStoragePrice.toJSON(message.spStoragePrice) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQuerySpStoragePriceResponse();
        message.spStoragePrice = object.spStoragePrice !== undefined && object.spStoragePrice !== null ? types_1.SpStoragePrice.fromPartial(object.spStoragePrice) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            spStoragePrice: object.sp_storage_price ? types_1.SpStoragePrice.fromSDK(object.sp_storage_price) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.spStoragePrice !== undefined && (obj.sp_storage_price = message.spStoragePrice ? types_1.SpStoragePrice.toSDK(message.spStoragePrice) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQuerySpStoragePriceResponse();
        if (object.sp_storage_price !== undefined && object.sp_storage_price !== null) {
            message.spStoragePrice = types_1.SpStoragePrice.fromAmino(object.sp_storage_price);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.sp_storage_price = message.spStoragePrice ? types_1.SpStoragePrice.toAmino(message.spStoragePrice) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QuerySpStoragePriceResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QuerySpStoragePriceResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QuerySpStoragePriceResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.QuerySpStoragePriceResponse",
            value: exports.QuerySpStoragePriceResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGlobalSpStorePriceByTimeRequest() {
    return {
        timestamp: helpers_1.Long.ZERO
    };
}
exports.QueryGlobalSpStorePriceByTimeRequest = {
    typeUrl: "/greenfield.sp.QueryGlobalSpStorePriceByTimeRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (!message.timestamp.isZero()) {
            writer.uint32(8).int64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGlobalSpStorePriceByTimeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.timestamp = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            timestamp: (0, helpers_1.isSet)(object.timestamp) ? helpers_1.Long.fromValue(object.timestamp) : helpers_1.Long.ZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.timestamp !== undefined && (obj.timestamp = (message.timestamp || helpers_1.Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGlobalSpStorePriceByTimeRequest();
        message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? helpers_1.Long.fromValue(object.timestamp) : helpers_1.Long.ZERO;
        return message;
    },
    fromSDK(object) {
        return {
            timestamp: object?.timestamp
        };
    },
    toSDK(message) {
        const obj = {};
        obj.timestamp = message.timestamp;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryGlobalSpStorePriceByTimeRequest();
        if (object.timestamp !== undefined && object.timestamp !== null) {
            message.timestamp = helpers_1.Long.fromString(object.timestamp);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.timestamp = message.timestamp ? message.timestamp.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGlobalSpStorePriceByTimeRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryGlobalSpStorePriceByTimeRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGlobalSpStorePriceByTimeRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.QueryGlobalSpStorePriceByTimeRequest",
            value: exports.QueryGlobalSpStorePriceByTimeRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGlobalSpStorePriceByTimeResponse() {
    return {
        globalSpStorePrice: types_1.GlobalSpStorePrice.fromPartial({})
    };
}
exports.QueryGlobalSpStorePriceByTimeResponse = {
    typeUrl: "/greenfield.sp.QueryGlobalSpStorePriceByTimeResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.globalSpStorePrice !== undefined) {
            types_1.GlobalSpStorePrice.encode(message.globalSpStorePrice, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGlobalSpStorePriceByTimeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.globalSpStorePrice = types_1.GlobalSpStorePrice.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            globalSpStorePrice: (0, helpers_1.isSet)(object.globalSpStorePrice) ? types_1.GlobalSpStorePrice.fromJSON(object.globalSpStorePrice) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.globalSpStorePrice !== undefined && (obj.globalSpStorePrice = message.globalSpStorePrice ? types_1.GlobalSpStorePrice.toJSON(message.globalSpStorePrice) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGlobalSpStorePriceByTimeResponse();
        message.globalSpStorePrice = object.globalSpStorePrice !== undefined && object.globalSpStorePrice !== null ? types_1.GlobalSpStorePrice.fromPartial(object.globalSpStorePrice) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            globalSpStorePrice: object.global_sp_store_price ? types_1.GlobalSpStorePrice.fromSDK(object.global_sp_store_price) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.globalSpStorePrice !== undefined && (obj.global_sp_store_price = message.globalSpStorePrice ? types_1.GlobalSpStorePrice.toSDK(message.globalSpStorePrice) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryGlobalSpStorePriceByTimeResponse();
        if (object.global_sp_store_price !== undefined && object.global_sp_store_price !== null) {
            message.globalSpStorePrice = types_1.GlobalSpStorePrice.fromAmino(object.global_sp_store_price);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.global_sp_store_price = message.globalSpStorePrice ? types_1.GlobalSpStorePrice.toAmino(message.globalSpStorePrice) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGlobalSpStorePriceByTimeResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryGlobalSpStorePriceByTimeResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGlobalSpStorePriceByTimeResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.QueryGlobalSpStorePriceByTimeResponse",
            value: exports.QueryGlobalSpStorePriceByTimeResponse.encode(message).finish()
        };
    }
};
function createBaseQueryStorageProviderRequest() {
    return {
        id: 0
    };
}
exports.QueryStorageProviderRequest = {
    typeUrl: "/greenfield.sp.QueryStorageProviderRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStorageProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? Number(object.id) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = Math.round(message.id));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryStorageProviderRequest();
        message.id = object.id ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryStorageProviderRequest();
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.id = message.id;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryStorageProviderRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryStorageProviderRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryStorageProviderRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.QueryStorageProviderRequest",
            value: exports.QueryStorageProviderRequest.encode(message).finish()
        };
    }
};
function createBaseQueryStorageProviderResponse() {
    return {
        storageProvider: undefined
    };
}
exports.QueryStorageProviderResponse = {
    typeUrl: "/greenfield.sp.QueryStorageProviderResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProvider !== undefined) {
            types_1.StorageProvider.encode(message.storageProvider, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStorageProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProvider = types_1.StorageProvider.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProvider: (0, helpers_1.isSet)(object.storageProvider) ? types_1.StorageProvider.fromJSON(object.storageProvider) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProvider !== undefined && (obj.storageProvider = message.storageProvider ? types_1.StorageProvider.toJSON(message.storageProvider) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryStorageProviderResponse();
        message.storageProvider = object.storageProvider !== undefined && object.storageProvider !== null ? types_1.StorageProvider.fromPartial(object.storageProvider) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            storageProvider: object.storageProvider ? types_1.StorageProvider.fromSDK(object.storageProvider) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.storageProvider !== undefined && (obj.storageProvider = message.storageProvider ? types_1.StorageProvider.toSDK(message.storageProvider) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryStorageProviderResponse();
        if (object.storageProvider !== undefined && object.storageProvider !== null) {
            message.storageProvider = types_1.StorageProvider.fromAmino(object.storageProvider);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.storageProvider = message.storageProvider ? types_1.StorageProvider.toAmino(message.storageProvider) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryStorageProviderResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryStorageProviderResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryStorageProviderResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.QueryStorageProviderResponse",
            value: exports.QueryStorageProviderResponse.encode(message).finish()
        };
    }
};
function createBaseQueryStorageProviderByOperatorAddressRequest() {
    return {
        operatorAddress: ""
    };
}
exports.QueryStorageProviderByOperatorAddressRequest = {
    typeUrl: "/greenfield.sp.QueryStorageProviderByOperatorAddressRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operatorAddress !== "") {
            writer.uint32(10).string(message.operatorAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStorageProviderByOperatorAddressRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operatorAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operatorAddress: (0, helpers_1.isSet)(object.operatorAddress) ? String(object.operatorAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operatorAddress !== undefined && (obj.operatorAddress = message.operatorAddress);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryStorageProviderByOperatorAddressRequest();
        message.operatorAddress = object.operatorAddress ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operatorAddress: object?.operator_address
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator_address = message.operatorAddress;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryStorageProviderByOperatorAddressRequest();
        if (object.operator_address !== undefined && object.operator_address !== null) {
            message.operatorAddress = object.operator_address;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator_address = message.operatorAddress;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryStorageProviderByOperatorAddressRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryStorageProviderByOperatorAddressRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryStorageProviderByOperatorAddressRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.QueryStorageProviderByOperatorAddressRequest",
            value: exports.QueryStorageProviderByOperatorAddressRequest.encode(message).finish()
        };
    }
};
function createBaseQueryStorageProviderByOperatorAddressResponse() {
    return {
        storageProvider: undefined
    };
}
exports.QueryStorageProviderByOperatorAddressResponse = {
    typeUrl: "/greenfield.sp.QueryStorageProviderByOperatorAddressResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProvider !== undefined) {
            types_1.StorageProvider.encode(message.storageProvider, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStorageProviderByOperatorAddressResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProvider = types_1.StorageProvider.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProvider: (0, helpers_1.isSet)(object.storageProvider) ? types_1.StorageProvider.fromJSON(object.storageProvider) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProvider !== undefined && (obj.storageProvider = message.storageProvider ? types_1.StorageProvider.toJSON(message.storageProvider) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryStorageProviderByOperatorAddressResponse();
        message.storageProvider = object.storageProvider !== undefined && object.storageProvider !== null ? types_1.StorageProvider.fromPartial(object.storageProvider) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            storageProvider: object.storageProvider ? types_1.StorageProvider.fromSDK(object.storageProvider) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.storageProvider !== undefined && (obj.storageProvider = message.storageProvider ? types_1.StorageProvider.toSDK(message.storageProvider) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryStorageProviderByOperatorAddressResponse();
        if (object.storageProvider !== undefined && object.storageProvider !== null) {
            message.storageProvider = types_1.StorageProvider.fromAmino(object.storageProvider);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.storageProvider = message.storageProvider ? types_1.StorageProvider.toAmino(message.storageProvider) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryStorageProviderByOperatorAddressResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryStorageProviderByOperatorAddressResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryStorageProviderByOperatorAddressResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.QueryStorageProviderByOperatorAddressResponse",
            value: exports.QueryStorageProviderByOperatorAddressResponse.encode(message).finish()
        };
    }
};
function createBaseQueryStorageProviderMaintenanceRecordsRequest() {
    return {
        operatorAddress: ""
    };
}
exports.QueryStorageProviderMaintenanceRecordsRequest = {
    typeUrl: "/greenfield.sp.QueryStorageProviderMaintenanceRecordsRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operatorAddress !== "") {
            writer.uint32(10).string(message.operatorAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStorageProviderMaintenanceRecordsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operatorAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operatorAddress: (0, helpers_1.isSet)(object.operatorAddress) ? String(object.operatorAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operatorAddress !== undefined && (obj.operatorAddress = message.operatorAddress);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryStorageProviderMaintenanceRecordsRequest();
        message.operatorAddress = object.operatorAddress ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operatorAddress: object?.operator_address
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator_address = message.operatorAddress;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryStorageProviderMaintenanceRecordsRequest();
        if (object.operator_address !== undefined && object.operator_address !== null) {
            message.operatorAddress = object.operator_address;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator_address = message.operatorAddress;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryStorageProviderMaintenanceRecordsRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryStorageProviderMaintenanceRecordsRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryStorageProviderMaintenanceRecordsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.QueryStorageProviderMaintenanceRecordsRequest",
            value: exports.QueryStorageProviderMaintenanceRecordsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryStorageProviderMaintenanceRecordsResponse() {
    return {
        records: []
    };
}
exports.QueryStorageProviderMaintenanceRecordsResponse = {
    typeUrl: "/greenfield.sp.QueryStorageProviderMaintenanceRecordsResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.records) {
            types_1.MaintenanceRecord.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStorageProviderMaintenanceRecordsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.records.push(types_1.MaintenanceRecord.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            records: Array.isArray(object?.records) ? object.records.map((e) => types_1.MaintenanceRecord.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.records) {
            obj.records = message.records.map(e => e ? types_1.MaintenanceRecord.toJSON(e) : undefined);
        }
        else {
            obj.records = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryStorageProviderMaintenanceRecordsResponse();
        message.records = object.records?.map(e => types_1.MaintenanceRecord.fromPartial(e)) || [];
        return message;
    },
    fromSDK(object) {
        return {
            records: Array.isArray(object?.records) ? object.records.map((e) => types_1.MaintenanceRecord.fromSDK(e)) : []
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.records) {
            obj.records = message.records.map(e => e ? types_1.MaintenanceRecord.toSDK(e) : undefined);
        }
        else {
            obj.records = [];
        }
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryStorageProviderMaintenanceRecordsResponse();
        message.records = object.records?.map(e => types_1.MaintenanceRecord.fromAmino(e)) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        if (message.records) {
            obj.records = message.records.map(e => e ? types_1.MaintenanceRecord.toAmino(e) : undefined);
        }
        else {
            obj.records = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryStorageProviderMaintenanceRecordsResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryStorageProviderMaintenanceRecordsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryStorageProviderMaintenanceRecordsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.QueryStorageProviderMaintenanceRecordsResponse",
            value: exports.QueryStorageProviderMaintenanceRecordsResponse.encode(message).finish()
        };
    }
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.StorageProviders = this.StorageProviders.bind(this);
        this.QuerySpStoragePrice = this.QuerySpStoragePrice.bind(this);
        this.QueryGlobalSpStorePriceByTime = this.QueryGlobalSpStorePriceByTime.bind(this);
        this.StorageProvider = this.StorageProvider.bind(this);
        this.StorageProviderByOperatorAddress = this.StorageProviderByOperatorAddress.bind(this);
        this.StorageProviderMaintenanceRecordsByOperatorAddress = this.StorageProviderMaintenanceRecordsByOperatorAddress.bind(this);
    }
    Params(request = {}) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.sp.Query", "Params", data);
        return promise.then(data => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
    }
    StorageProviders(request = {
        pagination: undefined
    }) {
        const data = exports.QueryStorageProvidersRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.sp.Query", "StorageProviders", data);
        return promise.then(data => exports.QueryStorageProvidersResponse.decode(new _m0.Reader(data)));
    }
    QuerySpStoragePrice(request) {
        const data = exports.QuerySpStoragePriceRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.sp.Query", "QuerySpStoragePrice", data);
        return promise.then(data => exports.QuerySpStoragePriceResponse.decode(new _m0.Reader(data)));
    }
    QueryGlobalSpStorePriceByTime(request) {
        const data = exports.QueryGlobalSpStorePriceByTimeRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.sp.Query", "QueryGlobalSpStorePriceByTime", data);
        return promise.then(data => exports.QueryGlobalSpStorePriceByTimeResponse.decode(new _m0.Reader(data)));
    }
    StorageProvider(request) {
        const data = exports.QueryStorageProviderRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.sp.Query", "StorageProvider", data);
        return promise.then(data => exports.QueryStorageProviderResponse.decode(new _m0.Reader(data)));
    }
    StorageProviderByOperatorAddress(request) {
        const data = exports.QueryStorageProviderByOperatorAddressRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.sp.Query", "StorageProviderByOperatorAddress", data);
        return promise.then(data => exports.QueryStorageProviderByOperatorAddressResponse.decode(new _m0.Reader(data)));
    }
    StorageProviderMaintenanceRecordsByOperatorAddress(request) {
        const data = exports.QueryStorageProviderMaintenanceRecordsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.sp.Query", "StorageProviderMaintenanceRecordsByOperatorAddress", data);
        return promise.then(data => exports.QueryStorageProviderMaintenanceRecordsResponse.decode(new _m0.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
//# sourceMappingURL=query.js.map