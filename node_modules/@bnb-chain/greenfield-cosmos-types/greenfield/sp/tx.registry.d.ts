import { GeneratedType } from "@cosmjs/proto-signing";
import { MsgCreateStorageProvider, MsgDeposit, MsgEditStorageProvider, MsgUpdateSpStoragePrice, MsgUpdateStorageProviderStatus, MsgUpdateParams } from "./tx";
export declare const registry: ReadonlyArray<[string, GeneratedType]>;
export declare const load: (protoRegistry: Registry) => void;
export declare const MessageComposer: {
    encoded: {
        createStorageProvider(value: MsgCreateStorageProvider): {
            typeUrl: string;
            value: Uint8Array;
        };
        deposit(value: MsgDeposit): {
            typeUrl: string;
            value: Uint8Array;
        };
        editStorageProvider(value: MsgEditStorageProvider): {
            typeUrl: string;
            value: Uint8Array;
        };
        updateSpStoragePrice(value: MsgUpdateSpStoragePrice): {
            typeUrl: string;
            value: Uint8Array;
        };
        updateSpStatus(value: MsgUpdateStorageProviderStatus): {
            typeUrl: string;
            value: Uint8Array;
        };
        updateParams(value: MsgUpdateParams): {
            typeUrl: string;
            value: Uint8Array;
        };
    };
    withTypeUrl: {
        createStorageProvider(value: MsgCreateStorageProvider): {
            typeUrl: string;
            value: MsgCreateStorageProvider;
        };
        deposit(value: MsgDeposit): {
            typeUrl: string;
            value: MsgDeposit;
        };
        editStorageProvider(value: MsgEditStorageProvider): {
            typeUrl: string;
            value: MsgEditStorageProvider;
        };
        updateSpStoragePrice(value: MsgUpdateSpStoragePrice): {
            typeUrl: string;
            value: MsgUpdateSpStoragePrice;
        };
        updateSpStatus(value: MsgUpdateStorageProviderStatus): {
            typeUrl: string;
            value: MsgUpdateStorageProviderStatus;
        };
        updateParams(value: MsgUpdateParams): {
            typeUrl: string;
            value: MsgUpdateParams;
        };
    };
    toJSON: {
        createStorageProvider(value: MsgCreateStorageProvider): {
            typeUrl: string;
            value: unknown;
        };
        deposit(value: MsgDeposit): {
            typeUrl: string;
            value: unknown;
        };
        editStorageProvider(value: MsgEditStorageProvider): {
            typeUrl: string;
            value: unknown;
        };
        updateSpStoragePrice(value: MsgUpdateSpStoragePrice): {
            typeUrl: string;
            value: unknown;
        };
        updateSpStatus(value: MsgUpdateStorageProviderStatus): {
            typeUrl: string;
            value: unknown;
        };
        updateParams(value: MsgUpdateParams): {
            typeUrl: string;
            value: unknown;
        };
    };
    fromJSON: {
        createStorageProvider(value: any): {
            typeUrl: string;
            value: MsgCreateStorageProvider;
        };
        deposit(value: any): {
            typeUrl: string;
            value: MsgDeposit;
        };
        editStorageProvider(value: any): {
            typeUrl: string;
            value: MsgEditStorageProvider;
        };
        updateSpStoragePrice(value: any): {
            typeUrl: string;
            value: MsgUpdateSpStoragePrice;
        };
        updateSpStatus(value: any): {
            typeUrl: string;
            value: MsgUpdateStorageProviderStatus;
        };
        updateParams(value: any): {
            typeUrl: string;
            value: MsgUpdateParams;
        };
    };
    fromPartial: {
        createStorageProvider(value: MsgCreateStorageProvider): {
            typeUrl: string;
            value: MsgCreateStorageProvider;
        };
        deposit(value: MsgDeposit): {
            typeUrl: string;
            value: MsgDeposit;
        };
        editStorageProvider(value: MsgEditStorageProvider): {
            typeUrl: string;
            value: MsgEditStorageProvider;
        };
        updateSpStoragePrice(value: MsgUpdateSpStoragePrice): {
            typeUrl: string;
            value: MsgUpdateSpStoragePrice;
        };
        updateSpStatus(value: MsgUpdateStorageProviderStatus): {
            typeUrl: string;
            value: MsgUpdateStorageProviderStatus;
        };
        updateParams(value: MsgUpdateParams): {
            typeUrl: string;
            value: MsgUpdateParams;
        };
    };
};
