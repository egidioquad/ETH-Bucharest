/// <reference types="long" />
import { Coin, CoinAmino, CoinSDKType } from "../../cosmos/base/v1beta1/coin";
import { Long } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.sp";
/** Status is the status of a storage provider. */
export declare enum Status {
    STATUS_IN_SERVICE = 0,
    STATUS_IN_JAILED = 1,
    STATUS_GRACEFUL_EXITING = 2,
    STATUS_IN_MAINTENANCE = 3,
    UNRECOGNIZED = -1
}
export declare const StatusSDKType: typeof Status;
export declare const StatusAmino: typeof Status;
export declare function statusFromJSON(object: any): Status;
export declare function statusToJSON(object: Status): string;
/** Description defines a storage provider description. */
export interface Description {
    /** moniker defines a human-readable name for the storage provider */
    moniker: string;
    /** identity defines an optional identity signature (ex. UPort or Keybase). */
    identity: string;
    /** website defines an optional website link. */
    website: string;
    /** security_contact defines an optional email for security contact. */
    securityContact: string;
    /** details define other optional details. */
    details: string;
}
export interface DescriptionProtoMsg {
    typeUrl: "/greenfield.sp.Description";
    value: Uint8Array;
}
/** Description defines a storage provider description. */
export interface DescriptionAmino {
    /** moniker defines a human-readable name for the storage provider */
    moniker?: string;
    /** identity defines an optional identity signature (ex. UPort or Keybase). */
    identity?: string;
    /** website defines an optional website link. */
    website?: string;
    /** security_contact defines an optional email for security contact. */
    security_contact?: string;
    /** details define other optional details. */
    details?: string;
}
export interface DescriptionAminoMsg {
    type: "/greenfield.sp.Description";
    value: DescriptionAmino;
}
/** Description defines a storage provider description. */
export interface DescriptionSDKType {
    moniker: string;
    identity: string;
    website: string;
    security_contact: string;
    details: string;
}
/** StorageProvider defines the meta info of storage provider */
export interface StorageProvider {
    /** id is the identifier of the storage provider, used in virtual group */
    id: number;
    /** operator_address defines the account address of the storage provider's operator; It also is the unique index key of sp. */
    operatorAddress: string;
    /** funding_address defines one of the storage provider's accounts which is used to deposit and reward. */
    fundingAddress: string;
    /** seal_address defines one of the storage provider's accounts which is used to SealObject */
    sealAddress: string;
    /** approval_address defines one of the storage provider's accounts which is used to approve use's createBucket/createObject request */
    approvalAddress: string;
    /** gc_address defines one of the storage provider's accounts which is used for gc purpose. */
    gcAddress: string;
    /** maintenance_address defines one of the storage provider's accounts which is used for testing while in maintenance mode */
    maintenanceAddress: string;
    /** total_deposit defines the number of tokens deposited by this storage provider for staking. */
    totalDeposit: string;
    /** status defines the current service status of this storage provider */
    status: Status;
    /** endpoint define the storage provider's network service address */
    endpoint: string;
    /** description defines the description terms for the storage provider. */
    description: Description;
    /** bls_key defines the bls pub key of the Storage provider for sealing object and completing migration */
    blsKey: Uint8Array;
}
export interface StorageProviderProtoMsg {
    typeUrl: "/greenfield.sp.StorageProvider";
    value: Uint8Array;
}
/** StorageProvider defines the meta info of storage provider */
export interface StorageProviderAmino {
    /** id is the identifier of the storage provider, used in virtual group */
    id?: number;
    /** operator_address defines the account address of the storage provider's operator; It also is the unique index key of sp. */
    operator_address?: string;
    /** funding_address defines one of the storage provider's accounts which is used to deposit and reward. */
    funding_address?: string;
    /** seal_address defines one of the storage provider's accounts which is used to SealObject */
    seal_address?: string;
    /** approval_address defines one of the storage provider's accounts which is used to approve use's createBucket/createObject request */
    approval_address?: string;
    /** gc_address defines one of the storage provider's accounts which is used for gc purpose. */
    gc_address?: string;
    /** maintenance_address defines one of the storage provider's accounts which is used for testing while in maintenance mode */
    maintenance_address?: string;
    /** total_deposit defines the number of tokens deposited by this storage provider for staking. */
    total_deposit?: string;
    /** status defines the current service status of this storage provider */
    status?: Status;
    /** endpoint define the storage provider's network service address */
    endpoint?: string;
    /** description defines the description terms for the storage provider. */
    description?: DescriptionAmino;
    /** bls_key defines the bls pub key of the Storage provider for sealing object and completing migration */
    bls_key?: string;
}
export interface StorageProviderAminoMsg {
    type: "/greenfield.sp.StorageProvider";
    value: StorageProviderAmino;
}
/** StorageProvider defines the meta info of storage provider */
export interface StorageProviderSDKType {
    id: number;
    operator_address: string;
    funding_address: string;
    seal_address: string;
    approval_address: string;
    gc_address: string;
    maintenance_address: string;
    total_deposit: string;
    status: Status;
    endpoint: string;
    description: DescriptionSDKType;
    bls_key: Uint8Array;
}
export interface RewardInfo {
    address: string;
    amount: Coin;
}
export interface RewardInfoProtoMsg {
    typeUrl: "/greenfield.sp.RewardInfo";
    value: Uint8Array;
}
export interface RewardInfoAmino {
    address?: string;
    amount?: CoinAmino;
}
export interface RewardInfoAminoMsg {
    type: "/greenfield.sp.RewardInfo";
    value: RewardInfoAmino;
}
export interface RewardInfoSDKType {
    address: string;
    amount: CoinSDKType;
}
/** storage price of a specific sp */
export interface SpStoragePrice {
    /** sp id */
    spId: number;
    /** update time, unix timestamp in seconds */
    updateTimeSec: Long;
    /** read price, in bnb wei per charge byte */
    readPrice: string;
    /** free read quota, in byte */
    freeReadQuota: Long;
    /** store price, in bnb wei per charge byte */
    storePrice: string;
}
export interface SpStoragePriceProtoMsg {
    typeUrl: "/greenfield.sp.SpStoragePrice";
    value: Uint8Array;
}
/** storage price of a specific sp */
export interface SpStoragePriceAmino {
    /** sp id */
    sp_id?: number;
    /** update time, unix timestamp in seconds */
    update_time_sec?: string;
    /** read price, in bnb wei per charge byte */
    read_price?: string;
    /** free read quota, in byte */
    free_read_quota?: string;
    /** store price, in bnb wei per charge byte */
    store_price?: string;
}
export interface SpStoragePriceAminoMsg {
    type: "/greenfield.sp.SpStoragePrice";
    value: SpStoragePriceAmino;
}
/** storage price of a specific sp */
export interface SpStoragePriceSDKType {
    sp_id: number;
    update_time_sec: Long;
    read_price: string;
    free_read_quota: Long;
    store_price: string;
}
/** global sp store price, the price for all sps */
export interface GlobalSpStorePrice {
    /** update time, unix timestamp in seconds */
    updateTimeSec: Long;
    /** read price, in bnb wei per charge byte */
    readPrice: string;
    /** primary store price, in bnb wei per charge byte */
    primaryStorePrice: string;
    /** secondary store price, in bnb wei per charge byte */
    secondaryStorePrice: string;
}
export interface GlobalSpStorePriceProtoMsg {
    typeUrl: "/greenfield.sp.GlobalSpStorePrice";
    value: Uint8Array;
}
/** global sp store price, the price for all sps */
export interface GlobalSpStorePriceAmino {
    /** update time, unix timestamp in seconds */
    update_time_sec?: string;
    /** read price, in bnb wei per charge byte */
    read_price?: string;
    /** primary store price, in bnb wei per charge byte */
    primary_store_price?: string;
    /** secondary store price, in bnb wei per charge byte */
    secondary_store_price?: string;
}
export interface GlobalSpStorePriceAminoMsg {
    type: "/greenfield.sp.GlobalSpStorePrice";
    value: GlobalSpStorePriceAmino;
}
/** global sp store price, the price for all sps */
export interface GlobalSpStorePriceSDKType {
    update_time_sec: Long;
    read_price: string;
    primary_store_price: string;
    secondary_store_price: string;
}
export interface SpMaintenanceStats {
    records: MaintenanceRecord[];
}
export interface SpMaintenanceStatsProtoMsg {
    typeUrl: "/greenfield.sp.SpMaintenanceStats";
    value: Uint8Array;
}
export interface SpMaintenanceStatsAmino {
    records?: MaintenanceRecordAmino[];
}
export interface SpMaintenanceStatsAminoMsg {
    type: "/greenfield.sp.SpMaintenanceStats";
    value: SpMaintenanceStatsAmino;
}
export interface SpMaintenanceStatsSDKType {
    records: MaintenanceRecordSDKType[];
}
/** MaintenanceRecord is to keep track of every time a sp request to be in Maintenance mode */
export interface MaintenanceRecord {
    /** block height that request to be in Maintenance mode */
    height: Long;
    /** request duration */
    requestDuration: Long;
    /** actual duration */
    actualDuration: Long;
    /** request timestamp */
    requestAt: Long;
}
export interface MaintenanceRecordProtoMsg {
    typeUrl: "/greenfield.sp.MaintenanceRecord";
    value: Uint8Array;
}
/** MaintenanceRecord is to keep track of every time a sp request to be in Maintenance mode */
export interface MaintenanceRecordAmino {
    /** block height that request to be in Maintenance mode */
    height?: string;
    /** request duration */
    request_duration?: string;
    /** actual duration */
    actual_duration?: string;
    /** request timestamp */
    request_at?: string;
}
export interface MaintenanceRecordAminoMsg {
    type: "/greenfield.sp.MaintenanceRecord";
    value: MaintenanceRecordAmino;
}
/** MaintenanceRecord is to keep track of every time a sp request to be in Maintenance mode */
export interface MaintenanceRecordSDKType {
    height: Long;
    request_duration: Long;
    actual_duration: Long;
    request_at: Long;
}
export declare const Description: {
    typeUrl: string;
    encode(message: Description, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Description;
    fromJSON(object: any): Description;
    toJSON(message: Description): unknown;
    fromPartial<I extends {
        moniker?: string;
        identity?: string;
        website?: string;
        securityContact?: string;
        details?: string;
    } & {
        moniker?: string;
        identity?: string;
        website?: string;
        securityContact?: string;
        details?: string;
    } & Record<Exclude<keyof I, keyof Description>, never>>(object: I): Description;
    fromSDK(object: DescriptionSDKType): Description;
    toSDK(message: Description): DescriptionSDKType;
    fromAmino(object: DescriptionAmino): Description;
    toAmino(message: Description): DescriptionAmino;
    fromAminoMsg(object: DescriptionAminoMsg): Description;
    fromProtoMsg(message: DescriptionProtoMsg): Description;
    toProto(message: Description): Uint8Array;
    toProtoMsg(message: Description): DescriptionProtoMsg;
};
export declare const StorageProvider: {
    typeUrl: string;
    encode(message: StorageProvider, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StorageProvider;
    fromJSON(object: any): StorageProvider;
    toJSON(message: StorageProvider): unknown;
    fromPartial<I extends {
        id?: number;
        operatorAddress?: string;
        fundingAddress?: string;
        sealAddress?: string;
        approvalAddress?: string;
        gcAddress?: string;
        maintenanceAddress?: string;
        totalDeposit?: string;
        status?: Status;
        endpoint?: string;
        description?: {
            moniker?: string;
            identity?: string;
            website?: string;
            securityContact?: string;
            details?: string;
        };
        blsKey?: Uint8Array;
    } & {
        id?: number;
        operatorAddress?: string;
        fundingAddress?: string;
        sealAddress?: string;
        approvalAddress?: string;
        gcAddress?: string;
        maintenanceAddress?: string;
        totalDeposit?: string;
        status?: Status;
        endpoint?: string;
        description?: {
            moniker?: string;
            identity?: string;
            website?: string;
            securityContact?: string;
            details?: string;
        } & {
            moniker?: string;
            identity?: string;
            website?: string;
            securityContact?: string;
            details?: string;
        } & Record<Exclude<keyof I["description"], keyof Description>, never>;
        blsKey?: Uint8Array;
    } & Record<Exclude<keyof I, keyof StorageProvider>, never>>(object: I): StorageProvider;
    fromSDK(object: StorageProviderSDKType): StorageProvider;
    toSDK(message: StorageProvider): StorageProviderSDKType;
    fromAmino(object: StorageProviderAmino): StorageProvider;
    toAmino(message: StorageProvider): StorageProviderAmino;
    fromAminoMsg(object: StorageProviderAminoMsg): StorageProvider;
    fromProtoMsg(message: StorageProviderProtoMsg): StorageProvider;
    toProto(message: StorageProvider): Uint8Array;
    toProtoMsg(message: StorageProvider): StorageProviderProtoMsg;
};
export declare const RewardInfo: {
    typeUrl: string;
    encode(message: RewardInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RewardInfo;
    fromJSON(object: any): RewardInfo;
    toJSON(message: RewardInfo): unknown;
    fromPartial<I extends {
        address?: string;
        amount?: {
            denom?: string;
            amount?: string;
        };
    } & {
        address?: string;
        amount?: {
            denom?: string;
            amount?: string;
        } & {
            denom?: string;
            amount?: string;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>;
    } & Record<Exclude<keyof I, keyof RewardInfo>, never>>(object: I): RewardInfo;
    fromSDK(object: RewardInfoSDKType): RewardInfo;
    toSDK(message: RewardInfo): RewardInfoSDKType;
    fromAmino(object: RewardInfoAmino): RewardInfo;
    toAmino(message: RewardInfo): RewardInfoAmino;
    fromAminoMsg(object: RewardInfoAminoMsg): RewardInfo;
    fromProtoMsg(message: RewardInfoProtoMsg): RewardInfo;
    toProto(message: RewardInfo): Uint8Array;
    toProtoMsg(message: RewardInfo): RewardInfoProtoMsg;
};
export declare const SpStoragePrice: {
    typeUrl: string;
    encode(message: SpStoragePrice, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SpStoragePrice;
    fromJSON(object: any): SpStoragePrice;
    toJSON(message: SpStoragePrice): unknown;
    fromPartial<I extends {
        spId?: number;
        updateTimeSec?: string | number | Long.Long;
        readPrice?: string;
        freeReadQuota?: string | number | Long.Long;
        storePrice?: string;
    } & {
        spId?: number;
        updateTimeSec?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["updateTimeSec"], keyof Long.Long>, never>);
        readPrice?: string;
        freeReadQuota?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["freeReadQuota"], keyof Long.Long>, never>);
        storePrice?: string;
    } & Record<Exclude<keyof I, keyof SpStoragePrice>, never>>(object: I): SpStoragePrice;
    fromSDK(object: SpStoragePriceSDKType): SpStoragePrice;
    toSDK(message: SpStoragePrice): SpStoragePriceSDKType;
    fromAmino(object: SpStoragePriceAmino): SpStoragePrice;
    toAmino(message: SpStoragePrice): SpStoragePriceAmino;
    fromAminoMsg(object: SpStoragePriceAminoMsg): SpStoragePrice;
    fromProtoMsg(message: SpStoragePriceProtoMsg): SpStoragePrice;
    toProto(message: SpStoragePrice): Uint8Array;
    toProtoMsg(message: SpStoragePrice): SpStoragePriceProtoMsg;
};
export declare const GlobalSpStorePrice: {
    typeUrl: string;
    encode(message: GlobalSpStorePrice, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GlobalSpStorePrice;
    fromJSON(object: any): GlobalSpStorePrice;
    toJSON(message: GlobalSpStorePrice): unknown;
    fromPartial<I extends {
        updateTimeSec?: string | number | Long.Long;
        readPrice?: string;
        primaryStorePrice?: string;
        secondaryStorePrice?: string;
    } & {
        updateTimeSec?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["updateTimeSec"], keyof Long.Long>, never>);
        readPrice?: string;
        primaryStorePrice?: string;
        secondaryStorePrice?: string;
    } & Record<Exclude<keyof I, keyof GlobalSpStorePrice>, never>>(object: I): GlobalSpStorePrice;
    fromSDK(object: GlobalSpStorePriceSDKType): GlobalSpStorePrice;
    toSDK(message: GlobalSpStorePrice): GlobalSpStorePriceSDKType;
    fromAmino(object: GlobalSpStorePriceAmino): GlobalSpStorePrice;
    toAmino(message: GlobalSpStorePrice): GlobalSpStorePriceAmino;
    fromAminoMsg(object: GlobalSpStorePriceAminoMsg): GlobalSpStorePrice;
    fromProtoMsg(message: GlobalSpStorePriceProtoMsg): GlobalSpStorePrice;
    toProto(message: GlobalSpStorePrice): Uint8Array;
    toProtoMsg(message: GlobalSpStorePrice): GlobalSpStorePriceProtoMsg;
};
export declare const SpMaintenanceStats: {
    typeUrl: string;
    encode(message: SpMaintenanceStats, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SpMaintenanceStats;
    fromJSON(object: any): SpMaintenanceStats;
    toJSON(message: SpMaintenanceStats): unknown;
    fromPartial<I extends {
        records?: {
            height?: string | number | Long.Long;
            requestDuration?: string | number | Long.Long;
            actualDuration?: string | number | Long.Long;
            requestAt?: string | number | Long.Long;
        }[];
    } & {
        records?: {
            height?: string | number | Long.Long;
            requestDuration?: string | number | Long.Long;
            actualDuration?: string | number | Long.Long;
            requestAt?: string | number | Long.Long;
        }[] & ({
            height?: string | number | Long.Long;
            requestDuration?: string | number | Long.Long;
            actualDuration?: string | number | Long.Long;
            requestAt?: string | number | Long.Long;
        } & {
            height?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["records"][number]["height"], keyof Long.Long>, never>);
            requestDuration?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["records"][number]["requestDuration"], keyof Long.Long>, never>);
            actualDuration?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["records"][number]["actualDuration"], keyof Long.Long>, never>);
            requestAt?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["records"][number]["requestAt"], keyof Long.Long>, never>);
        } & Record<Exclude<keyof I["records"][number], keyof MaintenanceRecord>, never>)[] & Record<Exclude<keyof I["records"], keyof {
            height?: string | number | Long.Long;
            requestDuration?: string | number | Long.Long;
            actualDuration?: string | number | Long.Long;
            requestAt?: string | number | Long.Long;
        }[]>, never>;
    } & Record<Exclude<keyof I, "records">, never>>(object: I): SpMaintenanceStats;
    fromSDK(object: SpMaintenanceStatsSDKType): SpMaintenanceStats;
    toSDK(message: SpMaintenanceStats): SpMaintenanceStatsSDKType;
    fromAmino(object: SpMaintenanceStatsAmino): SpMaintenanceStats;
    toAmino(message: SpMaintenanceStats): SpMaintenanceStatsAmino;
    fromAminoMsg(object: SpMaintenanceStatsAminoMsg): SpMaintenanceStats;
    fromProtoMsg(message: SpMaintenanceStatsProtoMsg): SpMaintenanceStats;
    toProto(message: SpMaintenanceStats): Uint8Array;
    toProtoMsg(message: SpMaintenanceStats): SpMaintenanceStatsProtoMsg;
};
export declare const MaintenanceRecord: {
    typeUrl: string;
    encode(message: MaintenanceRecord, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MaintenanceRecord;
    fromJSON(object: any): MaintenanceRecord;
    toJSON(message: MaintenanceRecord): unknown;
    fromPartial<I extends {
        height?: string | number | Long.Long;
        requestDuration?: string | number | Long.Long;
        actualDuration?: string | number | Long.Long;
        requestAt?: string | number | Long.Long;
    } & {
        height?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["height"], keyof Long.Long>, never>);
        requestDuration?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["requestDuration"], keyof Long.Long>, never>);
        actualDuration?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["actualDuration"], keyof Long.Long>, never>);
        requestAt?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["requestAt"], keyof Long.Long>, never>);
    } & Record<Exclude<keyof I, keyof MaintenanceRecord>, never>>(object: I): MaintenanceRecord;
    fromSDK(object: MaintenanceRecordSDKType): MaintenanceRecord;
    toSDK(message: MaintenanceRecord): MaintenanceRecordSDKType;
    fromAmino(object: MaintenanceRecordAmino): MaintenanceRecord;
    toAmino(message: MaintenanceRecord): MaintenanceRecordAmino;
    fromAminoMsg(object: MaintenanceRecordAminoMsg): MaintenanceRecord;
    fromProtoMsg(message: MaintenanceRecordProtoMsg): MaintenanceRecord;
    toProto(message: MaintenanceRecord): Uint8Array;
    toProtoMsg(message: MaintenanceRecord): MaintenanceRecordProtoMsg;
};
