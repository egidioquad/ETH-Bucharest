"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventUpdateStorageProviderStatus = exports.EventGlobalSpStorePriceUpdate = exports.EventSpStoragePriceUpdate = exports.EventDeposit = exports.EventEditStorageProvider = exports.EventCreateStorageProvider = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const coin_1 = require("../../cosmos/base/v1beta1/coin");
const types_1 = require("./types");
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
const math_1 = require("@cosmjs/math");
exports.protobufPackage = "greenfield.sp";
function createBaseEventCreateStorageProvider() {
    return {
        spId: 0,
        spAddress: "",
        fundingAddress: "",
        sealAddress: "",
        approvalAddress: "",
        gcAddress: "",
        maintenanceAddress: "",
        endpoint: "",
        totalDeposit: undefined,
        status: 0,
        description: types_1.Description.fromPartial({}),
        blsKey: ""
    };
}
exports.EventCreateStorageProvider = {
    typeUrl: "/greenfield.sp.EventCreateStorageProvider",
    encode(message, writer = _m0.Writer.create()) {
        if (message.spId !== 0) {
            writer.uint32(8).uint32(message.spId);
        }
        if (message.spAddress !== "") {
            writer.uint32(18).string(message.spAddress);
        }
        if (message.fundingAddress !== "") {
            writer.uint32(26).string(message.fundingAddress);
        }
        if (message.sealAddress !== "") {
            writer.uint32(34).string(message.sealAddress);
        }
        if (message.approvalAddress !== "") {
            writer.uint32(42).string(message.approvalAddress);
        }
        if (message.gcAddress !== "") {
            writer.uint32(50).string(message.gcAddress);
        }
        if (message.maintenanceAddress !== "") {
            writer.uint32(58).string(message.maintenanceAddress);
        }
        if (message.endpoint !== "") {
            writer.uint32(66).string(message.endpoint);
        }
        if (message.totalDeposit !== undefined) {
            coin_1.Coin.encode(message.totalDeposit, writer.uint32(74).fork()).ldelim();
        }
        if (message.status !== 0) {
            writer.uint32(80).int32(message.status);
        }
        if (message.description !== undefined) {
            types_1.Description.encode(message.description, writer.uint32(90).fork()).ldelim();
        }
        if (message.blsKey !== "") {
            writer.uint32(98).string(message.blsKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCreateStorageProvider();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spId = reader.uint32();
                    break;
                case 2:
                    message.spAddress = reader.string();
                    break;
                case 3:
                    message.fundingAddress = reader.string();
                    break;
                case 4:
                    message.sealAddress = reader.string();
                    break;
                case 5:
                    message.approvalAddress = reader.string();
                    break;
                case 6:
                    message.gcAddress = reader.string();
                    break;
                case 7:
                    message.maintenanceAddress = reader.string();
                    break;
                case 8:
                    message.endpoint = reader.string();
                    break;
                case 9:
                    message.totalDeposit = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.status = reader.int32();
                    break;
                case 11:
                    message.description = types_1.Description.decode(reader, reader.uint32());
                    break;
                case 12:
                    message.blsKey = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            spId: (0, helpers_1.isSet)(object.spId) ? Number(object.spId) : 0,
            spAddress: (0, helpers_1.isSet)(object.spAddress) ? String(object.spAddress) : "",
            fundingAddress: (0, helpers_1.isSet)(object.fundingAddress) ? String(object.fundingAddress) : "",
            sealAddress: (0, helpers_1.isSet)(object.sealAddress) ? String(object.sealAddress) : "",
            approvalAddress: (0, helpers_1.isSet)(object.approvalAddress) ? String(object.approvalAddress) : "",
            gcAddress: (0, helpers_1.isSet)(object.gcAddress) ? String(object.gcAddress) : "",
            maintenanceAddress: (0, helpers_1.isSet)(object.maintenanceAddress) ? String(object.maintenanceAddress) : "",
            endpoint: (0, helpers_1.isSet)(object.endpoint) ? String(object.endpoint) : "",
            totalDeposit: (0, helpers_1.isSet)(object.totalDeposit) ? coin_1.Coin.fromJSON(object.totalDeposit) : undefined,
            status: (0, helpers_1.isSet)(object.status) ? (0, types_1.statusFromJSON)(object.status) : -1,
            description: (0, helpers_1.isSet)(object.description) ? types_1.Description.fromJSON(object.description) : undefined,
            blsKey: (0, helpers_1.isSet)(object.blsKey) ? String(object.blsKey) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.spId !== undefined && (obj.spId = Math.round(message.spId));
        message.spAddress !== undefined && (obj.spAddress = message.spAddress);
        message.fundingAddress !== undefined && (obj.fundingAddress = message.fundingAddress);
        message.sealAddress !== undefined && (obj.sealAddress = message.sealAddress);
        message.approvalAddress !== undefined && (obj.approvalAddress = message.approvalAddress);
        message.gcAddress !== undefined && (obj.gcAddress = message.gcAddress);
        message.maintenanceAddress !== undefined && (obj.maintenanceAddress = message.maintenanceAddress);
        message.endpoint !== undefined && (obj.endpoint = message.endpoint);
        message.totalDeposit !== undefined && (obj.totalDeposit = message.totalDeposit ? coin_1.Coin.toJSON(message.totalDeposit) : undefined);
        message.status !== undefined && (obj.status = (0, types_1.statusToJSON)(message.status));
        message.description !== undefined && (obj.description = message.description ? types_1.Description.toJSON(message.description) : undefined);
        message.blsKey !== undefined && (obj.blsKey = message.blsKey);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCreateStorageProvider();
        message.spId = object.spId ?? 0;
        message.spAddress = object.spAddress ?? "";
        message.fundingAddress = object.fundingAddress ?? "";
        message.sealAddress = object.sealAddress ?? "";
        message.approvalAddress = object.approvalAddress ?? "";
        message.gcAddress = object.gcAddress ?? "";
        message.maintenanceAddress = object.maintenanceAddress ?? "";
        message.endpoint = object.endpoint ?? "";
        message.totalDeposit = object.totalDeposit !== undefined && object.totalDeposit !== null ? coin_1.Coin.fromPartial(object.totalDeposit) : undefined;
        message.status = object.status ?? 0;
        message.description = object.description !== undefined && object.description !== null ? types_1.Description.fromPartial(object.description) : undefined;
        message.blsKey = object.blsKey ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            spId: object?.sp_id,
            spAddress: object?.sp_address,
            fundingAddress: object?.funding_address,
            sealAddress: object?.seal_address,
            approvalAddress: object?.approval_address,
            gcAddress: object?.gc_address,
            maintenanceAddress: object?.maintenance_address,
            endpoint: object?.endpoint,
            totalDeposit: object.total_deposit ? coin_1.Coin.fromSDK(object.total_deposit) : undefined,
            status: (0, helpers_1.isSet)(object.status) ? (0, types_1.statusFromJSON)(object.status) : -1,
            description: object.description ? types_1.Description.fromSDK(object.description) : undefined,
            blsKey: object?.bls_key
        };
    },
    toSDK(message) {
        const obj = {};
        obj.sp_id = message.spId;
        obj.sp_address = message.spAddress;
        obj.funding_address = message.fundingAddress;
        obj.seal_address = message.sealAddress;
        obj.approval_address = message.approvalAddress;
        obj.gc_address = message.gcAddress;
        obj.maintenance_address = message.maintenanceAddress;
        obj.endpoint = message.endpoint;
        message.totalDeposit !== undefined && (obj.total_deposit = message.totalDeposit ? coin_1.Coin.toSDK(message.totalDeposit) : undefined);
        message.status !== undefined && (obj.status = (0, types_1.statusToJSON)(message.status));
        message.description !== undefined && (obj.description = message.description ? types_1.Description.toSDK(message.description) : undefined);
        obj.bls_key = message.blsKey;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventCreateStorageProvider();
        if (object.sp_id !== undefined && object.sp_id !== null) {
            message.spId = object.sp_id;
        }
        if (object.sp_address !== undefined && object.sp_address !== null) {
            message.spAddress = object.sp_address;
        }
        if (object.funding_address !== undefined && object.funding_address !== null) {
            message.fundingAddress = object.funding_address;
        }
        if (object.seal_address !== undefined && object.seal_address !== null) {
            message.sealAddress = object.seal_address;
        }
        if (object.approval_address !== undefined && object.approval_address !== null) {
            message.approvalAddress = object.approval_address;
        }
        if (object.gc_address !== undefined && object.gc_address !== null) {
            message.gcAddress = object.gc_address;
        }
        if (object.maintenance_address !== undefined && object.maintenance_address !== null) {
            message.maintenanceAddress = object.maintenance_address;
        }
        if (object.endpoint !== undefined && object.endpoint !== null) {
            message.endpoint = object.endpoint;
        }
        if (object.total_deposit !== undefined && object.total_deposit !== null) {
            message.totalDeposit = coin_1.Coin.fromAmino(object.total_deposit);
        }
        if (object.status !== undefined && object.status !== null) {
            message.status = (0, types_1.statusFromJSON)(object.status);
        }
        if (object.description !== undefined && object.description !== null) {
            message.description = types_1.Description.fromAmino(object.description);
        }
        if (object.bls_key !== undefined && object.bls_key !== null) {
            message.blsKey = object.bls_key;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.sp_id = message.spId;
        obj.sp_address = message.spAddress;
        obj.funding_address = message.fundingAddress;
        obj.seal_address = message.sealAddress;
        obj.approval_address = message.approvalAddress;
        obj.gc_address = message.gcAddress;
        obj.maintenance_address = message.maintenanceAddress;
        obj.endpoint = message.endpoint;
        obj.total_deposit = message.totalDeposit ? coin_1.Coin.toAmino(message.totalDeposit) : undefined;
        obj.status = (0, types_1.statusToJSON)(message.status);
        obj.description = message.description ? types_1.Description.toAmino(message.description) : undefined;
        obj.bls_key = message.blsKey;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventCreateStorageProvider.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventCreateStorageProvider.decode(message.value);
    },
    toProto(message) {
        return exports.EventCreateStorageProvider.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.EventCreateStorageProvider",
            value: exports.EventCreateStorageProvider.encode(message).finish()
        };
    }
};
function createBaseEventEditStorageProvider() {
    return {
        spId: 0,
        spAddress: "",
        endpoint: "",
        description: types_1.Description.fromPartial({}),
        sealAddress: "",
        approvalAddress: "",
        gcAddress: "",
        maintenanceAddress: "",
        blsKey: ""
    };
}
exports.EventEditStorageProvider = {
    typeUrl: "/greenfield.sp.EventEditStorageProvider",
    encode(message, writer = _m0.Writer.create()) {
        if (message.spId !== 0) {
            writer.uint32(8).uint32(message.spId);
        }
        if (message.spAddress !== "") {
            writer.uint32(18).string(message.spAddress);
        }
        if (message.endpoint !== "") {
            writer.uint32(26).string(message.endpoint);
        }
        if (message.description !== undefined) {
            types_1.Description.encode(message.description, writer.uint32(34).fork()).ldelim();
        }
        if (message.sealAddress !== "") {
            writer.uint32(42).string(message.sealAddress);
        }
        if (message.approvalAddress !== "") {
            writer.uint32(50).string(message.approvalAddress);
        }
        if (message.gcAddress !== "") {
            writer.uint32(58).string(message.gcAddress);
        }
        if (message.maintenanceAddress !== "") {
            writer.uint32(66).string(message.maintenanceAddress);
        }
        if (message.blsKey !== "") {
            writer.uint32(74).string(message.blsKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventEditStorageProvider();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spId = reader.uint32();
                    break;
                case 2:
                    message.spAddress = reader.string();
                    break;
                case 3:
                    message.endpoint = reader.string();
                    break;
                case 4:
                    message.description = types_1.Description.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.sealAddress = reader.string();
                    break;
                case 6:
                    message.approvalAddress = reader.string();
                    break;
                case 7:
                    message.gcAddress = reader.string();
                    break;
                case 8:
                    message.maintenanceAddress = reader.string();
                    break;
                case 9:
                    message.blsKey = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            spId: (0, helpers_1.isSet)(object.spId) ? Number(object.spId) : 0,
            spAddress: (0, helpers_1.isSet)(object.spAddress) ? String(object.spAddress) : "",
            endpoint: (0, helpers_1.isSet)(object.endpoint) ? String(object.endpoint) : "",
            description: (0, helpers_1.isSet)(object.description) ? types_1.Description.fromJSON(object.description) : undefined,
            sealAddress: (0, helpers_1.isSet)(object.sealAddress) ? String(object.sealAddress) : "",
            approvalAddress: (0, helpers_1.isSet)(object.approvalAddress) ? String(object.approvalAddress) : "",
            gcAddress: (0, helpers_1.isSet)(object.gcAddress) ? String(object.gcAddress) : "",
            maintenanceAddress: (0, helpers_1.isSet)(object.maintenanceAddress) ? String(object.maintenanceAddress) : "",
            blsKey: (0, helpers_1.isSet)(object.blsKey) ? String(object.blsKey) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.spId !== undefined && (obj.spId = Math.round(message.spId));
        message.spAddress !== undefined && (obj.spAddress = message.spAddress);
        message.endpoint !== undefined && (obj.endpoint = message.endpoint);
        message.description !== undefined && (obj.description = message.description ? types_1.Description.toJSON(message.description) : undefined);
        message.sealAddress !== undefined && (obj.sealAddress = message.sealAddress);
        message.approvalAddress !== undefined && (obj.approvalAddress = message.approvalAddress);
        message.gcAddress !== undefined && (obj.gcAddress = message.gcAddress);
        message.maintenanceAddress !== undefined && (obj.maintenanceAddress = message.maintenanceAddress);
        message.blsKey !== undefined && (obj.blsKey = message.blsKey);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventEditStorageProvider();
        message.spId = object.spId ?? 0;
        message.spAddress = object.spAddress ?? "";
        message.endpoint = object.endpoint ?? "";
        message.description = object.description !== undefined && object.description !== null ? types_1.Description.fromPartial(object.description) : undefined;
        message.sealAddress = object.sealAddress ?? "";
        message.approvalAddress = object.approvalAddress ?? "";
        message.gcAddress = object.gcAddress ?? "";
        message.maintenanceAddress = object.maintenanceAddress ?? "";
        message.blsKey = object.blsKey ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            spId: object?.sp_id,
            spAddress: object?.sp_address,
            endpoint: object?.endpoint,
            description: object.description ? types_1.Description.fromSDK(object.description) : undefined,
            sealAddress: object?.seal_address,
            approvalAddress: object?.approval_address,
            gcAddress: object?.gc_address,
            maintenanceAddress: object?.maintenance_address,
            blsKey: object?.bls_key
        };
    },
    toSDK(message) {
        const obj = {};
        obj.sp_id = message.spId;
        obj.sp_address = message.spAddress;
        obj.endpoint = message.endpoint;
        message.description !== undefined && (obj.description = message.description ? types_1.Description.toSDK(message.description) : undefined);
        obj.seal_address = message.sealAddress;
        obj.approval_address = message.approvalAddress;
        obj.gc_address = message.gcAddress;
        obj.maintenance_address = message.maintenanceAddress;
        obj.bls_key = message.blsKey;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventEditStorageProvider();
        if (object.sp_id !== undefined && object.sp_id !== null) {
            message.spId = object.sp_id;
        }
        if (object.sp_address !== undefined && object.sp_address !== null) {
            message.spAddress = object.sp_address;
        }
        if (object.endpoint !== undefined && object.endpoint !== null) {
            message.endpoint = object.endpoint;
        }
        if (object.description !== undefined && object.description !== null) {
            message.description = types_1.Description.fromAmino(object.description);
        }
        if (object.seal_address !== undefined && object.seal_address !== null) {
            message.sealAddress = object.seal_address;
        }
        if (object.approval_address !== undefined && object.approval_address !== null) {
            message.approvalAddress = object.approval_address;
        }
        if (object.gc_address !== undefined && object.gc_address !== null) {
            message.gcAddress = object.gc_address;
        }
        if (object.maintenance_address !== undefined && object.maintenance_address !== null) {
            message.maintenanceAddress = object.maintenance_address;
        }
        if (object.bls_key !== undefined && object.bls_key !== null) {
            message.blsKey = object.bls_key;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.sp_id = message.spId;
        obj.sp_address = message.spAddress;
        obj.endpoint = message.endpoint;
        obj.description = message.description ? types_1.Description.toAmino(message.description) : undefined;
        obj.seal_address = message.sealAddress;
        obj.approval_address = message.approvalAddress;
        obj.gc_address = message.gcAddress;
        obj.maintenance_address = message.maintenanceAddress;
        obj.bls_key = message.blsKey;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventEditStorageProvider.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventEditStorageProvider.decode(message.value);
    },
    toProto(message) {
        return exports.EventEditStorageProvider.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.EventEditStorageProvider",
            value: exports.EventEditStorageProvider.encode(message).finish()
        };
    }
};
function createBaseEventDeposit() {
    return {
        fundingAddress: "",
        deposit: "",
        totalDeposit: ""
    };
}
exports.EventDeposit = {
    typeUrl: "/greenfield.sp.EventDeposit",
    encode(message, writer = _m0.Writer.create()) {
        if (message.fundingAddress !== "") {
            writer.uint32(10).string(message.fundingAddress);
        }
        if (message.deposit !== "") {
            writer.uint32(18).string(message.deposit);
        }
        if (message.totalDeposit !== "") {
            writer.uint32(26).string(message.totalDeposit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDeposit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fundingAddress = reader.string();
                    break;
                case 2:
                    message.deposit = reader.string();
                    break;
                case 3:
                    message.totalDeposit = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            fundingAddress: (0, helpers_1.isSet)(object.fundingAddress) ? String(object.fundingAddress) : "",
            deposit: (0, helpers_1.isSet)(object.deposit) ? String(object.deposit) : "",
            totalDeposit: (0, helpers_1.isSet)(object.totalDeposit) ? String(object.totalDeposit) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.fundingAddress !== undefined && (obj.fundingAddress = message.fundingAddress);
        message.deposit !== undefined && (obj.deposit = message.deposit);
        message.totalDeposit !== undefined && (obj.totalDeposit = message.totalDeposit);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventDeposit();
        message.fundingAddress = object.fundingAddress ?? "";
        message.deposit = object.deposit ?? "";
        message.totalDeposit = object.totalDeposit ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            fundingAddress: object?.funding_address,
            deposit: object?.deposit,
            totalDeposit: object?.total_deposit
        };
    },
    toSDK(message) {
        const obj = {};
        obj.funding_address = message.fundingAddress;
        obj.deposit = message.deposit;
        obj.total_deposit = message.totalDeposit;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventDeposit();
        if (object.funding_address !== undefined && object.funding_address !== null) {
            message.fundingAddress = object.funding_address;
        }
        if (object.deposit !== undefined && object.deposit !== null) {
            message.deposit = object.deposit;
        }
        if (object.total_deposit !== undefined && object.total_deposit !== null) {
            message.totalDeposit = object.total_deposit;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.funding_address = message.fundingAddress;
        obj.deposit = message.deposit;
        obj.total_deposit = message.totalDeposit;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventDeposit.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventDeposit.decode(message.value);
    },
    toProto(message) {
        return exports.EventDeposit.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.EventDeposit",
            value: exports.EventDeposit.encode(message).finish()
        };
    }
};
function createBaseEventSpStoragePriceUpdate() {
    return {
        spId: 0,
        updateTimeSec: helpers_1.Long.ZERO,
        readPrice: "",
        freeReadQuota: helpers_1.Long.UZERO,
        storePrice: ""
    };
}
exports.EventSpStoragePriceUpdate = {
    typeUrl: "/greenfield.sp.EventSpStoragePriceUpdate",
    encode(message, writer = _m0.Writer.create()) {
        if (message.spId !== 0) {
            writer.uint32(8).uint32(message.spId);
        }
        if (!message.updateTimeSec.isZero()) {
            writer.uint32(16).int64(message.updateTimeSec);
        }
        if (message.readPrice !== "") {
            writer.uint32(26).string(math_1.Decimal.fromUserInput(message.readPrice, 18).atomics);
        }
        if (!message.freeReadQuota.isZero()) {
            writer.uint32(32).uint64(message.freeReadQuota);
        }
        if (message.storePrice !== "") {
            writer.uint32(42).string(math_1.Decimal.fromUserInput(message.storePrice, 18).atomics);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventSpStoragePriceUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spId = reader.uint32();
                    break;
                case 2:
                    message.updateTimeSec = reader.int64();
                    break;
                case 3:
                    message.readPrice = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                case 4:
                    message.freeReadQuota = reader.uint64();
                    break;
                case 5:
                    message.storePrice = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            spId: (0, helpers_1.isSet)(object.spId) ? Number(object.spId) : 0,
            updateTimeSec: (0, helpers_1.isSet)(object.updateTimeSec) ? helpers_1.Long.fromValue(object.updateTimeSec) : helpers_1.Long.ZERO,
            readPrice: (0, helpers_1.isSet)(object.readPrice) ? String(object.readPrice) : "",
            freeReadQuota: (0, helpers_1.isSet)(object.freeReadQuota) ? helpers_1.Long.fromValue(object.freeReadQuota) : helpers_1.Long.UZERO,
            storePrice: (0, helpers_1.isSet)(object.storePrice) ? String(object.storePrice) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.spId !== undefined && (obj.spId = Math.round(message.spId));
        message.updateTimeSec !== undefined && (obj.updateTimeSec = (message.updateTimeSec || helpers_1.Long.ZERO).toString());
        message.readPrice !== undefined && (obj.readPrice = message.readPrice);
        message.freeReadQuota !== undefined && (obj.freeReadQuota = (message.freeReadQuota || helpers_1.Long.UZERO).toString());
        message.storePrice !== undefined && (obj.storePrice = message.storePrice);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventSpStoragePriceUpdate();
        message.spId = object.spId ?? 0;
        message.updateTimeSec = object.updateTimeSec !== undefined && object.updateTimeSec !== null ? helpers_1.Long.fromValue(object.updateTimeSec) : helpers_1.Long.ZERO;
        message.readPrice = object.readPrice ?? "";
        message.freeReadQuota = object.freeReadQuota !== undefined && object.freeReadQuota !== null ? helpers_1.Long.fromValue(object.freeReadQuota) : helpers_1.Long.UZERO;
        message.storePrice = object.storePrice ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            spId: object?.sp_id,
            updateTimeSec: object?.update_time_sec,
            readPrice: object?.read_price,
            freeReadQuota: object?.free_read_quota,
            storePrice: object?.store_price
        };
    },
    toSDK(message) {
        const obj = {};
        obj.sp_id = message.spId;
        obj.update_time_sec = message.updateTimeSec;
        obj.read_price = message.readPrice;
        obj.free_read_quota = message.freeReadQuota;
        obj.store_price = message.storePrice;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventSpStoragePriceUpdate();
        if (object.sp_id !== undefined && object.sp_id !== null) {
            message.spId = object.sp_id;
        }
        if (object.update_time_sec !== undefined && object.update_time_sec !== null) {
            message.updateTimeSec = helpers_1.Long.fromString(object.update_time_sec);
        }
        if (object.read_price !== undefined && object.read_price !== null) {
            message.readPrice = object.read_price;
        }
        if (object.free_read_quota !== undefined && object.free_read_quota !== null) {
            message.freeReadQuota = helpers_1.Long.fromString(object.free_read_quota);
        }
        if (object.store_price !== undefined && object.store_price !== null) {
            message.storePrice = object.store_price;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.sp_id = message.spId;
        obj.update_time_sec = message.updateTimeSec ? message.updateTimeSec.toString() : undefined;
        obj.read_price = message.readPrice;
        obj.free_read_quota = message.freeReadQuota ? message.freeReadQuota.toString() : undefined;
        obj.store_price = message.storePrice;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventSpStoragePriceUpdate.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventSpStoragePriceUpdate.decode(message.value);
    },
    toProto(message) {
        return exports.EventSpStoragePriceUpdate.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.EventSpStoragePriceUpdate",
            value: exports.EventSpStoragePriceUpdate.encode(message).finish()
        };
    }
};
function createBaseEventGlobalSpStorePriceUpdate() {
    return {
        updateTimeSec: helpers_1.Long.ZERO,
        readPrice: "",
        primaryStorePrice: "",
        secondaryStorePrice: ""
    };
}
exports.EventGlobalSpStorePriceUpdate = {
    typeUrl: "/greenfield.sp.EventGlobalSpStorePriceUpdate",
    encode(message, writer = _m0.Writer.create()) {
        if (!message.updateTimeSec.isZero()) {
            writer.uint32(8).int64(message.updateTimeSec);
        }
        if (message.readPrice !== "") {
            writer.uint32(18).string(math_1.Decimal.fromUserInput(message.readPrice, 18).atomics);
        }
        if (message.primaryStorePrice !== "") {
            writer.uint32(26).string(math_1.Decimal.fromUserInput(message.primaryStorePrice, 18).atomics);
        }
        if (message.secondaryStorePrice !== "") {
            writer.uint32(34).string(math_1.Decimal.fromUserInput(message.secondaryStorePrice, 18).atomics);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventGlobalSpStorePriceUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.updateTimeSec = reader.int64();
                    break;
                case 2:
                    message.readPrice = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                case 3:
                    message.primaryStorePrice = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                case 4:
                    message.secondaryStorePrice = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            updateTimeSec: (0, helpers_1.isSet)(object.updateTimeSec) ? helpers_1.Long.fromValue(object.updateTimeSec) : helpers_1.Long.ZERO,
            readPrice: (0, helpers_1.isSet)(object.readPrice) ? String(object.readPrice) : "",
            primaryStorePrice: (0, helpers_1.isSet)(object.primaryStorePrice) ? String(object.primaryStorePrice) : "",
            secondaryStorePrice: (0, helpers_1.isSet)(object.secondaryStorePrice) ? String(object.secondaryStorePrice) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.updateTimeSec !== undefined && (obj.updateTimeSec = (message.updateTimeSec || helpers_1.Long.ZERO).toString());
        message.readPrice !== undefined && (obj.readPrice = message.readPrice);
        message.primaryStorePrice !== undefined && (obj.primaryStorePrice = message.primaryStorePrice);
        message.secondaryStorePrice !== undefined && (obj.secondaryStorePrice = message.secondaryStorePrice);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventGlobalSpStorePriceUpdate();
        message.updateTimeSec = object.updateTimeSec !== undefined && object.updateTimeSec !== null ? helpers_1.Long.fromValue(object.updateTimeSec) : helpers_1.Long.ZERO;
        message.readPrice = object.readPrice ?? "";
        message.primaryStorePrice = object.primaryStorePrice ?? "";
        message.secondaryStorePrice = object.secondaryStorePrice ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            updateTimeSec: object?.update_time_sec,
            readPrice: object?.read_price,
            primaryStorePrice: object?.primary_store_price,
            secondaryStorePrice: object?.secondary_store_price
        };
    },
    toSDK(message) {
        const obj = {};
        obj.update_time_sec = message.updateTimeSec;
        obj.read_price = message.readPrice;
        obj.primary_store_price = message.primaryStorePrice;
        obj.secondary_store_price = message.secondaryStorePrice;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventGlobalSpStorePriceUpdate();
        if (object.update_time_sec !== undefined && object.update_time_sec !== null) {
            message.updateTimeSec = helpers_1.Long.fromString(object.update_time_sec);
        }
        if (object.read_price !== undefined && object.read_price !== null) {
            message.readPrice = object.read_price;
        }
        if (object.primary_store_price !== undefined && object.primary_store_price !== null) {
            message.primaryStorePrice = object.primary_store_price;
        }
        if (object.secondary_store_price !== undefined && object.secondary_store_price !== null) {
            message.secondaryStorePrice = object.secondary_store_price;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.update_time_sec = message.updateTimeSec ? message.updateTimeSec.toString() : undefined;
        obj.read_price = message.readPrice;
        obj.primary_store_price = message.primaryStorePrice;
        obj.secondary_store_price = message.secondaryStorePrice;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventGlobalSpStorePriceUpdate.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventGlobalSpStorePriceUpdate.decode(message.value);
    },
    toProto(message) {
        return exports.EventGlobalSpStorePriceUpdate.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.EventGlobalSpStorePriceUpdate",
            value: exports.EventGlobalSpStorePriceUpdate.encode(message).finish()
        };
    }
};
function createBaseEventUpdateStorageProviderStatus() {
    return {
        spId: 0,
        spAddress: "",
        preStatus: "",
        newStatus: ""
    };
}
exports.EventUpdateStorageProviderStatus = {
    typeUrl: "/greenfield.sp.EventUpdateStorageProviderStatus",
    encode(message, writer = _m0.Writer.create()) {
        if (message.spId !== 0) {
            writer.uint32(8).uint32(message.spId);
        }
        if (message.spAddress !== "") {
            writer.uint32(18).string(message.spAddress);
        }
        if (message.preStatus !== "") {
            writer.uint32(26).string(message.preStatus);
        }
        if (message.newStatus !== "") {
            writer.uint32(34).string(message.newStatus);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventUpdateStorageProviderStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spId = reader.uint32();
                    break;
                case 2:
                    message.spAddress = reader.string();
                    break;
                case 3:
                    message.preStatus = reader.string();
                    break;
                case 4:
                    message.newStatus = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            spId: (0, helpers_1.isSet)(object.spId) ? Number(object.spId) : 0,
            spAddress: (0, helpers_1.isSet)(object.spAddress) ? String(object.spAddress) : "",
            preStatus: (0, helpers_1.isSet)(object.preStatus) ? String(object.preStatus) : "",
            newStatus: (0, helpers_1.isSet)(object.newStatus) ? String(object.newStatus) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.spId !== undefined && (obj.spId = Math.round(message.spId));
        message.spAddress !== undefined && (obj.spAddress = message.spAddress);
        message.preStatus !== undefined && (obj.preStatus = message.preStatus);
        message.newStatus !== undefined && (obj.newStatus = message.newStatus);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventUpdateStorageProviderStatus();
        message.spId = object.spId ?? 0;
        message.spAddress = object.spAddress ?? "";
        message.preStatus = object.preStatus ?? "";
        message.newStatus = object.newStatus ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            spId: object?.sp_id,
            spAddress: object?.sp_address,
            preStatus: object?.pre_status,
            newStatus: object?.new_status
        };
    },
    toSDK(message) {
        const obj = {};
        obj.sp_id = message.spId;
        obj.sp_address = message.spAddress;
        obj.pre_status = message.preStatus;
        obj.new_status = message.newStatus;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventUpdateStorageProviderStatus();
        if (object.sp_id !== undefined && object.sp_id !== null) {
            message.spId = object.sp_id;
        }
        if (object.sp_address !== undefined && object.sp_address !== null) {
            message.spAddress = object.sp_address;
        }
        if (object.pre_status !== undefined && object.pre_status !== null) {
            message.preStatus = object.pre_status;
        }
        if (object.new_status !== undefined && object.new_status !== null) {
            message.newStatus = object.new_status;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.sp_id = message.spId;
        obj.sp_address = message.spAddress;
        obj.pre_status = message.preStatus;
        obj.new_status = message.newStatus;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventUpdateStorageProviderStatus.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventUpdateStorageProviderStatus.decode(message.value);
    },
    toProto(message) {
        return exports.EventUpdateStorageProviderStatus.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.sp.EventUpdateStorageProviderStatus",
            value: exports.EventUpdateStorageProviderStatus.encode(message).finish()
        };
    }
};
//# sourceMappingURL=events.js.map