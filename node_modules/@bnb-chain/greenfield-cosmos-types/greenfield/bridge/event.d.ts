/// <reference types="long" />
import { Coin, CoinAmino, CoinSDKType } from "../../cosmos/base/v1beta1/coin";
import { Long } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.bridge";
export declare enum RefundReason {
    REFUND_REASON_UNKNOWN = 0,
    REFUND_REASON_INSUFFICIENT_BALANCE = 1,
    REFUND_REASON_FAIL_ACK = 2,
    UNRECOGNIZED = -1
}
export declare const RefundReasonSDKType: typeof RefundReason;
export declare const RefundReasonAmino: typeof RefundReason;
export declare function refundReasonFromJSON(object: any): RefundReason;
export declare function refundReasonToJSON(object: RefundReason): string;
/** EventCrossTransferOut is emitted when a cross chain transfer out tx created */
export interface EventCrossTransferOut {
    /** From addres of the cross chain transfer tx */
    from: string;
    /** To addres of the cross chain transfer tx */
    to: string;
    /** Amount of the cross chain transfer tx */
    amount?: Coin;
    /** Relayer fee of the cross chain transfer tx */
    relayerFee?: Coin;
    /** Sequence of the corresponding cross chain package */
    sequence: Long;
    /** Destination chain id of the cross chain transfer tx */
    destChainId: number;
}
export interface EventCrossTransferOutProtoMsg {
    typeUrl: "/greenfield.bridge.EventCrossTransferOut";
    value: Uint8Array;
}
/** EventCrossTransferOut is emitted when a cross chain transfer out tx created */
export interface EventCrossTransferOutAmino {
    /** From addres of the cross chain transfer tx */
    from?: string;
    /** To addres of the cross chain transfer tx */
    to?: string;
    /** Amount of the cross chain transfer tx */
    amount?: CoinAmino;
    /** Relayer fee of the cross chain transfer tx */
    relayer_fee?: CoinAmino;
    /** Sequence of the corresponding cross chain package */
    sequence?: string;
    /** Destination chain id of the cross chain transfer tx */
    dest_chain_id?: number;
}
export interface EventCrossTransferOutAminoMsg {
    type: "/greenfield.bridge.EventCrossTransferOut";
    value: EventCrossTransferOutAmino;
}
/** EventCrossTransferOut is emitted when a cross chain transfer out tx created */
export interface EventCrossTransferOutSDKType {
    from: string;
    to: string;
    amount?: CoinSDKType;
    relayer_fee?: CoinSDKType;
    sequence: Long;
    dest_chain_id: number;
}
/** EventCrossTransferOutRefund is emitted when a cross chain transfer out tx failed */
export interface EventCrossTransferOutRefund {
    /** Refund address of the failed cross chain transfer tx */
    refundAddress: string;
    /** Amount of the failed cross chain transfer tx */
    amount?: Coin;
    /** Refund reason of the failed cross chain transfer tx */
    refundReason: RefundReason;
    /** Sequence of the corresponding cross chain package */
    sequence: Long;
    /** Destination chain id of the cross chain transfer tx */
    destChainId: number;
}
export interface EventCrossTransferOutRefundProtoMsg {
    typeUrl: "/greenfield.bridge.EventCrossTransferOutRefund";
    value: Uint8Array;
}
/** EventCrossTransferOutRefund is emitted when a cross chain transfer out tx failed */
export interface EventCrossTransferOutRefundAmino {
    /** Refund address of the failed cross chain transfer tx */
    refund_address?: string;
    /** Amount of the failed cross chain transfer tx */
    amount?: CoinAmino;
    /** Refund reason of the failed cross chain transfer tx */
    refund_reason?: RefundReason;
    /** Sequence of the corresponding cross chain package */
    sequence?: string;
    /** Destination chain id of the cross chain transfer tx */
    dest_chain_id?: number;
}
export interface EventCrossTransferOutRefundAminoMsg {
    type: "/greenfield.bridge.EventCrossTransferOutRefund";
    value: EventCrossTransferOutRefundAmino;
}
/** EventCrossTransferOutRefund is emitted when a cross chain transfer out tx failed */
export interface EventCrossTransferOutRefundSDKType {
    refund_address: string;
    amount?: CoinSDKType;
    refund_reason: RefundReason;
    sequence: Long;
    dest_chain_id: number;
}
/** EventCrossTransferIn is emitted when a cross chain transfer in tx happened */
export interface EventCrossTransferIn {
    /** Amount of the cross chain transfer tx */
    amount?: Coin;
    /** Receiver of the cross chain transfer tx */
    receiverAddress: string;
    /** Refund of the cross chain transfer tx in BSC */
    refundAddress: string;
    /** Sequence of the corresponding cross chain package */
    sequence: Long;
    /** Source chain id of the cross chain transfer tx */
    srcChainId: number;
}
export interface EventCrossTransferInProtoMsg {
    typeUrl: "/greenfield.bridge.EventCrossTransferIn";
    value: Uint8Array;
}
/** EventCrossTransferIn is emitted when a cross chain transfer in tx happened */
export interface EventCrossTransferInAmino {
    /** Amount of the cross chain transfer tx */
    amount?: CoinAmino;
    /** Receiver of the cross chain transfer tx */
    receiver_address?: string;
    /** Refund of the cross chain transfer tx in BSC */
    refund_address?: string;
    /** Sequence of the corresponding cross chain package */
    sequence?: string;
    /** Source chain id of the cross chain transfer tx */
    src_chain_id?: number;
}
export interface EventCrossTransferInAminoMsg {
    type: "/greenfield.bridge.EventCrossTransferIn";
    value: EventCrossTransferInAmino;
}
/** EventCrossTransferIn is emitted when a cross chain transfer in tx happened */
export interface EventCrossTransferInSDKType {
    amount?: CoinSDKType;
    receiver_address: string;
    refund_address: string;
    sequence: Long;
    src_chain_id: number;
}
export declare const EventCrossTransferOut: {
    typeUrl: string;
    encode(message: EventCrossTransferOut, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventCrossTransferOut;
    fromJSON(object: any): EventCrossTransferOut;
    toJSON(message: EventCrossTransferOut): unknown;
    fromPartial<I extends {
        from?: string;
        to?: string;
        amount?: {
            denom?: string;
            amount?: string;
        };
        relayerFee?: {
            denom?: string;
            amount?: string;
        };
        sequence?: string | number | Long.Long;
        destChainId?: number;
    } & {
        from?: string;
        to?: string;
        amount?: {
            denom?: string;
            amount?: string;
        } & {
            denom?: string;
            amount?: string;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>;
        relayerFee?: {
            denom?: string;
            amount?: string;
        } & {
            denom?: string;
            amount?: string;
        } & Record<Exclude<keyof I["relayerFee"], keyof Coin>, never>;
        sequence?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["sequence"], keyof Long.Long>, never>);
        destChainId?: number;
    } & Record<Exclude<keyof I, keyof EventCrossTransferOut>, never>>(object: I): EventCrossTransferOut;
    fromSDK(object: EventCrossTransferOutSDKType): EventCrossTransferOut;
    toSDK(message: EventCrossTransferOut): EventCrossTransferOutSDKType;
    fromAmino(object: EventCrossTransferOutAmino): EventCrossTransferOut;
    toAmino(message: EventCrossTransferOut): EventCrossTransferOutAmino;
    fromAminoMsg(object: EventCrossTransferOutAminoMsg): EventCrossTransferOut;
    fromProtoMsg(message: EventCrossTransferOutProtoMsg): EventCrossTransferOut;
    toProto(message: EventCrossTransferOut): Uint8Array;
    toProtoMsg(message: EventCrossTransferOut): EventCrossTransferOutProtoMsg;
};
export declare const EventCrossTransferOutRefund: {
    typeUrl: string;
    encode(message: EventCrossTransferOutRefund, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventCrossTransferOutRefund;
    fromJSON(object: any): EventCrossTransferOutRefund;
    toJSON(message: EventCrossTransferOutRefund): unknown;
    fromPartial<I extends {
        refundAddress?: string;
        amount?: {
            denom?: string;
            amount?: string;
        };
        refundReason?: RefundReason;
        sequence?: string | number | Long.Long;
        destChainId?: number;
    } & {
        refundAddress?: string;
        amount?: {
            denom?: string;
            amount?: string;
        } & {
            denom?: string;
            amount?: string;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>;
        refundReason?: RefundReason;
        sequence?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["sequence"], keyof Long.Long>, never>);
        destChainId?: number;
    } & Record<Exclude<keyof I, keyof EventCrossTransferOutRefund>, never>>(object: I): EventCrossTransferOutRefund;
    fromSDK(object: EventCrossTransferOutRefundSDKType): EventCrossTransferOutRefund;
    toSDK(message: EventCrossTransferOutRefund): EventCrossTransferOutRefundSDKType;
    fromAmino(object: EventCrossTransferOutRefundAmino): EventCrossTransferOutRefund;
    toAmino(message: EventCrossTransferOutRefund): EventCrossTransferOutRefundAmino;
    fromAminoMsg(object: EventCrossTransferOutRefundAminoMsg): EventCrossTransferOutRefund;
    fromProtoMsg(message: EventCrossTransferOutRefundProtoMsg): EventCrossTransferOutRefund;
    toProto(message: EventCrossTransferOutRefund): Uint8Array;
    toProtoMsg(message: EventCrossTransferOutRefund): EventCrossTransferOutRefundProtoMsg;
};
export declare const EventCrossTransferIn: {
    typeUrl: string;
    encode(message: EventCrossTransferIn, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventCrossTransferIn;
    fromJSON(object: any): EventCrossTransferIn;
    toJSON(message: EventCrossTransferIn): unknown;
    fromPartial<I extends {
        amount?: {
            denom?: string;
            amount?: string;
        };
        receiverAddress?: string;
        refundAddress?: string;
        sequence?: string | number | Long.Long;
        srcChainId?: number;
    } & {
        amount?: {
            denom?: string;
            amount?: string;
        } & {
            denom?: string;
            amount?: string;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>;
        receiverAddress?: string;
        refundAddress?: string;
        sequence?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["sequence"], keyof Long.Long>, never>);
        srcChainId?: number;
    } & Record<Exclude<keyof I, keyof EventCrossTransferIn>, never>>(object: I): EventCrossTransferIn;
    fromSDK(object: EventCrossTransferInSDKType): EventCrossTransferIn;
    toSDK(message: EventCrossTransferIn): EventCrossTransferInSDKType;
    fromAmino(object: EventCrossTransferInAmino): EventCrossTransferIn;
    toAmino(message: EventCrossTransferIn): EventCrossTransferInAmino;
    fromAminoMsg(object: EventCrossTransferInAminoMsg): EventCrossTransferIn;
    fromProtoMsg(message: EventCrossTransferInProtoMsg): EventCrossTransferIn;
    toProto(message: EventCrossTransferIn): Uint8Array;
    toProtoMsg(message: EventCrossTransferIn): EventCrossTransferInProtoMsg;
};
