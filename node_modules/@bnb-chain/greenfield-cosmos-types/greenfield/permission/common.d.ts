import { Timestamp, TimestampSDKType } from "../../google/protobuf/timestamp";
import { UInt64Value, UInt64ValueAmino, UInt64ValueSDKType } from "../common/wrapper";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.permission";
/** ActionType defines the operations you can execute in greenfield storage network */
export declare enum ActionType {
    ACTION_UNSPECIFIED = 0,
    ACTION_UPDATE_BUCKET_INFO = 1,
    ACTION_DELETE_BUCKET = 2,
    ACTION_CREATE_OBJECT = 3,
    ACTION_DELETE_OBJECT = 4,
    ACTION_COPY_OBJECT = 5,
    ACTION_GET_OBJECT = 6,
    ACTION_EXECUTE_OBJECT = 7,
    ACTION_LIST_OBJECT = 8,
    ACTION_UPDATE_GROUP_MEMBER = 9,
    ACTION_DELETE_GROUP = 10,
    ACTION_UPDATE_OBJECT_INFO = 11,
    ACTION_UPDATE_GROUP_EXTRA = 12,
    ACTION_TYPE_ALL = 99,
    UNRECOGNIZED = -1
}
export declare const ActionTypeSDKType: typeof ActionType;
export declare const ActionTypeAmino: typeof ActionType;
export declare function actionTypeFromJSON(object: any): ActionType;
export declare function actionTypeToJSON(object: ActionType): string;
/** Effect define the effect of the operation permission, include Allow or deny */
export declare enum Effect {
    EFFECT_UNSPECIFIED = 0,
    EFFECT_ALLOW = 1,
    EFFECT_DENY = 2,
    UNRECOGNIZED = -1
}
export declare const EffectSDKType: typeof Effect;
export declare const EffectAmino: typeof Effect;
export declare function effectFromJSON(object: any): Effect;
export declare function effectToJSON(object: Effect): string;
/**
 * PrincipalType refers to the identity type of system users or entities.
 * In Greenfield, it usually refers to accounts or groups.
 */
export declare enum PrincipalType {
    PRINCIPAL_TYPE_UNSPECIFIED = 0,
    PRINCIPAL_TYPE_GNFD_ACCOUNT = 1,
    PRINCIPAL_TYPE_GNFD_GROUP = 2,
    UNRECOGNIZED = -1
}
export declare const PrincipalTypeSDKType: typeof PrincipalType;
export declare const PrincipalTypeAmino: typeof PrincipalType;
export declare function principalTypeFromJSON(object: any): PrincipalType;
export declare function principalTypeToJSON(object: PrincipalType): string;
export interface Statement {
    /** effect define the impact of permissions, which can be Allow/Deny */
    effect: Effect;
    /**
     * action_type define the operation type you can act. greenfield defines a set of permission
     * that you can specify in a permissionInfo. see ActionType enum for detail.
     */
    actions: ActionType[];
    /**
     * CAN ONLY USED IN bucket level. Support fuzzy match and limit to 5.
     * The sub-resource name must comply with the standard specified in the greenfield/types/grn.go file for Greenfield resource names.
     * If the sub-resources include 'grn:o:{bucket_name}/*' in the statement, it indicates that specific permissions is granted to all objects within the specified bucket.
     * If the sub-resources include 'grn:o:{bucket_name}/test_*' in the statement, it indicates that specific permissions is granted to all objects with the `test_` prefix within the specified bucket.
     * If the sub-resources is empty, when you need to operate(excluding CreateObject) a specified subresource, it will be denied because it cannot match any subresource.
     */
    resources: string[];
    /** expiration_time defines how long the permission is valid. If not explicitly specified, it means it will not expire. */
    expirationTime?: Timestamp;
    /** limit_size defines the total data size that is allowed to operate. If not explicitly specified, it means it will not limit. */
    limitSize?: UInt64Value;
}
export interface StatementProtoMsg {
    typeUrl: "/greenfield.permission.Statement";
    value: Uint8Array;
}
export interface StatementAmino {
    /** effect define the impact of permissions, which can be Allow/Deny */
    effect?: Effect;
    /**
     * action_type define the operation type you can act. greenfield defines a set of permission
     * that you can specify in a permissionInfo. see ActionType enum for detail.
     */
    actions?: ActionType[];
    /**
     * CAN ONLY USED IN bucket level. Support fuzzy match and limit to 5.
     * The sub-resource name must comply with the standard specified in the greenfield/types/grn.go file for Greenfield resource names.
     * If the sub-resources include 'grn:o:{bucket_name}/*' in the statement, it indicates that specific permissions is granted to all objects within the specified bucket.
     * If the sub-resources include 'grn:o:{bucket_name}/test_*' in the statement, it indicates that specific permissions is granted to all objects with the `test_` prefix within the specified bucket.
     * If the sub-resources is empty, when you need to operate(excluding CreateObject) a specified subresource, it will be denied because it cannot match any subresource.
     */
    resources?: string[];
    /** expiration_time defines how long the permission is valid. If not explicitly specified, it means it will not expire. */
    expiration_time?: string;
    /** limit_size defines the total data size that is allowed to operate. If not explicitly specified, it means it will not limit. */
    limit_size?: UInt64ValueAmino;
}
export interface StatementAminoMsg {
    type: "/greenfield.permission.Statement";
    value: StatementAmino;
}
export interface StatementSDKType {
    effect: Effect;
    actions: ActionType[];
    resources: string[];
    expiration_time?: TimestampSDKType;
    limit_size?: UInt64ValueSDKType;
}
/** Principal define the roles that can be grant permissions to. Currently, it can be account or group. */
export interface Principal {
    type: PrincipalType;
    /**
     * When the type is an account, its value is sdk.AccAddress().String();
     * when the type is a group, its value is math.Uint().String()
     */
    value: string;
}
export interface PrincipalProtoMsg {
    typeUrl: "/greenfield.permission.Principal";
    value: Uint8Array;
}
/** Principal define the roles that can be grant permissions to. Currently, it can be account or group. */
export interface PrincipalAmino {
    type?: PrincipalType;
    /**
     * When the type is an account, its value is sdk.AccAddress().String();
     * when the type is a group, its value is math.Uint().String()
     */
    value?: string;
}
export interface PrincipalAminoMsg {
    type: "/greenfield.permission.Principal";
    value: PrincipalAmino;
}
/** Principal define the roles that can be grant permissions to. Currently, it can be account or group. */
export interface PrincipalSDKType {
    type: PrincipalType;
    value: string;
}
export declare const Statement: {
    typeUrl: string;
    encode(message: Statement, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Statement;
    fromJSON(object: any): Statement;
    toJSON(message: Statement): unknown;
    fromPartial<I extends {
        effect?: Effect;
        actions?: ActionType[];
        resources?: string[];
        expirationTime?: {
            seconds?: string | number | import("long").Long;
            nanos?: number;
        };
        limitSize?: {
            value?: string | number | import("long").Long;
        };
    } & {
        effect?: Effect;
        actions?: ActionType[] & ActionType[] & Record<Exclude<keyof I["actions"], keyof ActionType[]>, never>;
        resources?: string[] & string[] & Record<Exclude<keyof I["resources"], keyof string[]>, never>;
        expirationTime?: {
            seconds?: string | number | import("long").Long;
            nanos?: number;
        } & {
            seconds?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["expirationTime"]["seconds"], keyof import("long").Long>, never>);
            nanos?: number;
        } & Record<Exclude<keyof I["expirationTime"], keyof Timestamp>, never>;
        limitSize?: {
            value?: string | number | import("long").Long;
        } & {
            value?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["limitSize"]["value"], keyof import("long").Long>, never>);
        } & Record<Exclude<keyof I["limitSize"], "value">, never>;
    } & Record<Exclude<keyof I, keyof Statement>, never>>(object: I): Statement;
    fromSDK(object: StatementSDKType): Statement;
    toSDK(message: Statement): StatementSDKType;
    fromAmino(object: StatementAmino): Statement;
    toAmino(message: Statement): StatementAmino;
    fromAminoMsg(object: StatementAminoMsg): Statement;
    fromProtoMsg(message: StatementProtoMsg): Statement;
    toProto(message: Statement): Uint8Array;
    toProtoMsg(message: Statement): StatementProtoMsg;
};
export declare const Principal: {
    typeUrl: string;
    encode(message: Principal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Principal;
    fromJSON(object: any): Principal;
    toJSON(message: Principal): unknown;
    fromPartial<I extends {
        type?: PrincipalType;
        value?: string;
    } & {
        type?: PrincipalType;
        value?: string;
    } & Record<Exclude<keyof I, keyof Principal>, never>>(object: I): Principal;
    fromSDK(object: PrincipalSDKType): Principal;
    toSDK(message: Principal): PrincipalSDKType;
    fromAmino(object: PrincipalAmino): Principal;
    toAmino(message: Principal): PrincipalAmino;
    fromAminoMsg(object: PrincipalAminoMsg): Principal;
    fromProtoMsg(message: PrincipalProtoMsg): Principal;
    toProto(message: Principal): Uint8Array;
    toProtoMsg(message: Principal): PrincipalProtoMsg;
};
