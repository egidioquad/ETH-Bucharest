/// <reference types="long" />
import { Long } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.virtualgroup";
/** Params defines the parameters for the module. */
export interface Params {
    /** deposit_denom defines the staking coin denomination. */
    depositDenom: string;
    /** store price, in bnb wei per charge byte */
    gvgStakingPerBytes: string;
    /** the max number of lvg which allowed in a bucket */
    maxLocalVirtualGroupNumPerBucket: number;
    /** the max number of gvg which can exist in a family */
    maxGlobalVirtualGroupNumPerFamily: number;
    /** if the store size reach the exceed, the family is not allowed to sever more buckets */
    maxStoreSizePerFamily: Long;
}
export interface ParamsProtoMsg {
    typeUrl: "/greenfield.virtualgroup.Params";
    value: Uint8Array;
}
/** Params defines the parameters for the module. */
export interface ParamsAmino {
    /** deposit_denom defines the staking coin denomination. */
    deposit_denom?: string;
    /** store price, in bnb wei per charge byte */
    gvg_staking_per_bytes?: string;
    /** the max number of lvg which allowed in a bucket */
    max_local_virtual_group_num_per_bucket?: number;
    /** the max number of gvg which can exist in a family */
    max_global_virtual_group_num_per_family?: number;
    /** if the store size reach the exceed, the family is not allowed to sever more buckets */
    max_store_size_per_family?: string;
}
export interface ParamsAminoMsg {
    type: "/greenfield.virtualgroup.Params";
    value: ParamsAmino;
}
/** Params defines the parameters for the module. */
export interface ParamsSDKType {
    deposit_denom: string;
    gvg_staking_per_bytes: string;
    max_local_virtual_group_num_per_bucket: number;
    max_global_virtual_group_num_per_family: number;
    max_store_size_per_family: Long;
}
export declare const Params: {
    typeUrl: string;
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial<I extends {
        depositDenom?: string;
        gvgStakingPerBytes?: string;
        maxLocalVirtualGroupNumPerBucket?: number;
        maxGlobalVirtualGroupNumPerFamily?: number;
        maxStoreSizePerFamily?: string | number | Long.Long;
    } & {
        depositDenom?: string;
        gvgStakingPerBytes?: string;
        maxLocalVirtualGroupNumPerBucket?: number;
        maxGlobalVirtualGroupNumPerFamily?: number;
        maxStoreSizePerFamily?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["maxStoreSizePerFamily"], keyof Long.Long>, never>);
    } & Record<Exclude<keyof I, keyof Params>, never>>(object: I): Params;
    fromSDK(object: ParamsSDKType): Params;
    toSDK(message: Params): ParamsSDKType;
    fromAmino(object: ParamsAmino): Params;
    toAmino(message: Params): ParamsAmino;
    fromAminoMsg(object: ParamsAminoMsg): Params;
    fromProtoMsg(message: ParamsProtoMsg): Params;
    toProto(message: Params): Uint8Array;
    toProtoMsg(message: Params): ParamsProtoMsg;
};
