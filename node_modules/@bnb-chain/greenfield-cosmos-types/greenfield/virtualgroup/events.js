"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventCompleteStorageProviderExit = exports.EventStorageProviderExit = exports.EventCancelSwapOut = exports.EventCompleteSwapOut = exports.EventSwapOut = exports.EventDeleteLocalVirtualGroup = exports.EventUpdateLocalVirtualGroup = exports.EventCreateLocalVirtualGroup = exports.EventDeleteGlobalVirtualGroupFamily = exports.EventUpdateGlobalVirtualGroupFamily = exports.EventCreateGlobalVirtualGroupFamily = exports.EventDeleteGlobalVirtualGroup = exports.EventUpdateGlobalVirtualGroup = exports.EventCreateGlobalVirtualGroup = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.virtualgroup";
function createBaseEventCreateGlobalVirtualGroup() {
    return {
        id: 0,
        familyId: 0,
        primarySpId: 0,
        secondarySpIds: [],
        storedSize: helpers_1.Long.UZERO,
        virtualPaymentAddress: "",
        totalDeposit: ""
    };
}
exports.EventCreateGlobalVirtualGroup = {
    typeUrl: "/greenfield.virtualgroup.EventCreateGlobalVirtualGroup",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.familyId !== 0) {
            writer.uint32(16).uint32(message.familyId);
        }
        if (message.primarySpId !== 0) {
            writer.uint32(24).uint32(message.primarySpId);
        }
        writer.uint32(34).fork();
        for (const v of message.secondarySpIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        if (!message.storedSize.isZero()) {
            writer.uint32(40).uint64(message.storedSize);
        }
        if (message.virtualPaymentAddress !== "") {
            writer.uint32(50).string(message.virtualPaymentAddress);
        }
        if (message.totalDeposit !== "") {
            writer.uint32(58).string(message.totalDeposit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCreateGlobalVirtualGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.familyId = reader.uint32();
                    break;
                case 3:
                    message.primarySpId = reader.uint32();
                    break;
                case 4:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.secondarySpIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.secondarySpIds.push(reader.uint32());
                    }
                    break;
                case 5:
                    message.storedSize = reader.uint64();
                    break;
                case 6:
                    message.virtualPaymentAddress = reader.string();
                    break;
                case 7:
                    message.totalDeposit = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? Number(object.id) : 0,
            familyId: (0, helpers_1.isSet)(object.familyId) ? Number(object.familyId) : 0,
            primarySpId: (0, helpers_1.isSet)(object.primarySpId) ? Number(object.primarySpId) : 0,
            secondarySpIds: Array.isArray(object?.secondarySpIds) ? object.secondarySpIds.map((e) => Number(e)) : [],
            storedSize: (0, helpers_1.isSet)(object.storedSize) ? helpers_1.Long.fromValue(object.storedSize) : helpers_1.Long.UZERO,
            virtualPaymentAddress: (0, helpers_1.isSet)(object.virtualPaymentAddress) ? String(object.virtualPaymentAddress) : "",
            totalDeposit: (0, helpers_1.isSet)(object.totalDeposit) ? String(object.totalDeposit) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = Math.round(message.id));
        message.familyId !== undefined && (obj.familyId = Math.round(message.familyId));
        message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
        if (message.secondarySpIds) {
            obj.secondarySpIds = message.secondarySpIds.map(e => Math.round(e));
        }
        else {
            obj.secondarySpIds = [];
        }
        message.storedSize !== undefined && (obj.storedSize = (message.storedSize || helpers_1.Long.UZERO).toString());
        message.virtualPaymentAddress !== undefined && (obj.virtualPaymentAddress = message.virtualPaymentAddress);
        message.totalDeposit !== undefined && (obj.totalDeposit = message.totalDeposit);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCreateGlobalVirtualGroup();
        message.id = object.id ?? 0;
        message.familyId = object.familyId ?? 0;
        message.primarySpId = object.primarySpId ?? 0;
        message.secondarySpIds = object.secondarySpIds?.map(e => e) || [];
        message.storedSize = object.storedSize !== undefined && object.storedSize !== null ? helpers_1.Long.fromValue(object.storedSize) : helpers_1.Long.UZERO;
        message.virtualPaymentAddress = object.virtualPaymentAddress ?? "";
        message.totalDeposit = object.totalDeposit ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id,
            familyId: object?.family_id,
            primarySpId: object?.primary_sp_id,
            secondarySpIds: Array.isArray(object?.secondary_sp_ids) ? object.secondary_sp_ids.map((e) => e) : [],
            storedSize: object?.stored_size,
            virtualPaymentAddress: object?.virtual_payment_address,
            totalDeposit: object?.total_deposit
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        obj.family_id = message.familyId;
        obj.primary_sp_id = message.primarySpId;
        if (message.secondarySpIds) {
            obj.secondary_sp_ids = message.secondarySpIds.map(e => e);
        }
        else {
            obj.secondary_sp_ids = [];
        }
        obj.stored_size = message.storedSize;
        obj.virtual_payment_address = message.virtualPaymentAddress;
        obj.total_deposit = message.totalDeposit;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventCreateGlobalVirtualGroup();
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        if (object.family_id !== undefined && object.family_id !== null) {
            message.familyId = object.family_id;
        }
        if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
            message.primarySpId = object.primary_sp_id;
        }
        message.secondarySpIds = object.secondary_sp_ids?.map(e => e) || [];
        if (object.stored_size !== undefined && object.stored_size !== null) {
            message.storedSize = helpers_1.Long.fromString(object.stored_size);
        }
        if (object.virtual_payment_address !== undefined && object.virtual_payment_address !== null) {
            message.virtualPaymentAddress = object.virtual_payment_address;
        }
        if (object.total_deposit !== undefined && object.total_deposit !== null) {
            message.totalDeposit = object.total_deposit;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.id = message.id;
        obj.family_id = message.familyId;
        obj.primary_sp_id = message.primarySpId;
        if (message.secondarySpIds) {
            obj.secondary_sp_ids = message.secondarySpIds.map(e => e);
        }
        else {
            obj.secondary_sp_ids = [];
        }
        obj.stored_size = message.storedSize ? message.storedSize.toString() : undefined;
        obj.virtual_payment_address = message.virtualPaymentAddress;
        obj.total_deposit = message.totalDeposit;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventCreateGlobalVirtualGroup.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventCreateGlobalVirtualGroup.decode(message.value);
    },
    toProto(message) {
        return exports.EventCreateGlobalVirtualGroup.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.EventCreateGlobalVirtualGroup",
            value: exports.EventCreateGlobalVirtualGroup.encode(message).finish()
        };
    }
};
function createBaseEventUpdateGlobalVirtualGroup() {
    return {
        id: 0,
        storeSize: helpers_1.Long.UZERO,
        totalDeposit: "",
        primarySpId: 0,
        secondarySpIds: []
    };
}
exports.EventUpdateGlobalVirtualGroup = {
    typeUrl: "/greenfield.virtualgroup.EventUpdateGlobalVirtualGroup",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (!message.storeSize.isZero()) {
            writer.uint32(16).uint64(message.storeSize);
        }
        if (message.totalDeposit !== "") {
            writer.uint32(26).string(message.totalDeposit);
        }
        if (message.primarySpId !== 0) {
            writer.uint32(32).uint32(message.primarySpId);
        }
        writer.uint32(42).fork();
        for (const v of message.secondarySpIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventUpdateGlobalVirtualGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.storeSize = reader.uint64();
                    break;
                case 3:
                    message.totalDeposit = reader.string();
                    break;
                case 4:
                    message.primarySpId = reader.uint32();
                    break;
                case 5:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.secondarySpIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.secondarySpIds.push(reader.uint32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? Number(object.id) : 0,
            storeSize: (0, helpers_1.isSet)(object.storeSize) ? helpers_1.Long.fromValue(object.storeSize) : helpers_1.Long.UZERO,
            totalDeposit: (0, helpers_1.isSet)(object.totalDeposit) ? String(object.totalDeposit) : "",
            primarySpId: (0, helpers_1.isSet)(object.primarySpId) ? Number(object.primarySpId) : 0,
            secondarySpIds: Array.isArray(object?.secondarySpIds) ? object.secondarySpIds.map((e) => Number(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = Math.round(message.id));
        message.storeSize !== undefined && (obj.storeSize = (message.storeSize || helpers_1.Long.UZERO).toString());
        message.totalDeposit !== undefined && (obj.totalDeposit = message.totalDeposit);
        message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
        if (message.secondarySpIds) {
            obj.secondarySpIds = message.secondarySpIds.map(e => Math.round(e));
        }
        else {
            obj.secondarySpIds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventUpdateGlobalVirtualGroup();
        message.id = object.id ?? 0;
        message.storeSize = object.storeSize !== undefined && object.storeSize !== null ? helpers_1.Long.fromValue(object.storeSize) : helpers_1.Long.UZERO;
        message.totalDeposit = object.totalDeposit ?? "";
        message.primarySpId = object.primarySpId ?? 0;
        message.secondarySpIds = object.secondarySpIds?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id,
            storeSize: object?.store_size,
            totalDeposit: object?.total_deposit,
            primarySpId: object?.primary_sp_id,
            secondarySpIds: Array.isArray(object?.secondary_sp_ids) ? object.secondary_sp_ids.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        obj.store_size = message.storeSize;
        obj.total_deposit = message.totalDeposit;
        obj.primary_sp_id = message.primarySpId;
        if (message.secondarySpIds) {
            obj.secondary_sp_ids = message.secondarySpIds.map(e => e);
        }
        else {
            obj.secondary_sp_ids = [];
        }
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventUpdateGlobalVirtualGroup();
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        if (object.store_size !== undefined && object.store_size !== null) {
            message.storeSize = helpers_1.Long.fromString(object.store_size);
        }
        if (object.total_deposit !== undefined && object.total_deposit !== null) {
            message.totalDeposit = object.total_deposit;
        }
        if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
            message.primarySpId = object.primary_sp_id;
        }
        message.secondarySpIds = object.secondary_sp_ids?.map(e => e) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.id = message.id;
        obj.store_size = message.storeSize ? message.storeSize.toString() : undefined;
        obj.total_deposit = message.totalDeposit;
        obj.primary_sp_id = message.primarySpId;
        if (message.secondarySpIds) {
            obj.secondary_sp_ids = message.secondarySpIds.map(e => e);
        }
        else {
            obj.secondary_sp_ids = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventUpdateGlobalVirtualGroup.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventUpdateGlobalVirtualGroup.decode(message.value);
    },
    toProto(message) {
        return exports.EventUpdateGlobalVirtualGroup.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.EventUpdateGlobalVirtualGroup",
            value: exports.EventUpdateGlobalVirtualGroup.encode(message).finish()
        };
    }
};
function createBaseEventDeleteGlobalVirtualGroup() {
    return {
        id: 0,
        primarySpId: 0
    };
}
exports.EventDeleteGlobalVirtualGroup = {
    typeUrl: "/greenfield.virtualgroup.EventDeleteGlobalVirtualGroup",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.primarySpId !== 0) {
            writer.uint32(16).uint32(message.primarySpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDeleteGlobalVirtualGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.primarySpId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? Number(object.id) : 0,
            primarySpId: (0, helpers_1.isSet)(object.primarySpId) ? Number(object.primarySpId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = Math.round(message.id));
        message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventDeleteGlobalVirtualGroup();
        message.id = object.id ?? 0;
        message.primarySpId = object.primarySpId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id,
            primarySpId: object?.primary_sp_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        obj.primary_sp_id = message.primarySpId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventDeleteGlobalVirtualGroup();
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
            message.primarySpId = object.primary_sp_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.id = message.id;
        obj.primary_sp_id = message.primarySpId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventDeleteGlobalVirtualGroup.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventDeleteGlobalVirtualGroup.decode(message.value);
    },
    toProto(message) {
        return exports.EventDeleteGlobalVirtualGroup.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.EventDeleteGlobalVirtualGroup",
            value: exports.EventDeleteGlobalVirtualGroup.encode(message).finish()
        };
    }
};
function createBaseEventCreateGlobalVirtualGroupFamily() {
    return {
        id: 0,
        primarySpId: 0,
        virtualPaymentAddress: "",
        globalVirtualGroupIds: []
    };
}
exports.EventCreateGlobalVirtualGroupFamily = {
    typeUrl: "/greenfield.virtualgroup.EventCreateGlobalVirtualGroupFamily",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.primarySpId !== 0) {
            writer.uint32(16).uint32(message.primarySpId);
        }
        if (message.virtualPaymentAddress !== "") {
            writer.uint32(26).string(message.virtualPaymentAddress);
        }
        writer.uint32(34).fork();
        for (const v of message.globalVirtualGroupIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCreateGlobalVirtualGroupFamily();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.primarySpId = reader.uint32();
                    break;
                case 3:
                    message.virtualPaymentAddress = reader.string();
                    break;
                case 4:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalVirtualGroupIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.globalVirtualGroupIds.push(reader.uint32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? Number(object.id) : 0,
            primarySpId: (0, helpers_1.isSet)(object.primarySpId) ? Number(object.primarySpId) : 0,
            virtualPaymentAddress: (0, helpers_1.isSet)(object.virtualPaymentAddress) ? String(object.virtualPaymentAddress) : "",
            globalVirtualGroupIds: Array.isArray(object?.globalVirtualGroupIds) ? object.globalVirtualGroupIds.map((e) => Number(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = Math.round(message.id));
        message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
        message.virtualPaymentAddress !== undefined && (obj.virtualPaymentAddress = message.virtualPaymentAddress);
        if (message.globalVirtualGroupIds) {
            obj.globalVirtualGroupIds = message.globalVirtualGroupIds.map(e => Math.round(e));
        }
        else {
            obj.globalVirtualGroupIds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCreateGlobalVirtualGroupFamily();
        message.id = object.id ?? 0;
        message.primarySpId = object.primarySpId ?? 0;
        message.virtualPaymentAddress = object.virtualPaymentAddress ?? "";
        message.globalVirtualGroupIds = object.globalVirtualGroupIds?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id,
            primarySpId: object?.primary_sp_id,
            virtualPaymentAddress: object?.virtual_payment_address,
            globalVirtualGroupIds: Array.isArray(object?.global_virtual_group_ids) ? object.global_virtual_group_ids.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        obj.primary_sp_id = message.primarySpId;
        obj.virtual_payment_address = message.virtualPaymentAddress;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventCreateGlobalVirtualGroupFamily();
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
            message.primarySpId = object.primary_sp_id;
        }
        if (object.virtual_payment_address !== undefined && object.virtual_payment_address !== null) {
            message.virtualPaymentAddress = object.virtual_payment_address;
        }
        message.globalVirtualGroupIds = object.global_virtual_group_ids?.map(e => e) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.id = message.id;
        obj.primary_sp_id = message.primarySpId;
        obj.virtual_payment_address = message.virtualPaymentAddress;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventCreateGlobalVirtualGroupFamily.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventCreateGlobalVirtualGroupFamily.decode(message.value);
    },
    toProto(message) {
        return exports.EventCreateGlobalVirtualGroupFamily.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.EventCreateGlobalVirtualGroupFamily",
            value: exports.EventCreateGlobalVirtualGroupFamily.encode(message).finish()
        };
    }
};
function createBaseEventUpdateGlobalVirtualGroupFamily() {
    return {
        id: 0,
        primarySpId: 0,
        globalVirtualGroupIds: []
    };
}
exports.EventUpdateGlobalVirtualGroupFamily = {
    typeUrl: "/greenfield.virtualgroup.EventUpdateGlobalVirtualGroupFamily",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.primarySpId !== 0) {
            writer.uint32(16).uint32(message.primarySpId);
        }
        writer.uint32(26).fork();
        for (const v of message.globalVirtualGroupIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventUpdateGlobalVirtualGroupFamily();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.primarySpId = reader.uint32();
                    break;
                case 3:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalVirtualGroupIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.globalVirtualGroupIds.push(reader.uint32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? Number(object.id) : 0,
            primarySpId: (0, helpers_1.isSet)(object.primarySpId) ? Number(object.primarySpId) : 0,
            globalVirtualGroupIds: Array.isArray(object?.globalVirtualGroupIds) ? object.globalVirtualGroupIds.map((e) => Number(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = Math.round(message.id));
        message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
        if (message.globalVirtualGroupIds) {
            obj.globalVirtualGroupIds = message.globalVirtualGroupIds.map(e => Math.round(e));
        }
        else {
            obj.globalVirtualGroupIds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventUpdateGlobalVirtualGroupFamily();
        message.id = object.id ?? 0;
        message.primarySpId = object.primarySpId ?? 0;
        message.globalVirtualGroupIds = object.globalVirtualGroupIds?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id,
            primarySpId: object?.primary_sp_id,
            globalVirtualGroupIds: Array.isArray(object?.global_virtual_group_ids) ? object.global_virtual_group_ids.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        obj.primary_sp_id = message.primarySpId;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventUpdateGlobalVirtualGroupFamily();
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
            message.primarySpId = object.primary_sp_id;
        }
        message.globalVirtualGroupIds = object.global_virtual_group_ids?.map(e => e) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.id = message.id;
        obj.primary_sp_id = message.primarySpId;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventUpdateGlobalVirtualGroupFamily.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventUpdateGlobalVirtualGroupFamily.decode(message.value);
    },
    toProto(message) {
        return exports.EventUpdateGlobalVirtualGroupFamily.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.EventUpdateGlobalVirtualGroupFamily",
            value: exports.EventUpdateGlobalVirtualGroupFamily.encode(message).finish()
        };
    }
};
function createBaseEventDeleteGlobalVirtualGroupFamily() {
    return {
        id: 0,
        primarySpId: 0
    };
}
exports.EventDeleteGlobalVirtualGroupFamily = {
    typeUrl: "/greenfield.virtualgroup.EventDeleteGlobalVirtualGroupFamily",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.primarySpId !== 0) {
            writer.uint32(16).uint32(message.primarySpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDeleteGlobalVirtualGroupFamily();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.primarySpId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? Number(object.id) : 0,
            primarySpId: (0, helpers_1.isSet)(object.primarySpId) ? Number(object.primarySpId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = Math.round(message.id));
        message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventDeleteGlobalVirtualGroupFamily();
        message.id = object.id ?? 0;
        message.primarySpId = object.primarySpId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id,
            primarySpId: object?.primary_sp_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        obj.primary_sp_id = message.primarySpId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventDeleteGlobalVirtualGroupFamily();
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
            message.primarySpId = object.primary_sp_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.id = message.id;
        obj.primary_sp_id = message.primarySpId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventDeleteGlobalVirtualGroupFamily.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventDeleteGlobalVirtualGroupFamily.decode(message.value);
    },
    toProto(message) {
        return exports.EventDeleteGlobalVirtualGroupFamily.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.EventDeleteGlobalVirtualGroupFamily",
            value: exports.EventDeleteGlobalVirtualGroupFamily.encode(message).finish()
        };
    }
};
function createBaseEventCreateLocalVirtualGroup() {
    return {
        id: 0,
        bucketId: "",
        globalVirtualGroupId: 0,
        storedSize: helpers_1.Long.UZERO
    };
}
exports.EventCreateLocalVirtualGroup = {
    typeUrl: "/greenfield.virtualgroup.EventCreateLocalVirtualGroup",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.bucketId !== "") {
            writer.uint32(18).string(message.bucketId);
        }
        if (message.globalVirtualGroupId !== 0) {
            writer.uint32(24).uint32(message.globalVirtualGroupId);
        }
        if (!message.storedSize.isZero()) {
            writer.uint32(32).uint64(message.storedSize);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCreateLocalVirtualGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.bucketId = reader.string();
                    break;
                case 3:
                    message.globalVirtualGroupId = reader.uint32();
                    break;
                case 4:
                    message.storedSize = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? Number(object.id) : 0,
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            globalVirtualGroupId: (0, helpers_1.isSet)(object.globalVirtualGroupId) ? Number(object.globalVirtualGroupId) : 0,
            storedSize: (0, helpers_1.isSet)(object.storedSize) ? helpers_1.Long.fromValue(object.storedSize) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = Math.round(message.id));
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        message.globalVirtualGroupId !== undefined && (obj.globalVirtualGroupId = Math.round(message.globalVirtualGroupId));
        message.storedSize !== undefined && (obj.storedSize = (message.storedSize || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCreateLocalVirtualGroup();
        message.id = object.id ?? 0;
        message.bucketId = object.bucketId ?? "";
        message.globalVirtualGroupId = object.globalVirtualGroupId ?? 0;
        message.storedSize = object.storedSize !== undefined && object.storedSize !== null ? helpers_1.Long.fromValue(object.storedSize) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id,
            bucketId: object?.bucket_id,
            globalVirtualGroupId: object?.global_virtual_group_id,
            storedSize: object?.stored_size
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        obj.bucket_id = message.bucketId;
        obj.global_virtual_group_id = message.globalVirtualGroupId;
        obj.stored_size = message.storedSize;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventCreateLocalVirtualGroup();
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        if (object.global_virtual_group_id !== undefined && object.global_virtual_group_id !== null) {
            message.globalVirtualGroupId = object.global_virtual_group_id;
        }
        if (object.stored_size !== undefined && object.stored_size !== null) {
            message.storedSize = helpers_1.Long.fromString(object.stored_size);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.id = message.id;
        obj.bucket_id = message.bucketId;
        obj.global_virtual_group_id = message.globalVirtualGroupId;
        obj.stored_size = message.storedSize ? message.storedSize.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventCreateLocalVirtualGroup.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventCreateLocalVirtualGroup.decode(message.value);
    },
    toProto(message) {
        return exports.EventCreateLocalVirtualGroup.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.EventCreateLocalVirtualGroup",
            value: exports.EventCreateLocalVirtualGroup.encode(message).finish()
        };
    }
};
function createBaseEventUpdateLocalVirtualGroup() {
    return {
        id: 0,
        bucketId: "",
        globalVirtualGroupId: 0,
        storedSize: helpers_1.Long.UZERO
    };
}
exports.EventUpdateLocalVirtualGroup = {
    typeUrl: "/greenfield.virtualgroup.EventUpdateLocalVirtualGroup",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.bucketId !== "") {
            writer.uint32(18).string(message.bucketId);
        }
        if (message.globalVirtualGroupId !== 0) {
            writer.uint32(24).uint32(message.globalVirtualGroupId);
        }
        if (!message.storedSize.isZero()) {
            writer.uint32(32).uint64(message.storedSize);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventUpdateLocalVirtualGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.bucketId = reader.string();
                    break;
                case 3:
                    message.globalVirtualGroupId = reader.uint32();
                    break;
                case 4:
                    message.storedSize = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? Number(object.id) : 0,
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            globalVirtualGroupId: (0, helpers_1.isSet)(object.globalVirtualGroupId) ? Number(object.globalVirtualGroupId) : 0,
            storedSize: (0, helpers_1.isSet)(object.storedSize) ? helpers_1.Long.fromValue(object.storedSize) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = Math.round(message.id));
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        message.globalVirtualGroupId !== undefined && (obj.globalVirtualGroupId = Math.round(message.globalVirtualGroupId));
        message.storedSize !== undefined && (obj.storedSize = (message.storedSize || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventUpdateLocalVirtualGroup();
        message.id = object.id ?? 0;
        message.bucketId = object.bucketId ?? "";
        message.globalVirtualGroupId = object.globalVirtualGroupId ?? 0;
        message.storedSize = object.storedSize !== undefined && object.storedSize !== null ? helpers_1.Long.fromValue(object.storedSize) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id,
            bucketId: object?.bucket_id,
            globalVirtualGroupId: object?.global_virtual_group_id,
            storedSize: object?.stored_size
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        obj.bucket_id = message.bucketId;
        obj.global_virtual_group_id = message.globalVirtualGroupId;
        obj.stored_size = message.storedSize;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventUpdateLocalVirtualGroup();
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        if (object.global_virtual_group_id !== undefined && object.global_virtual_group_id !== null) {
            message.globalVirtualGroupId = object.global_virtual_group_id;
        }
        if (object.stored_size !== undefined && object.stored_size !== null) {
            message.storedSize = helpers_1.Long.fromString(object.stored_size);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.id = message.id;
        obj.bucket_id = message.bucketId;
        obj.global_virtual_group_id = message.globalVirtualGroupId;
        obj.stored_size = message.storedSize ? message.storedSize.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventUpdateLocalVirtualGroup.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventUpdateLocalVirtualGroup.decode(message.value);
    },
    toProto(message) {
        return exports.EventUpdateLocalVirtualGroup.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.EventUpdateLocalVirtualGroup",
            value: exports.EventUpdateLocalVirtualGroup.encode(message).finish()
        };
    }
};
function createBaseEventDeleteLocalVirtualGroup() {
    return {
        id: 0,
        bucketId: ""
    };
}
exports.EventDeleteLocalVirtualGroup = {
    typeUrl: "/greenfield.virtualgroup.EventDeleteLocalVirtualGroup",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.bucketId !== "") {
            writer.uint32(18).string(message.bucketId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDeleteLocalVirtualGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.bucketId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? Number(object.id) : 0,
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = Math.round(message.id));
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventDeleteLocalVirtualGroup();
        message.id = object.id ?? 0;
        message.bucketId = object.bucketId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id,
            bucketId: object?.bucket_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        obj.bucket_id = message.bucketId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventDeleteLocalVirtualGroup();
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.id = message.id;
        obj.bucket_id = message.bucketId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventDeleteLocalVirtualGroup.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventDeleteLocalVirtualGroup.decode(message.value);
    },
    toProto(message) {
        return exports.EventDeleteLocalVirtualGroup.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.EventDeleteLocalVirtualGroup",
            value: exports.EventDeleteLocalVirtualGroup.encode(message).finish()
        };
    }
};
function createBaseEventSwapOut() {
    return {
        storageProviderId: 0,
        globalVirtualGroupFamilyId: 0,
        globalVirtualGroupIds: [],
        successorSpId: 0
    };
}
exports.EventSwapOut = {
    typeUrl: "/greenfield.virtualgroup.EventSwapOut",
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProviderId !== 0) {
            writer.uint32(8).uint32(message.storageProviderId);
        }
        if (message.globalVirtualGroupFamilyId !== 0) {
            writer.uint32(16).uint32(message.globalVirtualGroupFamilyId);
        }
        writer.uint32(26).fork();
        for (const v of message.globalVirtualGroupIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        if (message.successorSpId !== 0) {
            writer.uint32(32).uint32(message.successorSpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventSwapOut();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProviderId = reader.uint32();
                    break;
                case 2:
                    message.globalVirtualGroupFamilyId = reader.uint32();
                    break;
                case 3:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalVirtualGroupIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.globalVirtualGroupIds.push(reader.uint32());
                    }
                    break;
                case 4:
                    message.successorSpId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProviderId: (0, helpers_1.isSet)(object.storageProviderId) ? Number(object.storageProviderId) : 0,
            globalVirtualGroupFamilyId: (0, helpers_1.isSet)(object.globalVirtualGroupFamilyId) ? Number(object.globalVirtualGroupFamilyId) : 0,
            globalVirtualGroupIds: Array.isArray(object?.globalVirtualGroupIds) ? object.globalVirtualGroupIds.map((e) => Number(e)) : [],
            successorSpId: (0, helpers_1.isSet)(object.successorSpId) ? Number(object.successorSpId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProviderId !== undefined && (obj.storageProviderId = Math.round(message.storageProviderId));
        message.globalVirtualGroupFamilyId !== undefined && (obj.globalVirtualGroupFamilyId = Math.round(message.globalVirtualGroupFamilyId));
        if (message.globalVirtualGroupIds) {
            obj.globalVirtualGroupIds = message.globalVirtualGroupIds.map(e => Math.round(e));
        }
        else {
            obj.globalVirtualGroupIds = [];
        }
        message.successorSpId !== undefined && (obj.successorSpId = Math.round(message.successorSpId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventSwapOut();
        message.storageProviderId = object.storageProviderId ?? 0;
        message.globalVirtualGroupFamilyId = object.globalVirtualGroupFamilyId ?? 0;
        message.globalVirtualGroupIds = object.globalVirtualGroupIds?.map(e => e) || [];
        message.successorSpId = object.successorSpId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            storageProviderId: object?.storage_provider_id,
            globalVirtualGroupFamilyId: object?.global_virtual_group_family_id,
            globalVirtualGroupIds: Array.isArray(object?.global_virtual_group_ids) ? object.global_virtual_group_ids.map((e) => e) : [],
            successorSpId: object?.successor_sp_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.storage_provider_id = message.storageProviderId;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        obj.successor_sp_id = message.successorSpId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventSwapOut();
        if (object.storage_provider_id !== undefined && object.storage_provider_id !== null) {
            message.storageProviderId = object.storage_provider_id;
        }
        if (object.global_virtual_group_family_id !== undefined && object.global_virtual_group_family_id !== null) {
            message.globalVirtualGroupFamilyId = object.global_virtual_group_family_id;
        }
        message.globalVirtualGroupIds = object.global_virtual_group_ids?.map(e => e) || [];
        if (object.successor_sp_id !== undefined && object.successor_sp_id !== null) {
            message.successorSpId = object.successor_sp_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.storage_provider_id = message.storageProviderId;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        obj.successor_sp_id = message.successorSpId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventSwapOut.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventSwapOut.decode(message.value);
    },
    toProto(message) {
        return exports.EventSwapOut.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.EventSwapOut",
            value: exports.EventSwapOut.encode(message).finish()
        };
    }
};
function createBaseEventCompleteSwapOut() {
    return {
        storageProviderId: 0,
        srcStorageProviderId: 0,
        globalVirtualGroupFamilyId: 0,
        globalVirtualGroupIds: []
    };
}
exports.EventCompleteSwapOut = {
    typeUrl: "/greenfield.virtualgroup.EventCompleteSwapOut",
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProviderId !== 0) {
            writer.uint32(8).uint32(message.storageProviderId);
        }
        if (message.srcStorageProviderId !== 0) {
            writer.uint32(16).uint32(message.srcStorageProviderId);
        }
        if (message.globalVirtualGroupFamilyId !== 0) {
            writer.uint32(24).uint32(message.globalVirtualGroupFamilyId);
        }
        writer.uint32(34).fork();
        for (const v of message.globalVirtualGroupIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCompleteSwapOut();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProviderId = reader.uint32();
                    break;
                case 2:
                    message.srcStorageProviderId = reader.uint32();
                    break;
                case 3:
                    message.globalVirtualGroupFamilyId = reader.uint32();
                    break;
                case 4:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalVirtualGroupIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.globalVirtualGroupIds.push(reader.uint32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProviderId: (0, helpers_1.isSet)(object.storageProviderId) ? Number(object.storageProviderId) : 0,
            srcStorageProviderId: (0, helpers_1.isSet)(object.srcStorageProviderId) ? Number(object.srcStorageProviderId) : 0,
            globalVirtualGroupFamilyId: (0, helpers_1.isSet)(object.globalVirtualGroupFamilyId) ? Number(object.globalVirtualGroupFamilyId) : 0,
            globalVirtualGroupIds: Array.isArray(object?.globalVirtualGroupIds) ? object.globalVirtualGroupIds.map((e) => Number(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProviderId !== undefined && (obj.storageProviderId = Math.round(message.storageProviderId));
        message.srcStorageProviderId !== undefined && (obj.srcStorageProviderId = Math.round(message.srcStorageProviderId));
        message.globalVirtualGroupFamilyId !== undefined && (obj.globalVirtualGroupFamilyId = Math.round(message.globalVirtualGroupFamilyId));
        if (message.globalVirtualGroupIds) {
            obj.globalVirtualGroupIds = message.globalVirtualGroupIds.map(e => Math.round(e));
        }
        else {
            obj.globalVirtualGroupIds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCompleteSwapOut();
        message.storageProviderId = object.storageProviderId ?? 0;
        message.srcStorageProviderId = object.srcStorageProviderId ?? 0;
        message.globalVirtualGroupFamilyId = object.globalVirtualGroupFamilyId ?? 0;
        message.globalVirtualGroupIds = object.globalVirtualGroupIds?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            storageProviderId: object?.storage_provider_id,
            srcStorageProviderId: object?.src_storage_provider_id,
            globalVirtualGroupFamilyId: object?.global_virtual_group_family_id,
            globalVirtualGroupIds: Array.isArray(object?.global_virtual_group_ids) ? object.global_virtual_group_ids.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.storage_provider_id = message.storageProviderId;
        obj.src_storage_provider_id = message.srcStorageProviderId;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventCompleteSwapOut();
        if (object.storage_provider_id !== undefined && object.storage_provider_id !== null) {
            message.storageProviderId = object.storage_provider_id;
        }
        if (object.src_storage_provider_id !== undefined && object.src_storage_provider_id !== null) {
            message.srcStorageProviderId = object.src_storage_provider_id;
        }
        if (object.global_virtual_group_family_id !== undefined && object.global_virtual_group_family_id !== null) {
            message.globalVirtualGroupFamilyId = object.global_virtual_group_family_id;
        }
        message.globalVirtualGroupIds = object.global_virtual_group_ids?.map(e => e) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.storage_provider_id = message.storageProviderId;
        obj.src_storage_provider_id = message.srcStorageProviderId;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventCompleteSwapOut.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventCompleteSwapOut.decode(message.value);
    },
    toProto(message) {
        return exports.EventCompleteSwapOut.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.EventCompleteSwapOut",
            value: exports.EventCompleteSwapOut.encode(message).finish()
        };
    }
};
function createBaseEventCancelSwapOut() {
    return {
        storageProviderId: 0,
        globalVirtualGroupFamilyId: 0,
        globalVirtualGroupIds: [],
        successorSpId: 0
    };
}
exports.EventCancelSwapOut = {
    typeUrl: "/greenfield.virtualgroup.EventCancelSwapOut",
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProviderId !== 0) {
            writer.uint32(8).uint32(message.storageProviderId);
        }
        if (message.globalVirtualGroupFamilyId !== 0) {
            writer.uint32(16).uint32(message.globalVirtualGroupFamilyId);
        }
        writer.uint32(26).fork();
        for (const v of message.globalVirtualGroupIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        if (message.successorSpId !== 0) {
            writer.uint32(32).uint32(message.successorSpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCancelSwapOut();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProviderId = reader.uint32();
                    break;
                case 2:
                    message.globalVirtualGroupFamilyId = reader.uint32();
                    break;
                case 3:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalVirtualGroupIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.globalVirtualGroupIds.push(reader.uint32());
                    }
                    break;
                case 4:
                    message.successorSpId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProviderId: (0, helpers_1.isSet)(object.storageProviderId) ? Number(object.storageProviderId) : 0,
            globalVirtualGroupFamilyId: (0, helpers_1.isSet)(object.globalVirtualGroupFamilyId) ? Number(object.globalVirtualGroupFamilyId) : 0,
            globalVirtualGroupIds: Array.isArray(object?.globalVirtualGroupIds) ? object.globalVirtualGroupIds.map((e) => Number(e)) : [],
            successorSpId: (0, helpers_1.isSet)(object.successorSpId) ? Number(object.successorSpId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProviderId !== undefined && (obj.storageProviderId = Math.round(message.storageProviderId));
        message.globalVirtualGroupFamilyId !== undefined && (obj.globalVirtualGroupFamilyId = Math.round(message.globalVirtualGroupFamilyId));
        if (message.globalVirtualGroupIds) {
            obj.globalVirtualGroupIds = message.globalVirtualGroupIds.map(e => Math.round(e));
        }
        else {
            obj.globalVirtualGroupIds = [];
        }
        message.successorSpId !== undefined && (obj.successorSpId = Math.round(message.successorSpId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCancelSwapOut();
        message.storageProviderId = object.storageProviderId ?? 0;
        message.globalVirtualGroupFamilyId = object.globalVirtualGroupFamilyId ?? 0;
        message.globalVirtualGroupIds = object.globalVirtualGroupIds?.map(e => e) || [];
        message.successorSpId = object.successorSpId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            storageProviderId: object?.storage_provider_id,
            globalVirtualGroupFamilyId: object?.global_virtual_group_family_id,
            globalVirtualGroupIds: Array.isArray(object?.global_virtual_group_ids) ? object.global_virtual_group_ids.map((e) => e) : [],
            successorSpId: object?.successor_sp_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.storage_provider_id = message.storageProviderId;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        obj.successor_sp_id = message.successorSpId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventCancelSwapOut();
        if (object.storage_provider_id !== undefined && object.storage_provider_id !== null) {
            message.storageProviderId = object.storage_provider_id;
        }
        if (object.global_virtual_group_family_id !== undefined && object.global_virtual_group_family_id !== null) {
            message.globalVirtualGroupFamilyId = object.global_virtual_group_family_id;
        }
        message.globalVirtualGroupIds = object.global_virtual_group_ids?.map(e => e) || [];
        if (object.successor_sp_id !== undefined && object.successor_sp_id !== null) {
            message.successorSpId = object.successor_sp_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.storage_provider_id = message.storageProviderId;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        obj.successor_sp_id = message.successorSpId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventCancelSwapOut.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventCancelSwapOut.decode(message.value);
    },
    toProto(message) {
        return exports.EventCancelSwapOut.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.EventCancelSwapOut",
            value: exports.EventCancelSwapOut.encode(message).finish()
        };
    }
};
function createBaseEventStorageProviderExit() {
    return {
        storageProviderId: 0,
        operatorAddress: ""
    };
}
exports.EventStorageProviderExit = {
    typeUrl: "/greenfield.virtualgroup.EventStorageProviderExit",
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProviderId !== 0) {
            writer.uint32(8).uint32(message.storageProviderId);
        }
        if (message.operatorAddress !== "") {
            writer.uint32(18).string(message.operatorAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventStorageProviderExit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProviderId = reader.uint32();
                    break;
                case 2:
                    message.operatorAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProviderId: (0, helpers_1.isSet)(object.storageProviderId) ? Number(object.storageProviderId) : 0,
            operatorAddress: (0, helpers_1.isSet)(object.operatorAddress) ? String(object.operatorAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProviderId !== undefined && (obj.storageProviderId = Math.round(message.storageProviderId));
        message.operatorAddress !== undefined && (obj.operatorAddress = message.operatorAddress);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventStorageProviderExit();
        message.storageProviderId = object.storageProviderId ?? 0;
        message.operatorAddress = object.operatorAddress ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            storageProviderId: object?.storage_provider_id,
            operatorAddress: object?.operator_address
        };
    },
    toSDK(message) {
        const obj = {};
        obj.storage_provider_id = message.storageProviderId;
        obj.operator_address = message.operatorAddress;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventStorageProviderExit();
        if (object.storage_provider_id !== undefined && object.storage_provider_id !== null) {
            message.storageProviderId = object.storage_provider_id;
        }
        if (object.operator_address !== undefined && object.operator_address !== null) {
            message.operatorAddress = object.operator_address;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.storage_provider_id = message.storageProviderId;
        obj.operator_address = message.operatorAddress;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventStorageProviderExit.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventStorageProviderExit.decode(message.value);
    },
    toProto(message) {
        return exports.EventStorageProviderExit.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.EventStorageProviderExit",
            value: exports.EventStorageProviderExit.encode(message).finish()
        };
    }
};
function createBaseEventCompleteStorageProviderExit() {
    return {
        storageProviderId: 0,
        operatorAddress: "",
        totalDeposit: ""
    };
}
exports.EventCompleteStorageProviderExit = {
    typeUrl: "/greenfield.virtualgroup.EventCompleteStorageProviderExit",
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProviderId !== 0) {
            writer.uint32(8).uint32(message.storageProviderId);
        }
        if (message.operatorAddress !== "") {
            writer.uint32(18).string(message.operatorAddress);
        }
        if (message.totalDeposit !== "") {
            writer.uint32(26).string(message.totalDeposit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCompleteStorageProviderExit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProviderId = reader.uint32();
                    break;
                case 2:
                    message.operatorAddress = reader.string();
                    break;
                case 3:
                    message.totalDeposit = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProviderId: (0, helpers_1.isSet)(object.storageProviderId) ? Number(object.storageProviderId) : 0,
            operatorAddress: (0, helpers_1.isSet)(object.operatorAddress) ? String(object.operatorAddress) : "",
            totalDeposit: (0, helpers_1.isSet)(object.totalDeposit) ? String(object.totalDeposit) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProviderId !== undefined && (obj.storageProviderId = Math.round(message.storageProviderId));
        message.operatorAddress !== undefined && (obj.operatorAddress = message.operatorAddress);
        message.totalDeposit !== undefined && (obj.totalDeposit = message.totalDeposit);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCompleteStorageProviderExit();
        message.storageProviderId = object.storageProviderId ?? 0;
        message.operatorAddress = object.operatorAddress ?? "";
        message.totalDeposit = object.totalDeposit ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            storageProviderId: object?.storage_provider_id,
            operatorAddress: object?.operator_address,
            totalDeposit: object?.total_deposit
        };
    },
    toSDK(message) {
        const obj = {};
        obj.storage_provider_id = message.storageProviderId;
        obj.operator_address = message.operatorAddress;
        obj.total_deposit = message.totalDeposit;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventCompleteStorageProviderExit();
        if (object.storage_provider_id !== undefined && object.storage_provider_id !== null) {
            message.storageProviderId = object.storage_provider_id;
        }
        if (object.operator_address !== undefined && object.operator_address !== null) {
            message.operatorAddress = object.operator_address;
        }
        if (object.total_deposit !== undefined && object.total_deposit !== null) {
            message.totalDeposit = object.total_deposit;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.storage_provider_id = message.storageProviderId;
        obj.operator_address = message.operatorAddress;
        obj.total_deposit = message.totalDeposit;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventCompleteStorageProviderExit.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventCompleteStorageProviderExit.decode(message.value);
    },
    toProto(message) {
        return exports.EventCompleteStorageProviderExit.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.EventCompleteStorageProviderExit",
            value: exports.EventCompleteStorageProviderExit.encode(message).finish()
        };
    }
};
//# sourceMappingURL=events.js.map