/// <reference types="long" />
import { Long } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.virtualgroup";
export interface EventCreateGlobalVirtualGroup {
    /** The unique id of global virtual group, which is generated by blockchain */
    id: number;
    /** The id of the global virtual group family where the gvg belongs */
    familyId: number;
    /** The id of the primary sp who create this global virtual group */
    primarySpId: number;
    /** The ids of the secondary sps which belongs to this global virtual group */
    secondarySpIds: number[];
    /** The store size of all the objects stores in this global virtual group */
    storedSize: Long;
    /**
     * The virtual payment address of this global virtual group, which is auto generated by blockchain
     * And, all users' payment flows will flow to this account
     */
    virtualPaymentAddress: string;
    /** The total amount of the staking for this global virtual group */
    totalDeposit: string;
}
export interface EventCreateGlobalVirtualGroupProtoMsg {
    typeUrl: "/greenfield.virtualgroup.EventCreateGlobalVirtualGroup";
    value: Uint8Array;
}
export interface EventCreateGlobalVirtualGroupAmino {
    /** The unique id of global virtual group, which is generated by blockchain */
    id?: number;
    /** The id of the global virtual group family where the gvg belongs */
    family_id?: number;
    /** The id of the primary sp who create this global virtual group */
    primary_sp_id?: number;
    /** The ids of the secondary sps which belongs to this global virtual group */
    secondary_sp_ids?: number[];
    /** The store size of all the objects stores in this global virtual group */
    stored_size?: string;
    /**
     * The virtual payment address of this global virtual group, which is auto generated by blockchain
     * And, all users' payment flows will flow to this account
     */
    virtual_payment_address?: string;
    /** The total amount of the staking for this global virtual group */
    total_deposit?: string;
}
export interface EventCreateGlobalVirtualGroupAminoMsg {
    type: "/greenfield.virtualgroup.EventCreateGlobalVirtualGroup";
    value: EventCreateGlobalVirtualGroupAmino;
}
export interface EventCreateGlobalVirtualGroupSDKType {
    id: number;
    family_id: number;
    primary_sp_id: number;
    secondary_sp_ids: number[];
    stored_size: Long;
    virtual_payment_address: string;
    total_deposit: string;
}
export interface EventUpdateGlobalVirtualGroup {
    /** The id of global virtual group, which has been updated */
    id: number;
    /** The store size of all the objects stores in this global virtual group */
    storeSize: Long;
    /** The total amount of the staking for this global virtual group */
    totalDeposit: string;
    /** Primary SP ID represents the unique id of the primary storage provider in the group. */
    primarySpId: number;
    /** Secondary SP IDs represents the list of unique identifiers of the secondary storage providers in the group. */
    secondarySpIds: number[];
}
export interface EventUpdateGlobalVirtualGroupProtoMsg {
    typeUrl: "/greenfield.virtualgroup.EventUpdateGlobalVirtualGroup";
    value: Uint8Array;
}
export interface EventUpdateGlobalVirtualGroupAmino {
    /** The id of global virtual group, which has been updated */
    id?: number;
    /** The store size of all the objects stores in this global virtual group */
    store_size?: string;
    /** The total amount of the staking for this global virtual group */
    total_deposit?: string;
    /** Primary SP ID represents the unique id of the primary storage provider in the group. */
    primary_sp_id?: number;
    /** Secondary SP IDs represents the list of unique identifiers of the secondary storage providers in the group. */
    secondary_sp_ids?: number[];
}
export interface EventUpdateGlobalVirtualGroupAminoMsg {
    type: "/greenfield.virtualgroup.EventUpdateGlobalVirtualGroup";
    value: EventUpdateGlobalVirtualGroupAmino;
}
export interface EventUpdateGlobalVirtualGroupSDKType {
    id: number;
    store_size: Long;
    total_deposit: string;
    primary_sp_id: number;
    secondary_sp_ids: number[];
}
export interface EventDeleteGlobalVirtualGroup {
    /** The id of global virtual group, which has been deleted */
    id: number;
    /** The id of the primary sp who create this global virtual group family */
    primarySpId: number;
}
export interface EventDeleteGlobalVirtualGroupProtoMsg {
    typeUrl: "/greenfield.virtualgroup.EventDeleteGlobalVirtualGroup";
    value: Uint8Array;
}
export interface EventDeleteGlobalVirtualGroupAmino {
    /** The id of global virtual group, which has been deleted */
    id?: number;
    /** The id of the primary sp who create this global virtual group family */
    primary_sp_id?: number;
}
export interface EventDeleteGlobalVirtualGroupAminoMsg {
    type: "/greenfield.virtualgroup.EventDeleteGlobalVirtualGroup";
    value: EventDeleteGlobalVirtualGroupAmino;
}
export interface EventDeleteGlobalVirtualGroupSDKType {
    id: number;
    primary_sp_id: number;
}
export interface EventCreateGlobalVirtualGroupFamily {
    /** The id of global virtual group family, which is auto generated by blockchain */
    id: number;
    /** The id of the primary sp who create this global virtual group family */
    primarySpId: number;
    /**
     * The virtual payment address of this global virtual group family, which is auto generated by blockcahin
     * all users' read quota payment flows will flow to this account.
     */
    virtualPaymentAddress: string;
    /** global_virtual_group_ids are the ids of gvgs in this family */
    globalVirtualGroupIds: number[];
}
export interface EventCreateGlobalVirtualGroupFamilyProtoMsg {
    typeUrl: "/greenfield.virtualgroup.EventCreateGlobalVirtualGroupFamily";
    value: Uint8Array;
}
export interface EventCreateGlobalVirtualGroupFamilyAmino {
    /** The id of global virtual group family, which is auto generated by blockchain */
    id?: number;
    /** The id of the primary sp who create this global virtual group family */
    primary_sp_id?: number;
    /**
     * The virtual payment address of this global virtual group family, which is auto generated by blockcahin
     * all users' read quota payment flows will flow to this account.
     */
    virtual_payment_address?: string;
    /** global_virtual_group_ids are the ids of gvgs in this family */
    global_virtual_group_ids?: number[];
}
export interface EventCreateGlobalVirtualGroupFamilyAminoMsg {
    type: "/greenfield.virtualgroup.EventCreateGlobalVirtualGroupFamily";
    value: EventCreateGlobalVirtualGroupFamilyAmino;
}
export interface EventCreateGlobalVirtualGroupFamilySDKType {
    id: number;
    primary_sp_id: number;
    virtual_payment_address: string;
    global_virtual_group_ids: number[];
}
export interface EventUpdateGlobalVirtualGroupFamily {
    /** The id of global virtual group family, which is auto generated by blockchain */
    id: number;
    /** The id of the primary sp who create this global virtual group family */
    primarySpId: number;
    /** global_virtual_group_ids are the ids of gvgs in this family */
    globalVirtualGroupIds: number[];
}
export interface EventUpdateGlobalVirtualGroupFamilyProtoMsg {
    typeUrl: "/greenfield.virtualgroup.EventUpdateGlobalVirtualGroupFamily";
    value: Uint8Array;
}
export interface EventUpdateGlobalVirtualGroupFamilyAmino {
    /** The id of global virtual group family, which is auto generated by blockchain */
    id?: number;
    /** The id of the primary sp who create this global virtual group family */
    primary_sp_id?: number;
    /** global_virtual_group_ids are the ids of gvgs in this family */
    global_virtual_group_ids?: number[];
}
export interface EventUpdateGlobalVirtualGroupFamilyAminoMsg {
    type: "/greenfield.virtualgroup.EventUpdateGlobalVirtualGroupFamily";
    value: EventUpdateGlobalVirtualGroupFamilyAmino;
}
export interface EventUpdateGlobalVirtualGroupFamilySDKType {
    id: number;
    primary_sp_id: number;
    global_virtual_group_ids: number[];
}
export interface EventDeleteGlobalVirtualGroupFamily {
    /** The id of global virtual group family, which is auto generated by blockchain */
    id: number;
    /** The id of the primary sp who create this global virtual group family */
    primarySpId: number;
}
export interface EventDeleteGlobalVirtualGroupFamilyProtoMsg {
    typeUrl: "/greenfield.virtualgroup.EventDeleteGlobalVirtualGroupFamily";
    value: Uint8Array;
}
export interface EventDeleteGlobalVirtualGroupFamilyAmino {
    /** The id of global virtual group family, which is auto generated by blockchain */
    id?: number;
    /** The id of the primary sp who create this global virtual group family */
    primary_sp_id?: number;
}
export interface EventDeleteGlobalVirtualGroupFamilyAminoMsg {
    type: "/greenfield.virtualgroup.EventDeleteGlobalVirtualGroupFamily";
    value: EventDeleteGlobalVirtualGroupFamilyAmino;
}
export interface EventDeleteGlobalVirtualGroupFamilySDKType {
    id: number;
    primary_sp_id: number;
}
export interface EventCreateLocalVirtualGroup {
    /**
     * The id of the local virtual group and this ID is unique within the bucket
     * and different buckets will have the same ID
     */
    id: number;
    /** The id of the bucket */
    bucketId: string;
    /** The id of the global virtual group */
    globalVirtualGroupId: number;
    /** The stored size of all the objects stores in this lvg */
    storedSize: Long;
}
export interface EventCreateLocalVirtualGroupProtoMsg {
    typeUrl: "/greenfield.virtualgroup.EventCreateLocalVirtualGroup";
    value: Uint8Array;
}
export interface EventCreateLocalVirtualGroupAmino {
    /**
     * The id of the local virtual group and this ID is unique within the bucket
     * and different buckets will have the same ID
     */
    id?: number;
    /** The id of the bucket */
    bucket_id?: string;
    /** The id of the global virtual group */
    global_virtual_group_id?: number;
    /** The stored size of all the objects stores in this lvg */
    stored_size?: string;
}
export interface EventCreateLocalVirtualGroupAminoMsg {
    type: "/greenfield.virtualgroup.EventCreateLocalVirtualGroup";
    value: EventCreateLocalVirtualGroupAmino;
}
export interface EventCreateLocalVirtualGroupSDKType {
    id: number;
    bucket_id: string;
    global_virtual_group_id: number;
    stored_size: Long;
}
export interface EventUpdateLocalVirtualGroup {
    /** The id of the local virtual group */
    id: number;
    /** The id of the bucket */
    bucketId: string;
    /** The global_virtual_group_id is gvgid of lvg after migrate */
    globalVirtualGroupId: number;
    /** The stored size of all the objects stores in this lvg */
    storedSize: Long;
}
export interface EventUpdateLocalVirtualGroupProtoMsg {
    typeUrl: "/greenfield.virtualgroup.EventUpdateLocalVirtualGroup";
    value: Uint8Array;
}
export interface EventUpdateLocalVirtualGroupAmino {
    /** The id of the local virtual group */
    id?: number;
    /** The id of the bucket */
    bucket_id?: string;
    /** The global_virtual_group_id is gvgid of lvg after migrate */
    global_virtual_group_id?: number;
    /** The stored size of all the objects stores in this lvg */
    stored_size?: string;
}
export interface EventUpdateLocalVirtualGroupAminoMsg {
    type: "/greenfield.virtualgroup.EventUpdateLocalVirtualGroup";
    value: EventUpdateLocalVirtualGroupAmino;
}
export interface EventUpdateLocalVirtualGroupSDKType {
    id: number;
    bucket_id: string;
    global_virtual_group_id: number;
    stored_size: Long;
}
export interface EventDeleteLocalVirtualGroup {
    /** The id of the local virtual group */
    id: number;
    /** The id of the bucket */
    bucketId: string;
}
export interface EventDeleteLocalVirtualGroupProtoMsg {
    typeUrl: "/greenfield.virtualgroup.EventDeleteLocalVirtualGroup";
    value: Uint8Array;
}
export interface EventDeleteLocalVirtualGroupAmino {
    /** The id of the local virtual group */
    id?: number;
    /** The id of the bucket */
    bucket_id?: string;
}
export interface EventDeleteLocalVirtualGroupAminoMsg {
    type: "/greenfield.virtualgroup.EventDeleteLocalVirtualGroup";
    value: EventDeleteLocalVirtualGroupAmino;
}
export interface EventDeleteLocalVirtualGroupSDKType {
    id: number;
    bucket_id: string;
}
export interface EventSwapOut {
    /** The id of the storage provider who wants to swap out */
    storageProviderId: number;
    /** The id of the gvg family which the storage provider wants to swap out as primary sp */
    globalVirtualGroupFamilyId: number;
    /** The ids of the gvgs which the storage provider wants to swap out as secondary sp */
    globalVirtualGroupIds: number[];
    /** The id of the successor sp who take over this family or these gvgs */
    successorSpId: number;
}
export interface EventSwapOutProtoMsg {
    typeUrl: "/greenfield.virtualgroup.EventSwapOut";
    value: Uint8Array;
}
export interface EventSwapOutAmino {
    /** The id of the storage provider who wants to swap out */
    storage_provider_id?: number;
    /** The id of the gvg family which the storage provider wants to swap out as primary sp */
    global_virtual_group_family_id?: number;
    /** The ids of the gvgs which the storage provider wants to swap out as secondary sp */
    global_virtual_group_ids?: number[];
    /** The id of the successor sp who take over this family or these gvgs */
    successor_sp_id?: number;
}
export interface EventSwapOutAminoMsg {
    type: "/greenfield.virtualgroup.EventSwapOut";
    value: EventSwapOutAmino;
}
export interface EventSwapOutSDKType {
    storage_provider_id: number;
    global_virtual_group_family_id: number;
    global_virtual_group_ids: number[];
    successor_sp_id: number;
}
export interface EventCompleteSwapOut {
    /** The id of the storage provider who complete swap out. */
    storageProviderId: number;
    /** The id of the storage provider who swap out the family or gvgs */
    srcStorageProviderId: number;
    /** The id of the gvg family */
    globalVirtualGroupFamilyId: number;
    /** The ids of the gvgs */
    globalVirtualGroupIds: number[];
}
export interface EventCompleteSwapOutProtoMsg {
    typeUrl: "/greenfield.virtualgroup.EventCompleteSwapOut";
    value: Uint8Array;
}
export interface EventCompleteSwapOutAmino {
    /** The id of the storage provider who complete swap out. */
    storage_provider_id?: number;
    /** The id of the storage provider who swap out the family or gvgs */
    src_storage_provider_id?: number;
    /** The id of the gvg family */
    global_virtual_group_family_id?: number;
    /** The ids of the gvgs */
    global_virtual_group_ids?: number[];
}
export interface EventCompleteSwapOutAminoMsg {
    type: "/greenfield.virtualgroup.EventCompleteSwapOut";
    value: EventCompleteSwapOutAmino;
}
export interface EventCompleteSwapOutSDKType {
    storage_provider_id: number;
    src_storage_provider_id: number;
    global_virtual_group_family_id: number;
    global_virtual_group_ids: number[];
}
export interface EventCancelSwapOut {
    /** The id of the storage provider who cancel swap out. */
    storageProviderId: number;
    /** The id of the gvg family */
    globalVirtualGroupFamilyId: number;
    /** The ids of the gvgs */
    globalVirtualGroupIds: number[];
    /** The id of the successor sp who take over this family or these gvgs */
    successorSpId: number;
}
export interface EventCancelSwapOutProtoMsg {
    typeUrl: "/greenfield.virtualgroup.EventCancelSwapOut";
    value: Uint8Array;
}
export interface EventCancelSwapOutAmino {
    /** The id of the storage provider who cancel swap out. */
    storage_provider_id?: number;
    /** The id of the gvg family */
    global_virtual_group_family_id?: number;
    /** The ids of the gvgs */
    global_virtual_group_ids?: number[];
    /** The id of the successor sp who take over this family or these gvgs */
    successor_sp_id?: number;
}
export interface EventCancelSwapOutAminoMsg {
    type: "/greenfield.virtualgroup.EventCancelSwapOut";
    value: EventCancelSwapOutAmino;
}
export interface EventCancelSwapOutSDKType {
    storage_provider_id: number;
    global_virtual_group_family_id: number;
    global_virtual_group_ids: number[];
    successor_sp_id: number;
}
export interface EventStorageProviderExit {
    /** The id of the storage provider who wants to exit */
    storageProviderId: number;
    /** The operator address of the storage provider who wants to exit */
    operatorAddress: string;
}
export interface EventStorageProviderExitProtoMsg {
    typeUrl: "/greenfield.virtualgroup.EventStorageProviderExit";
    value: Uint8Array;
}
export interface EventStorageProviderExitAmino {
    /** The id of the storage provider who wants to exit */
    storage_provider_id?: number;
    /** The operator address of the storage provider who wants to exit */
    operator_address?: string;
}
export interface EventStorageProviderExitAminoMsg {
    type: "/greenfield.virtualgroup.EventStorageProviderExit";
    value: EventStorageProviderExitAmino;
}
export interface EventStorageProviderExitSDKType {
    storage_provider_id: number;
    operator_address: string;
}
export interface EventCompleteStorageProviderExit {
    /** The id of the storage provider who complete exit */
    storageProviderId: number;
    /** The operator address which initial the complete exit transaction */
    operatorAddress: string;
    /** total_deposit defines the number of tokens deposited by this storage provider for staking. */
    totalDeposit: string;
}
export interface EventCompleteStorageProviderExitProtoMsg {
    typeUrl: "/greenfield.virtualgroup.EventCompleteStorageProviderExit";
    value: Uint8Array;
}
export interface EventCompleteStorageProviderExitAmino {
    /** The id of the storage provider who complete exit */
    storage_provider_id?: number;
    /** The operator address which initial the complete exit transaction */
    operator_address?: string;
    /** total_deposit defines the number of tokens deposited by this storage provider for staking. */
    total_deposit?: string;
}
export interface EventCompleteStorageProviderExitAminoMsg {
    type: "/greenfield.virtualgroup.EventCompleteStorageProviderExit";
    value: EventCompleteStorageProviderExitAmino;
}
export interface EventCompleteStorageProviderExitSDKType {
    storage_provider_id: number;
    operator_address: string;
    total_deposit: string;
}
export declare const EventCreateGlobalVirtualGroup: {
    typeUrl: string;
    encode(message: EventCreateGlobalVirtualGroup, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventCreateGlobalVirtualGroup;
    fromJSON(object: any): EventCreateGlobalVirtualGroup;
    toJSON(message: EventCreateGlobalVirtualGroup): unknown;
    fromPartial<I extends {
        id?: number;
        familyId?: number;
        primarySpId?: number;
        secondarySpIds?: number[];
        storedSize?: string | number | Long.Long;
        virtualPaymentAddress?: string;
        totalDeposit?: string;
    } & {
        id?: number;
        familyId?: number;
        primarySpId?: number;
        secondarySpIds?: number[] & number[] & Record<Exclude<keyof I["secondarySpIds"], keyof number[]>, never>;
        storedSize?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["storedSize"], keyof Long.Long>, never>);
        virtualPaymentAddress?: string;
        totalDeposit?: string;
    } & Record<Exclude<keyof I, keyof EventCreateGlobalVirtualGroup>, never>>(object: I): EventCreateGlobalVirtualGroup;
    fromSDK(object: EventCreateGlobalVirtualGroupSDKType): EventCreateGlobalVirtualGroup;
    toSDK(message: EventCreateGlobalVirtualGroup): EventCreateGlobalVirtualGroupSDKType;
    fromAmino(object: EventCreateGlobalVirtualGroupAmino): EventCreateGlobalVirtualGroup;
    toAmino(message: EventCreateGlobalVirtualGroup): EventCreateGlobalVirtualGroupAmino;
    fromAminoMsg(object: EventCreateGlobalVirtualGroupAminoMsg): EventCreateGlobalVirtualGroup;
    fromProtoMsg(message: EventCreateGlobalVirtualGroupProtoMsg): EventCreateGlobalVirtualGroup;
    toProto(message: EventCreateGlobalVirtualGroup): Uint8Array;
    toProtoMsg(message: EventCreateGlobalVirtualGroup): EventCreateGlobalVirtualGroupProtoMsg;
};
export declare const EventUpdateGlobalVirtualGroup: {
    typeUrl: string;
    encode(message: EventUpdateGlobalVirtualGroup, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventUpdateGlobalVirtualGroup;
    fromJSON(object: any): EventUpdateGlobalVirtualGroup;
    toJSON(message: EventUpdateGlobalVirtualGroup): unknown;
    fromPartial<I extends {
        id?: number;
        storeSize?: string | number | Long.Long;
        totalDeposit?: string;
        primarySpId?: number;
        secondarySpIds?: number[];
    } & {
        id?: number;
        storeSize?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["storeSize"], keyof Long.Long>, never>);
        totalDeposit?: string;
        primarySpId?: number;
        secondarySpIds?: number[] & number[] & Record<Exclude<keyof I["secondarySpIds"], keyof number[]>, never>;
    } & Record<Exclude<keyof I, keyof EventUpdateGlobalVirtualGroup>, never>>(object: I): EventUpdateGlobalVirtualGroup;
    fromSDK(object: EventUpdateGlobalVirtualGroupSDKType): EventUpdateGlobalVirtualGroup;
    toSDK(message: EventUpdateGlobalVirtualGroup): EventUpdateGlobalVirtualGroupSDKType;
    fromAmino(object: EventUpdateGlobalVirtualGroupAmino): EventUpdateGlobalVirtualGroup;
    toAmino(message: EventUpdateGlobalVirtualGroup): EventUpdateGlobalVirtualGroupAmino;
    fromAminoMsg(object: EventUpdateGlobalVirtualGroupAminoMsg): EventUpdateGlobalVirtualGroup;
    fromProtoMsg(message: EventUpdateGlobalVirtualGroupProtoMsg): EventUpdateGlobalVirtualGroup;
    toProto(message: EventUpdateGlobalVirtualGroup): Uint8Array;
    toProtoMsg(message: EventUpdateGlobalVirtualGroup): EventUpdateGlobalVirtualGroupProtoMsg;
};
export declare const EventDeleteGlobalVirtualGroup: {
    typeUrl: string;
    encode(message: EventDeleteGlobalVirtualGroup, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventDeleteGlobalVirtualGroup;
    fromJSON(object: any): EventDeleteGlobalVirtualGroup;
    toJSON(message: EventDeleteGlobalVirtualGroup): unknown;
    fromPartial<I extends {
        id?: number;
        primarySpId?: number;
    } & {
        id?: number;
        primarySpId?: number;
    } & Record<Exclude<keyof I, keyof EventDeleteGlobalVirtualGroup>, never>>(object: I): EventDeleteGlobalVirtualGroup;
    fromSDK(object: EventDeleteGlobalVirtualGroupSDKType): EventDeleteGlobalVirtualGroup;
    toSDK(message: EventDeleteGlobalVirtualGroup): EventDeleteGlobalVirtualGroupSDKType;
    fromAmino(object: EventDeleteGlobalVirtualGroupAmino): EventDeleteGlobalVirtualGroup;
    toAmino(message: EventDeleteGlobalVirtualGroup): EventDeleteGlobalVirtualGroupAmino;
    fromAminoMsg(object: EventDeleteGlobalVirtualGroupAminoMsg): EventDeleteGlobalVirtualGroup;
    fromProtoMsg(message: EventDeleteGlobalVirtualGroupProtoMsg): EventDeleteGlobalVirtualGroup;
    toProto(message: EventDeleteGlobalVirtualGroup): Uint8Array;
    toProtoMsg(message: EventDeleteGlobalVirtualGroup): EventDeleteGlobalVirtualGroupProtoMsg;
};
export declare const EventCreateGlobalVirtualGroupFamily: {
    typeUrl: string;
    encode(message: EventCreateGlobalVirtualGroupFamily, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventCreateGlobalVirtualGroupFamily;
    fromJSON(object: any): EventCreateGlobalVirtualGroupFamily;
    toJSON(message: EventCreateGlobalVirtualGroupFamily): unknown;
    fromPartial<I extends {
        id?: number;
        primarySpId?: number;
        virtualPaymentAddress?: string;
        globalVirtualGroupIds?: number[];
    } & {
        id?: number;
        primarySpId?: number;
        virtualPaymentAddress?: string;
        globalVirtualGroupIds?: number[] & number[] & Record<Exclude<keyof I["globalVirtualGroupIds"], keyof number[]>, never>;
    } & Record<Exclude<keyof I, keyof EventCreateGlobalVirtualGroupFamily>, never>>(object: I): EventCreateGlobalVirtualGroupFamily;
    fromSDK(object: EventCreateGlobalVirtualGroupFamilySDKType): EventCreateGlobalVirtualGroupFamily;
    toSDK(message: EventCreateGlobalVirtualGroupFamily): EventCreateGlobalVirtualGroupFamilySDKType;
    fromAmino(object: EventCreateGlobalVirtualGroupFamilyAmino): EventCreateGlobalVirtualGroupFamily;
    toAmino(message: EventCreateGlobalVirtualGroupFamily): EventCreateGlobalVirtualGroupFamilyAmino;
    fromAminoMsg(object: EventCreateGlobalVirtualGroupFamilyAminoMsg): EventCreateGlobalVirtualGroupFamily;
    fromProtoMsg(message: EventCreateGlobalVirtualGroupFamilyProtoMsg): EventCreateGlobalVirtualGroupFamily;
    toProto(message: EventCreateGlobalVirtualGroupFamily): Uint8Array;
    toProtoMsg(message: EventCreateGlobalVirtualGroupFamily): EventCreateGlobalVirtualGroupFamilyProtoMsg;
};
export declare const EventUpdateGlobalVirtualGroupFamily: {
    typeUrl: string;
    encode(message: EventUpdateGlobalVirtualGroupFamily, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventUpdateGlobalVirtualGroupFamily;
    fromJSON(object: any): EventUpdateGlobalVirtualGroupFamily;
    toJSON(message: EventUpdateGlobalVirtualGroupFamily): unknown;
    fromPartial<I extends {
        id?: number;
        primarySpId?: number;
        globalVirtualGroupIds?: number[];
    } & {
        id?: number;
        primarySpId?: number;
        globalVirtualGroupIds?: number[] & number[] & Record<Exclude<keyof I["globalVirtualGroupIds"], keyof number[]>, never>;
    } & Record<Exclude<keyof I, keyof EventUpdateGlobalVirtualGroupFamily>, never>>(object: I): EventUpdateGlobalVirtualGroupFamily;
    fromSDK(object: EventUpdateGlobalVirtualGroupFamilySDKType): EventUpdateGlobalVirtualGroupFamily;
    toSDK(message: EventUpdateGlobalVirtualGroupFamily): EventUpdateGlobalVirtualGroupFamilySDKType;
    fromAmino(object: EventUpdateGlobalVirtualGroupFamilyAmino): EventUpdateGlobalVirtualGroupFamily;
    toAmino(message: EventUpdateGlobalVirtualGroupFamily): EventUpdateGlobalVirtualGroupFamilyAmino;
    fromAminoMsg(object: EventUpdateGlobalVirtualGroupFamilyAminoMsg): EventUpdateGlobalVirtualGroupFamily;
    fromProtoMsg(message: EventUpdateGlobalVirtualGroupFamilyProtoMsg): EventUpdateGlobalVirtualGroupFamily;
    toProto(message: EventUpdateGlobalVirtualGroupFamily): Uint8Array;
    toProtoMsg(message: EventUpdateGlobalVirtualGroupFamily): EventUpdateGlobalVirtualGroupFamilyProtoMsg;
};
export declare const EventDeleteGlobalVirtualGroupFamily: {
    typeUrl: string;
    encode(message: EventDeleteGlobalVirtualGroupFamily, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventDeleteGlobalVirtualGroupFamily;
    fromJSON(object: any): EventDeleteGlobalVirtualGroupFamily;
    toJSON(message: EventDeleteGlobalVirtualGroupFamily): unknown;
    fromPartial<I extends {
        id?: number;
        primarySpId?: number;
    } & {
        id?: number;
        primarySpId?: number;
    } & Record<Exclude<keyof I, keyof EventDeleteGlobalVirtualGroupFamily>, never>>(object: I): EventDeleteGlobalVirtualGroupFamily;
    fromSDK(object: EventDeleteGlobalVirtualGroupFamilySDKType): EventDeleteGlobalVirtualGroupFamily;
    toSDK(message: EventDeleteGlobalVirtualGroupFamily): EventDeleteGlobalVirtualGroupFamilySDKType;
    fromAmino(object: EventDeleteGlobalVirtualGroupFamilyAmino): EventDeleteGlobalVirtualGroupFamily;
    toAmino(message: EventDeleteGlobalVirtualGroupFamily): EventDeleteGlobalVirtualGroupFamilyAmino;
    fromAminoMsg(object: EventDeleteGlobalVirtualGroupFamilyAminoMsg): EventDeleteGlobalVirtualGroupFamily;
    fromProtoMsg(message: EventDeleteGlobalVirtualGroupFamilyProtoMsg): EventDeleteGlobalVirtualGroupFamily;
    toProto(message: EventDeleteGlobalVirtualGroupFamily): Uint8Array;
    toProtoMsg(message: EventDeleteGlobalVirtualGroupFamily): EventDeleteGlobalVirtualGroupFamilyProtoMsg;
};
export declare const EventCreateLocalVirtualGroup: {
    typeUrl: string;
    encode(message: EventCreateLocalVirtualGroup, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventCreateLocalVirtualGroup;
    fromJSON(object: any): EventCreateLocalVirtualGroup;
    toJSON(message: EventCreateLocalVirtualGroup): unknown;
    fromPartial<I extends {
        id?: number;
        bucketId?: string;
        globalVirtualGroupId?: number;
        storedSize?: string | number | Long.Long;
    } & {
        id?: number;
        bucketId?: string;
        globalVirtualGroupId?: number;
        storedSize?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["storedSize"], keyof Long.Long>, never>);
    } & Record<Exclude<keyof I, keyof EventCreateLocalVirtualGroup>, never>>(object: I): EventCreateLocalVirtualGroup;
    fromSDK(object: EventCreateLocalVirtualGroupSDKType): EventCreateLocalVirtualGroup;
    toSDK(message: EventCreateLocalVirtualGroup): EventCreateLocalVirtualGroupSDKType;
    fromAmino(object: EventCreateLocalVirtualGroupAmino): EventCreateLocalVirtualGroup;
    toAmino(message: EventCreateLocalVirtualGroup): EventCreateLocalVirtualGroupAmino;
    fromAminoMsg(object: EventCreateLocalVirtualGroupAminoMsg): EventCreateLocalVirtualGroup;
    fromProtoMsg(message: EventCreateLocalVirtualGroupProtoMsg): EventCreateLocalVirtualGroup;
    toProto(message: EventCreateLocalVirtualGroup): Uint8Array;
    toProtoMsg(message: EventCreateLocalVirtualGroup): EventCreateLocalVirtualGroupProtoMsg;
};
export declare const EventUpdateLocalVirtualGroup: {
    typeUrl: string;
    encode(message: EventUpdateLocalVirtualGroup, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventUpdateLocalVirtualGroup;
    fromJSON(object: any): EventUpdateLocalVirtualGroup;
    toJSON(message: EventUpdateLocalVirtualGroup): unknown;
    fromPartial<I extends {
        id?: number;
        bucketId?: string;
        globalVirtualGroupId?: number;
        storedSize?: string | number | Long.Long;
    } & {
        id?: number;
        bucketId?: string;
        globalVirtualGroupId?: number;
        storedSize?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["storedSize"], keyof Long.Long>, never>);
    } & Record<Exclude<keyof I, keyof EventUpdateLocalVirtualGroup>, never>>(object: I): EventUpdateLocalVirtualGroup;
    fromSDK(object: EventUpdateLocalVirtualGroupSDKType): EventUpdateLocalVirtualGroup;
    toSDK(message: EventUpdateLocalVirtualGroup): EventUpdateLocalVirtualGroupSDKType;
    fromAmino(object: EventUpdateLocalVirtualGroupAmino): EventUpdateLocalVirtualGroup;
    toAmino(message: EventUpdateLocalVirtualGroup): EventUpdateLocalVirtualGroupAmino;
    fromAminoMsg(object: EventUpdateLocalVirtualGroupAminoMsg): EventUpdateLocalVirtualGroup;
    fromProtoMsg(message: EventUpdateLocalVirtualGroupProtoMsg): EventUpdateLocalVirtualGroup;
    toProto(message: EventUpdateLocalVirtualGroup): Uint8Array;
    toProtoMsg(message: EventUpdateLocalVirtualGroup): EventUpdateLocalVirtualGroupProtoMsg;
};
export declare const EventDeleteLocalVirtualGroup: {
    typeUrl: string;
    encode(message: EventDeleteLocalVirtualGroup, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventDeleteLocalVirtualGroup;
    fromJSON(object: any): EventDeleteLocalVirtualGroup;
    toJSON(message: EventDeleteLocalVirtualGroup): unknown;
    fromPartial<I extends {
        id?: number;
        bucketId?: string;
    } & {
        id?: number;
        bucketId?: string;
    } & Record<Exclude<keyof I, keyof EventDeleteLocalVirtualGroup>, never>>(object: I): EventDeleteLocalVirtualGroup;
    fromSDK(object: EventDeleteLocalVirtualGroupSDKType): EventDeleteLocalVirtualGroup;
    toSDK(message: EventDeleteLocalVirtualGroup): EventDeleteLocalVirtualGroupSDKType;
    fromAmino(object: EventDeleteLocalVirtualGroupAmino): EventDeleteLocalVirtualGroup;
    toAmino(message: EventDeleteLocalVirtualGroup): EventDeleteLocalVirtualGroupAmino;
    fromAminoMsg(object: EventDeleteLocalVirtualGroupAminoMsg): EventDeleteLocalVirtualGroup;
    fromProtoMsg(message: EventDeleteLocalVirtualGroupProtoMsg): EventDeleteLocalVirtualGroup;
    toProto(message: EventDeleteLocalVirtualGroup): Uint8Array;
    toProtoMsg(message: EventDeleteLocalVirtualGroup): EventDeleteLocalVirtualGroupProtoMsg;
};
export declare const EventSwapOut: {
    typeUrl: string;
    encode(message: EventSwapOut, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventSwapOut;
    fromJSON(object: any): EventSwapOut;
    toJSON(message: EventSwapOut): unknown;
    fromPartial<I extends {
        storageProviderId?: number;
        globalVirtualGroupFamilyId?: number;
        globalVirtualGroupIds?: number[];
        successorSpId?: number;
    } & {
        storageProviderId?: number;
        globalVirtualGroupFamilyId?: number;
        globalVirtualGroupIds?: number[] & number[] & Record<Exclude<keyof I["globalVirtualGroupIds"], keyof number[]>, never>;
        successorSpId?: number;
    } & Record<Exclude<keyof I, keyof EventSwapOut>, never>>(object: I): EventSwapOut;
    fromSDK(object: EventSwapOutSDKType): EventSwapOut;
    toSDK(message: EventSwapOut): EventSwapOutSDKType;
    fromAmino(object: EventSwapOutAmino): EventSwapOut;
    toAmino(message: EventSwapOut): EventSwapOutAmino;
    fromAminoMsg(object: EventSwapOutAminoMsg): EventSwapOut;
    fromProtoMsg(message: EventSwapOutProtoMsg): EventSwapOut;
    toProto(message: EventSwapOut): Uint8Array;
    toProtoMsg(message: EventSwapOut): EventSwapOutProtoMsg;
};
export declare const EventCompleteSwapOut: {
    typeUrl: string;
    encode(message: EventCompleteSwapOut, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventCompleteSwapOut;
    fromJSON(object: any): EventCompleteSwapOut;
    toJSON(message: EventCompleteSwapOut): unknown;
    fromPartial<I extends {
        storageProviderId?: number;
        srcStorageProviderId?: number;
        globalVirtualGroupFamilyId?: number;
        globalVirtualGroupIds?: number[];
    } & {
        storageProviderId?: number;
        srcStorageProviderId?: number;
        globalVirtualGroupFamilyId?: number;
        globalVirtualGroupIds?: number[] & number[] & Record<Exclude<keyof I["globalVirtualGroupIds"], keyof number[]>, never>;
    } & Record<Exclude<keyof I, keyof EventCompleteSwapOut>, never>>(object: I): EventCompleteSwapOut;
    fromSDK(object: EventCompleteSwapOutSDKType): EventCompleteSwapOut;
    toSDK(message: EventCompleteSwapOut): EventCompleteSwapOutSDKType;
    fromAmino(object: EventCompleteSwapOutAmino): EventCompleteSwapOut;
    toAmino(message: EventCompleteSwapOut): EventCompleteSwapOutAmino;
    fromAminoMsg(object: EventCompleteSwapOutAminoMsg): EventCompleteSwapOut;
    fromProtoMsg(message: EventCompleteSwapOutProtoMsg): EventCompleteSwapOut;
    toProto(message: EventCompleteSwapOut): Uint8Array;
    toProtoMsg(message: EventCompleteSwapOut): EventCompleteSwapOutProtoMsg;
};
export declare const EventCancelSwapOut: {
    typeUrl: string;
    encode(message: EventCancelSwapOut, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventCancelSwapOut;
    fromJSON(object: any): EventCancelSwapOut;
    toJSON(message: EventCancelSwapOut): unknown;
    fromPartial<I extends {
        storageProviderId?: number;
        globalVirtualGroupFamilyId?: number;
        globalVirtualGroupIds?: number[];
        successorSpId?: number;
    } & {
        storageProviderId?: number;
        globalVirtualGroupFamilyId?: number;
        globalVirtualGroupIds?: number[] & number[] & Record<Exclude<keyof I["globalVirtualGroupIds"], keyof number[]>, never>;
        successorSpId?: number;
    } & Record<Exclude<keyof I, keyof EventCancelSwapOut>, never>>(object: I): EventCancelSwapOut;
    fromSDK(object: EventCancelSwapOutSDKType): EventCancelSwapOut;
    toSDK(message: EventCancelSwapOut): EventCancelSwapOutSDKType;
    fromAmino(object: EventCancelSwapOutAmino): EventCancelSwapOut;
    toAmino(message: EventCancelSwapOut): EventCancelSwapOutAmino;
    fromAminoMsg(object: EventCancelSwapOutAminoMsg): EventCancelSwapOut;
    fromProtoMsg(message: EventCancelSwapOutProtoMsg): EventCancelSwapOut;
    toProto(message: EventCancelSwapOut): Uint8Array;
    toProtoMsg(message: EventCancelSwapOut): EventCancelSwapOutProtoMsg;
};
export declare const EventStorageProviderExit: {
    typeUrl: string;
    encode(message: EventStorageProviderExit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventStorageProviderExit;
    fromJSON(object: any): EventStorageProviderExit;
    toJSON(message: EventStorageProviderExit): unknown;
    fromPartial<I extends {
        storageProviderId?: number;
        operatorAddress?: string;
    } & {
        storageProviderId?: number;
        operatorAddress?: string;
    } & Record<Exclude<keyof I, keyof EventStorageProviderExit>, never>>(object: I): EventStorageProviderExit;
    fromSDK(object: EventStorageProviderExitSDKType): EventStorageProviderExit;
    toSDK(message: EventStorageProviderExit): EventStorageProviderExitSDKType;
    fromAmino(object: EventStorageProviderExitAmino): EventStorageProviderExit;
    toAmino(message: EventStorageProviderExit): EventStorageProviderExitAmino;
    fromAminoMsg(object: EventStorageProviderExitAminoMsg): EventStorageProviderExit;
    fromProtoMsg(message: EventStorageProviderExitProtoMsg): EventStorageProviderExit;
    toProto(message: EventStorageProviderExit): Uint8Array;
    toProtoMsg(message: EventStorageProviderExit): EventStorageProviderExitProtoMsg;
};
export declare const EventCompleteStorageProviderExit: {
    typeUrl: string;
    encode(message: EventCompleteStorageProviderExit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventCompleteStorageProviderExit;
    fromJSON(object: any): EventCompleteStorageProviderExit;
    toJSON(message: EventCompleteStorageProviderExit): unknown;
    fromPartial<I extends {
        storageProviderId?: number;
        operatorAddress?: string;
        totalDeposit?: string;
    } & {
        storageProviderId?: number;
        operatorAddress?: string;
        totalDeposit?: string;
    } & Record<Exclude<keyof I, keyof EventCompleteStorageProviderExit>, never>>(object: I): EventCompleteStorageProviderExit;
    fromSDK(object: EventCompleteStorageProviderExitSDKType): EventCompleteStorageProviderExit;
    toSDK(message: EventCompleteStorageProviderExit): EventCompleteStorageProviderExitSDKType;
    fromAmino(object: EventCompleteStorageProviderExitAmino): EventCompleteStorageProviderExit;
    toAmino(message: EventCompleteStorageProviderExit): EventCompleteStorageProviderExitAmino;
    fromAminoMsg(object: EventCompleteStorageProviderExitAminoMsg): EventCompleteStorageProviderExit;
    fromProtoMsg(message: EventCompleteStorageProviderExitProtoMsg): EventCompleteStorageProviderExit;
    toProto(message: EventCompleteStorageProviderExit): Uint8Array;
    toProtoMsg(message: EventCompleteStorageProviderExit): EventCompleteStorageProviderExitProtoMsg;
};
