"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.virtualgroup";
function createBaseParams() {
    return {
        depositDenom: "",
        gvgStakingPerBytes: "",
        maxLocalVirtualGroupNumPerBucket: 0,
        maxGlobalVirtualGroupNumPerFamily: 0,
        maxStoreSizePerFamily: helpers_1.Long.UZERO
    };
}
exports.Params = {
    typeUrl: "/greenfield.virtualgroup.Params",
    encode(message, writer = _m0.Writer.create()) {
        if (message.depositDenom !== "") {
            writer.uint32(10).string(message.depositDenom);
        }
        if (message.gvgStakingPerBytes !== "") {
            writer.uint32(18).string(message.gvgStakingPerBytes);
        }
        if (message.maxLocalVirtualGroupNumPerBucket !== 0) {
            writer.uint32(24).uint32(message.maxLocalVirtualGroupNumPerBucket);
        }
        if (message.maxGlobalVirtualGroupNumPerFamily !== 0) {
            writer.uint32(32).uint32(message.maxGlobalVirtualGroupNumPerFamily);
        }
        if (!message.maxStoreSizePerFamily.isZero()) {
            writer.uint32(40).uint64(message.maxStoreSizePerFamily);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.depositDenom = reader.string();
                    break;
                case 2:
                    message.gvgStakingPerBytes = reader.string();
                    break;
                case 3:
                    message.maxLocalVirtualGroupNumPerBucket = reader.uint32();
                    break;
                case 4:
                    message.maxGlobalVirtualGroupNumPerFamily = reader.uint32();
                    break;
                case 5:
                    message.maxStoreSizePerFamily = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            depositDenom: (0, helpers_1.isSet)(object.depositDenom) ? String(object.depositDenom) : "",
            gvgStakingPerBytes: (0, helpers_1.isSet)(object.gvgStakingPerBytes) ? String(object.gvgStakingPerBytes) : "",
            maxLocalVirtualGroupNumPerBucket: (0, helpers_1.isSet)(object.maxLocalVirtualGroupNumPerBucket) ? Number(object.maxLocalVirtualGroupNumPerBucket) : 0,
            maxGlobalVirtualGroupNumPerFamily: (0, helpers_1.isSet)(object.maxGlobalVirtualGroupNumPerFamily) ? Number(object.maxGlobalVirtualGroupNumPerFamily) : 0,
            maxStoreSizePerFamily: (0, helpers_1.isSet)(object.maxStoreSizePerFamily) ? helpers_1.Long.fromValue(object.maxStoreSizePerFamily) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.depositDenom !== undefined && (obj.depositDenom = message.depositDenom);
        message.gvgStakingPerBytes !== undefined && (obj.gvgStakingPerBytes = message.gvgStakingPerBytes);
        message.maxLocalVirtualGroupNumPerBucket !== undefined && (obj.maxLocalVirtualGroupNumPerBucket = Math.round(message.maxLocalVirtualGroupNumPerBucket));
        message.maxGlobalVirtualGroupNumPerFamily !== undefined && (obj.maxGlobalVirtualGroupNumPerFamily = Math.round(message.maxGlobalVirtualGroupNumPerFamily));
        message.maxStoreSizePerFamily !== undefined && (obj.maxStoreSizePerFamily = (message.maxStoreSizePerFamily || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.depositDenom = object.depositDenom ?? "";
        message.gvgStakingPerBytes = object.gvgStakingPerBytes ?? "";
        message.maxLocalVirtualGroupNumPerBucket = object.maxLocalVirtualGroupNumPerBucket ?? 0;
        message.maxGlobalVirtualGroupNumPerFamily = object.maxGlobalVirtualGroupNumPerFamily ?? 0;
        message.maxStoreSizePerFamily = object.maxStoreSizePerFamily !== undefined && object.maxStoreSizePerFamily !== null ? helpers_1.Long.fromValue(object.maxStoreSizePerFamily) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            depositDenom: object?.deposit_denom,
            gvgStakingPerBytes: object?.gvg_staking_per_bytes,
            maxLocalVirtualGroupNumPerBucket: object?.max_local_virtual_group_num_per_bucket,
            maxGlobalVirtualGroupNumPerFamily: object?.max_global_virtual_group_num_per_family,
            maxStoreSizePerFamily: object?.max_store_size_per_family
        };
    },
    toSDK(message) {
        const obj = {};
        obj.deposit_denom = message.depositDenom;
        obj.gvg_staking_per_bytes = message.gvgStakingPerBytes;
        obj.max_local_virtual_group_num_per_bucket = message.maxLocalVirtualGroupNumPerBucket;
        obj.max_global_virtual_group_num_per_family = message.maxGlobalVirtualGroupNumPerFamily;
        obj.max_store_size_per_family = message.maxStoreSizePerFamily;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseParams();
        if (object.deposit_denom !== undefined && object.deposit_denom !== null) {
            message.depositDenom = object.deposit_denom;
        }
        if (object.gvg_staking_per_bytes !== undefined && object.gvg_staking_per_bytes !== null) {
            message.gvgStakingPerBytes = object.gvg_staking_per_bytes;
        }
        if (object.max_local_virtual_group_num_per_bucket !== undefined && object.max_local_virtual_group_num_per_bucket !== null) {
            message.maxLocalVirtualGroupNumPerBucket = object.max_local_virtual_group_num_per_bucket;
        }
        if (object.max_global_virtual_group_num_per_family !== undefined && object.max_global_virtual_group_num_per_family !== null) {
            message.maxGlobalVirtualGroupNumPerFamily = object.max_global_virtual_group_num_per_family;
        }
        if (object.max_store_size_per_family !== undefined && object.max_store_size_per_family !== null) {
            message.maxStoreSizePerFamily = helpers_1.Long.fromString(object.max_store_size_per_family);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.deposit_denom = message.depositDenom;
        obj.gvg_staking_per_bytes = message.gvgStakingPerBytes;
        obj.max_local_virtual_group_num_per_bucket = message.maxLocalVirtualGroupNumPerBucket;
        obj.max_global_virtual_group_num_per_family = message.maxGlobalVirtualGroupNumPerFamily;
        obj.max_store_size_per_family = message.maxStoreSizePerFamily ? message.maxStoreSizePerFamily.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.Params.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.Params.decode(message.value);
    },
    toProto(message) {
        return exports.Params.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.Params",
            value: exports.Params.encode(message).finish()
        };
    }
};
//# sourceMappingURL=params.js.map