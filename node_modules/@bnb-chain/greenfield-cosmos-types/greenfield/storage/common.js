"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalVirtualGroup = exports.SecondarySpMigrationBucketSignDoc = exports.GVGMapping = exports.SecondarySpSealObjectSignDoc = exports.visibilityTypeToJSON = exports.visibilityTypeFromJSON = exports.VisibilityTypeAmino = exports.VisibilityTypeSDKType = exports.VisibilityType = exports.objectStatusToJSON = exports.objectStatusFromJSON = exports.ObjectStatusAmino = exports.ObjectStatusSDKType = exports.ObjectStatus = exports.redundancyTypeToJSON = exports.redundancyTypeFromJSON = exports.RedundancyTypeAmino = exports.RedundancyTypeSDKType = exports.RedundancyType = exports.bucketStatusToJSON = exports.bucketStatusFromJSON = exports.BucketStatusAmino = exports.BucketStatusSDKType = exports.BucketStatus = exports.sourceTypeToJSON = exports.sourceTypeFromJSON = exports.SourceTypeAmino = exports.SourceTypeSDKType = exports.SourceType = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.storage";
/**
 * SourceType represents the source of resource creation, which can
 * from Greenfield native or from a cross-chain transfer from BSC
 */
var SourceType;
(function (SourceType) {
    SourceType[SourceType["SOURCE_TYPE_ORIGIN"] = 0] = "SOURCE_TYPE_ORIGIN";
    SourceType[SourceType["SOURCE_TYPE_MIRROR_PENDING"] = 1] = "SOURCE_TYPE_MIRROR_PENDING";
    SourceType[SourceType["SOURCE_TYPE_BSC_CROSS_CHAIN"] = 2] = "SOURCE_TYPE_BSC_CROSS_CHAIN";
    SourceType[SourceType["SOURCE_TYPE_OP_CROSS_CHAIN"] = 3] = "SOURCE_TYPE_OP_CROSS_CHAIN";
    SourceType[SourceType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SourceType = exports.SourceType || (exports.SourceType = {}));
exports.SourceTypeSDKType = SourceType;
exports.SourceTypeAmino = SourceType;
function sourceTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "SOURCE_TYPE_ORIGIN":
            return SourceType.SOURCE_TYPE_ORIGIN;
        case 1:
        case "SOURCE_TYPE_MIRROR_PENDING":
            return SourceType.SOURCE_TYPE_MIRROR_PENDING;
        case 2:
        case "SOURCE_TYPE_BSC_CROSS_CHAIN":
            return SourceType.SOURCE_TYPE_BSC_CROSS_CHAIN;
        case 3:
        case "SOURCE_TYPE_OP_CROSS_CHAIN":
            return SourceType.SOURCE_TYPE_OP_CROSS_CHAIN;
        case -1:
        case "UNRECOGNIZED":
        default:
            return SourceType.UNRECOGNIZED;
    }
}
exports.sourceTypeFromJSON = sourceTypeFromJSON;
function sourceTypeToJSON(object) {
    switch (object) {
        case SourceType.SOURCE_TYPE_ORIGIN:
            return "SOURCE_TYPE_ORIGIN";
        case SourceType.SOURCE_TYPE_MIRROR_PENDING:
            return "SOURCE_TYPE_MIRROR_PENDING";
        case SourceType.SOURCE_TYPE_BSC_CROSS_CHAIN:
            return "SOURCE_TYPE_BSC_CROSS_CHAIN";
        case SourceType.SOURCE_TYPE_OP_CROSS_CHAIN:
            return "SOURCE_TYPE_OP_CROSS_CHAIN";
        case SourceType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.sourceTypeToJSON = sourceTypeToJSON;
/**
 * BucketStatus represents the status of a bucket. After a user successfully
 * sends a CreateBucket transaction onto the chain, the status is set to 'Created'.
 * When a Discontinue Object transaction is received on chain, the status is set to 'Discontinued'.
 */
var BucketStatus;
(function (BucketStatus) {
    BucketStatus[BucketStatus["BUCKET_STATUS_CREATED"] = 0] = "BUCKET_STATUS_CREATED";
    BucketStatus[BucketStatus["BUCKET_STATUS_DISCONTINUED"] = 1] = "BUCKET_STATUS_DISCONTINUED";
    BucketStatus[BucketStatus["BUCKET_STATUS_MIGRATING"] = 2] = "BUCKET_STATUS_MIGRATING";
    BucketStatus[BucketStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BucketStatus = exports.BucketStatus || (exports.BucketStatus = {}));
exports.BucketStatusSDKType = BucketStatus;
exports.BucketStatusAmino = BucketStatus;
function bucketStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "BUCKET_STATUS_CREATED":
            return BucketStatus.BUCKET_STATUS_CREATED;
        case 1:
        case "BUCKET_STATUS_DISCONTINUED":
            return BucketStatus.BUCKET_STATUS_DISCONTINUED;
        case 2:
        case "BUCKET_STATUS_MIGRATING":
            return BucketStatus.BUCKET_STATUS_MIGRATING;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BucketStatus.UNRECOGNIZED;
    }
}
exports.bucketStatusFromJSON = bucketStatusFromJSON;
function bucketStatusToJSON(object) {
    switch (object) {
        case BucketStatus.BUCKET_STATUS_CREATED:
            return "BUCKET_STATUS_CREATED";
        case BucketStatus.BUCKET_STATUS_DISCONTINUED:
            return "BUCKET_STATUS_DISCONTINUED";
        case BucketStatus.BUCKET_STATUS_MIGRATING:
            return "BUCKET_STATUS_MIGRATING";
        case BucketStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.bucketStatusToJSON = bucketStatusToJSON;
/**
 * RedundancyType represents the redundancy algorithm type for object data,
 * which can be either multi-replica or erasure coding.
 */
var RedundancyType;
(function (RedundancyType) {
    RedundancyType[RedundancyType["REDUNDANCY_EC_TYPE"] = 0] = "REDUNDANCY_EC_TYPE";
    RedundancyType[RedundancyType["REDUNDANCY_REPLICA_TYPE"] = 1] = "REDUNDANCY_REPLICA_TYPE";
    RedundancyType[RedundancyType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RedundancyType = exports.RedundancyType || (exports.RedundancyType = {}));
exports.RedundancyTypeSDKType = RedundancyType;
exports.RedundancyTypeAmino = RedundancyType;
function redundancyTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "REDUNDANCY_EC_TYPE":
            return RedundancyType.REDUNDANCY_EC_TYPE;
        case 1:
        case "REDUNDANCY_REPLICA_TYPE":
            return RedundancyType.REDUNDANCY_REPLICA_TYPE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RedundancyType.UNRECOGNIZED;
    }
}
exports.redundancyTypeFromJSON = redundancyTypeFromJSON;
function redundancyTypeToJSON(object) {
    switch (object) {
        case RedundancyType.REDUNDANCY_EC_TYPE:
            return "REDUNDANCY_EC_TYPE";
        case RedundancyType.REDUNDANCY_REPLICA_TYPE:
            return "REDUNDANCY_REPLICA_TYPE";
        case RedundancyType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.redundancyTypeToJSON = redundancyTypeToJSON;
/**
 * ObjectStatus represents the creation status of an object. After a user successfully
 * sends a CreateObject transaction onto the chain, the status is set to 'Created'.
 * After the Primary Service Provider successfully sends a Seal Object transaction onto
 * the chain, the status is set to 'Sealed'. When a Discontinue Object transaction is
 * received on chain, the status is set to 'Discontinued'.
 */
var ObjectStatus;
(function (ObjectStatus) {
    ObjectStatus[ObjectStatus["OBJECT_STATUS_CREATED"] = 0] = "OBJECT_STATUS_CREATED";
    ObjectStatus[ObjectStatus["OBJECT_STATUS_SEALED"] = 1] = "OBJECT_STATUS_SEALED";
    ObjectStatus[ObjectStatus["OBJECT_STATUS_DISCONTINUED"] = 2] = "OBJECT_STATUS_DISCONTINUED";
    ObjectStatus[ObjectStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ObjectStatus = exports.ObjectStatus || (exports.ObjectStatus = {}));
exports.ObjectStatusSDKType = ObjectStatus;
exports.ObjectStatusAmino = ObjectStatus;
function objectStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "OBJECT_STATUS_CREATED":
            return ObjectStatus.OBJECT_STATUS_CREATED;
        case 1:
        case "OBJECT_STATUS_SEALED":
            return ObjectStatus.OBJECT_STATUS_SEALED;
        case 2:
        case "OBJECT_STATUS_DISCONTINUED":
            return ObjectStatus.OBJECT_STATUS_DISCONTINUED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ObjectStatus.UNRECOGNIZED;
    }
}
exports.objectStatusFromJSON = objectStatusFromJSON;
function objectStatusToJSON(object) {
    switch (object) {
        case ObjectStatus.OBJECT_STATUS_CREATED:
            return "OBJECT_STATUS_CREATED";
        case ObjectStatus.OBJECT_STATUS_SEALED:
            return "OBJECT_STATUS_SEALED";
        case ObjectStatus.OBJECT_STATUS_DISCONTINUED:
            return "OBJECT_STATUS_DISCONTINUED";
        case ObjectStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.objectStatusToJSON = objectStatusToJSON;
/** VisibilityType is the resources public status. */
var VisibilityType;
(function (VisibilityType) {
    VisibilityType[VisibilityType["VISIBILITY_TYPE_UNSPECIFIED"] = 0] = "VISIBILITY_TYPE_UNSPECIFIED";
    VisibilityType[VisibilityType["VISIBILITY_TYPE_PUBLIC_READ"] = 1] = "VISIBILITY_TYPE_PUBLIC_READ";
    VisibilityType[VisibilityType["VISIBILITY_TYPE_PRIVATE"] = 2] = "VISIBILITY_TYPE_PRIVATE";
    /** VISIBILITY_TYPE_INHERIT - If the bucket Visibility is inherit, it's finally set to private. If the object Visibility is inherit, it's the same as bucket. */
    VisibilityType[VisibilityType["VISIBILITY_TYPE_INHERIT"] = 3] = "VISIBILITY_TYPE_INHERIT";
    VisibilityType[VisibilityType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(VisibilityType = exports.VisibilityType || (exports.VisibilityType = {}));
exports.VisibilityTypeSDKType = VisibilityType;
exports.VisibilityTypeAmino = VisibilityType;
function visibilityTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "VISIBILITY_TYPE_UNSPECIFIED":
            return VisibilityType.VISIBILITY_TYPE_UNSPECIFIED;
        case 1:
        case "VISIBILITY_TYPE_PUBLIC_READ":
            return VisibilityType.VISIBILITY_TYPE_PUBLIC_READ;
        case 2:
        case "VISIBILITY_TYPE_PRIVATE":
            return VisibilityType.VISIBILITY_TYPE_PRIVATE;
        case 3:
        case "VISIBILITY_TYPE_INHERIT":
            return VisibilityType.VISIBILITY_TYPE_INHERIT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return VisibilityType.UNRECOGNIZED;
    }
}
exports.visibilityTypeFromJSON = visibilityTypeFromJSON;
function visibilityTypeToJSON(object) {
    switch (object) {
        case VisibilityType.VISIBILITY_TYPE_UNSPECIFIED:
            return "VISIBILITY_TYPE_UNSPECIFIED";
        case VisibilityType.VISIBILITY_TYPE_PUBLIC_READ:
            return "VISIBILITY_TYPE_PUBLIC_READ";
        case VisibilityType.VISIBILITY_TYPE_PRIVATE:
            return "VISIBILITY_TYPE_PRIVATE";
        case VisibilityType.VISIBILITY_TYPE_INHERIT:
            return "VISIBILITY_TYPE_INHERIT";
        case VisibilityType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.visibilityTypeToJSON = visibilityTypeToJSON;
function createBaseSecondarySpSealObjectSignDoc() {
    return {
        chainId: "",
        globalVirtualGroupId: 0,
        objectId: "",
        checksum: new Uint8Array()
    };
}
exports.SecondarySpSealObjectSignDoc = {
    typeUrl: "/greenfield.storage.SecondarySpSealObjectSignDoc",
    encode(message, writer = _m0.Writer.create()) {
        if (message.chainId !== "") {
            writer.uint32(10).string(message.chainId);
        }
        if (message.globalVirtualGroupId !== 0) {
            writer.uint32(16).uint32(message.globalVirtualGroupId);
        }
        if (message.objectId !== "") {
            writer.uint32(26).string(message.objectId);
        }
        if (message.checksum.length !== 0) {
            writer.uint32(34).bytes(message.checksum);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSecondarySpSealObjectSignDoc();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chainId = reader.string();
                    break;
                case 2:
                    message.globalVirtualGroupId = reader.uint32();
                    break;
                case 3:
                    message.objectId = reader.string();
                    break;
                case 4:
                    message.checksum = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            chainId: (0, helpers_1.isSet)(object.chainId) ? String(object.chainId) : "",
            globalVirtualGroupId: (0, helpers_1.isSet)(object.globalVirtualGroupId) ? Number(object.globalVirtualGroupId) : 0,
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : "",
            checksum: (0, helpers_1.isSet)(object.checksum) ? (0, helpers_1.bytesFromBase64)(object.checksum) : new Uint8Array()
        };
    },
    toJSON(message) {
        const obj = {};
        message.chainId !== undefined && (obj.chainId = message.chainId);
        message.globalVirtualGroupId !== undefined && (obj.globalVirtualGroupId = Math.round(message.globalVirtualGroupId));
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.checksum !== undefined && (obj.checksum = (0, helpers_1.base64FromBytes)(message.checksum !== undefined ? message.checksum : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSecondarySpSealObjectSignDoc();
        message.chainId = object.chainId ?? "";
        message.globalVirtualGroupId = object.globalVirtualGroupId ?? 0;
        message.objectId = object.objectId ?? "";
        message.checksum = object.checksum ?? new Uint8Array();
        return message;
    },
    fromSDK(object) {
        return {
            chainId: object?.chain_id,
            globalVirtualGroupId: object?.global_virtual_group_id,
            objectId: object?.object_id,
            checksum: object?.checksum
        };
    },
    toSDK(message) {
        const obj = {};
        obj.chain_id = message.chainId;
        obj.global_virtual_group_id = message.globalVirtualGroupId;
        obj.object_id = message.objectId;
        obj.checksum = message.checksum;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseSecondarySpSealObjectSignDoc();
        if (object.chain_id !== undefined && object.chain_id !== null) {
            message.chainId = object.chain_id;
        }
        if (object.global_virtual_group_id !== undefined && object.global_virtual_group_id !== null) {
            message.globalVirtualGroupId = object.global_virtual_group_id;
        }
        if (object.object_id !== undefined && object.object_id !== null) {
            message.objectId = object.object_id;
        }
        if (object.checksum !== undefined && object.checksum !== null) {
            message.checksum = (0, helpers_1.bytesFromBase64)(object.checksum);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.chain_id = message.chainId;
        obj.global_virtual_group_id = message.globalVirtualGroupId;
        obj.object_id = message.objectId;
        obj.checksum = message.checksum ? (0, helpers_1.base64FromBytes)(message.checksum) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.SecondarySpSealObjectSignDoc.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.SecondarySpSealObjectSignDoc.decode(message.value);
    },
    toProto(message) {
        return exports.SecondarySpSealObjectSignDoc.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.SecondarySpSealObjectSignDoc",
            value: exports.SecondarySpSealObjectSignDoc.encode(message).finish()
        };
    }
};
function createBaseGVGMapping() {
    return {
        srcGlobalVirtualGroupId: 0,
        dstGlobalVirtualGroupId: 0,
        secondarySpBlsSignature: new Uint8Array()
    };
}
exports.GVGMapping = {
    typeUrl: "/greenfield.storage.GVGMapping",
    encode(message, writer = _m0.Writer.create()) {
        if (message.srcGlobalVirtualGroupId !== 0) {
            writer.uint32(8).uint32(message.srcGlobalVirtualGroupId);
        }
        if (message.dstGlobalVirtualGroupId !== 0) {
            writer.uint32(16).uint32(message.dstGlobalVirtualGroupId);
        }
        if (message.secondarySpBlsSignature.length !== 0) {
            writer.uint32(26).bytes(message.secondarySpBlsSignature);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGVGMapping();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.srcGlobalVirtualGroupId = reader.uint32();
                    break;
                case 2:
                    message.dstGlobalVirtualGroupId = reader.uint32();
                    break;
                case 3:
                    message.secondarySpBlsSignature = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            srcGlobalVirtualGroupId: (0, helpers_1.isSet)(object.srcGlobalVirtualGroupId) ? Number(object.srcGlobalVirtualGroupId) : 0,
            dstGlobalVirtualGroupId: (0, helpers_1.isSet)(object.dstGlobalVirtualGroupId) ? Number(object.dstGlobalVirtualGroupId) : 0,
            secondarySpBlsSignature: (0, helpers_1.isSet)(object.secondarySpBlsSignature) ? (0, helpers_1.bytesFromBase64)(object.secondarySpBlsSignature) : new Uint8Array()
        };
    },
    toJSON(message) {
        const obj = {};
        message.srcGlobalVirtualGroupId !== undefined && (obj.srcGlobalVirtualGroupId = Math.round(message.srcGlobalVirtualGroupId));
        message.dstGlobalVirtualGroupId !== undefined && (obj.dstGlobalVirtualGroupId = Math.round(message.dstGlobalVirtualGroupId));
        message.secondarySpBlsSignature !== undefined && (obj.secondarySpBlsSignature = (0, helpers_1.base64FromBytes)(message.secondarySpBlsSignature !== undefined ? message.secondarySpBlsSignature : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGVGMapping();
        message.srcGlobalVirtualGroupId = object.srcGlobalVirtualGroupId ?? 0;
        message.dstGlobalVirtualGroupId = object.dstGlobalVirtualGroupId ?? 0;
        message.secondarySpBlsSignature = object.secondarySpBlsSignature ?? new Uint8Array();
        return message;
    },
    fromSDK(object) {
        return {
            srcGlobalVirtualGroupId: object?.src_global_virtual_group_id,
            dstGlobalVirtualGroupId: object?.dst_global_virtual_group_id,
            secondarySpBlsSignature: object?.secondary_sp_bls_signature
        };
    },
    toSDK(message) {
        const obj = {};
        obj.src_global_virtual_group_id = message.srcGlobalVirtualGroupId;
        obj.dst_global_virtual_group_id = message.dstGlobalVirtualGroupId;
        obj.secondary_sp_bls_signature = message.secondarySpBlsSignature;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseGVGMapping();
        if (object.src_global_virtual_group_id !== undefined && object.src_global_virtual_group_id !== null) {
            message.srcGlobalVirtualGroupId = object.src_global_virtual_group_id;
        }
        if (object.dst_global_virtual_group_id !== undefined && object.dst_global_virtual_group_id !== null) {
            message.dstGlobalVirtualGroupId = object.dst_global_virtual_group_id;
        }
        if (object.secondary_sp_bls_signature !== undefined && object.secondary_sp_bls_signature !== null) {
            message.secondarySpBlsSignature = (0, helpers_1.bytesFromBase64)(object.secondary_sp_bls_signature);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.src_global_virtual_group_id = message.srcGlobalVirtualGroupId;
        obj.dst_global_virtual_group_id = message.dstGlobalVirtualGroupId;
        obj.secondary_sp_bls_signature = message.secondarySpBlsSignature ? (0, helpers_1.base64FromBytes)(message.secondarySpBlsSignature) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.GVGMapping.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.GVGMapping.decode(message.value);
    },
    toProto(message) {
        return exports.GVGMapping.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.GVGMapping",
            value: exports.GVGMapping.encode(message).finish()
        };
    }
};
function createBaseSecondarySpMigrationBucketSignDoc() {
    return {
        chainId: "",
        dstPrimarySpId: 0,
        srcGlobalVirtualGroupId: 0,
        dstGlobalVirtualGroupId: 0,
        bucketId: ""
    };
}
exports.SecondarySpMigrationBucketSignDoc = {
    typeUrl: "/greenfield.storage.SecondarySpMigrationBucketSignDoc",
    encode(message, writer = _m0.Writer.create()) {
        if (message.chainId !== "") {
            writer.uint32(10).string(message.chainId);
        }
        if (message.dstPrimarySpId !== 0) {
            writer.uint32(16).uint32(message.dstPrimarySpId);
        }
        if (message.srcGlobalVirtualGroupId !== 0) {
            writer.uint32(24).uint32(message.srcGlobalVirtualGroupId);
        }
        if (message.dstGlobalVirtualGroupId !== 0) {
            writer.uint32(32).uint32(message.dstGlobalVirtualGroupId);
        }
        if (message.bucketId !== "") {
            writer.uint32(42).string(message.bucketId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSecondarySpMigrationBucketSignDoc();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chainId = reader.string();
                    break;
                case 2:
                    message.dstPrimarySpId = reader.uint32();
                    break;
                case 3:
                    message.srcGlobalVirtualGroupId = reader.uint32();
                    break;
                case 4:
                    message.dstGlobalVirtualGroupId = reader.uint32();
                    break;
                case 5:
                    message.bucketId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            chainId: (0, helpers_1.isSet)(object.chainId) ? String(object.chainId) : "",
            dstPrimarySpId: (0, helpers_1.isSet)(object.dstPrimarySpId) ? Number(object.dstPrimarySpId) : 0,
            srcGlobalVirtualGroupId: (0, helpers_1.isSet)(object.srcGlobalVirtualGroupId) ? Number(object.srcGlobalVirtualGroupId) : 0,
            dstGlobalVirtualGroupId: (0, helpers_1.isSet)(object.dstGlobalVirtualGroupId) ? Number(object.dstGlobalVirtualGroupId) : 0,
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.chainId !== undefined && (obj.chainId = message.chainId);
        message.dstPrimarySpId !== undefined && (obj.dstPrimarySpId = Math.round(message.dstPrimarySpId));
        message.srcGlobalVirtualGroupId !== undefined && (obj.srcGlobalVirtualGroupId = Math.round(message.srcGlobalVirtualGroupId));
        message.dstGlobalVirtualGroupId !== undefined && (obj.dstGlobalVirtualGroupId = Math.round(message.dstGlobalVirtualGroupId));
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSecondarySpMigrationBucketSignDoc();
        message.chainId = object.chainId ?? "";
        message.dstPrimarySpId = object.dstPrimarySpId ?? 0;
        message.srcGlobalVirtualGroupId = object.srcGlobalVirtualGroupId ?? 0;
        message.dstGlobalVirtualGroupId = object.dstGlobalVirtualGroupId ?? 0;
        message.bucketId = object.bucketId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            chainId: object?.chain_id,
            dstPrimarySpId: object?.dst_primary_sp_id,
            srcGlobalVirtualGroupId: object?.src_global_virtual_group_id,
            dstGlobalVirtualGroupId: object?.dst_global_virtual_group_id,
            bucketId: object?.bucket_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.chain_id = message.chainId;
        obj.dst_primary_sp_id = message.dstPrimarySpId;
        obj.src_global_virtual_group_id = message.srcGlobalVirtualGroupId;
        obj.dst_global_virtual_group_id = message.dstGlobalVirtualGroupId;
        obj.bucket_id = message.bucketId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseSecondarySpMigrationBucketSignDoc();
        if (object.chain_id !== undefined && object.chain_id !== null) {
            message.chainId = object.chain_id;
        }
        if (object.dst_primary_sp_id !== undefined && object.dst_primary_sp_id !== null) {
            message.dstPrimarySpId = object.dst_primary_sp_id;
        }
        if (object.src_global_virtual_group_id !== undefined && object.src_global_virtual_group_id !== null) {
            message.srcGlobalVirtualGroupId = object.src_global_virtual_group_id;
        }
        if (object.dst_global_virtual_group_id !== undefined && object.dst_global_virtual_group_id !== null) {
            message.dstGlobalVirtualGroupId = object.dst_global_virtual_group_id;
        }
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.chain_id = message.chainId;
        obj.dst_primary_sp_id = message.dstPrimarySpId;
        obj.src_global_virtual_group_id = message.srcGlobalVirtualGroupId;
        obj.dst_global_virtual_group_id = message.dstGlobalVirtualGroupId;
        obj.bucket_id = message.bucketId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.SecondarySpMigrationBucketSignDoc.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.SecondarySpMigrationBucketSignDoc.decode(message.value);
    },
    toProto(message) {
        return exports.SecondarySpMigrationBucketSignDoc.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.SecondarySpMigrationBucketSignDoc",
            value: exports.SecondarySpMigrationBucketSignDoc.encode(message).finish()
        };
    }
};
function createBaseLocalVirtualGroup() {
    return {
        id: 0,
        globalVirtualGroupId: 0,
        storedSize: helpers_1.Long.UZERO,
        totalChargeSize: helpers_1.Long.UZERO
    };
}
exports.LocalVirtualGroup = {
    typeUrl: "/greenfield.storage.LocalVirtualGroup",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.globalVirtualGroupId !== 0) {
            writer.uint32(16).uint32(message.globalVirtualGroupId);
        }
        if (!message.storedSize.isZero()) {
            writer.uint32(24).uint64(message.storedSize);
        }
        if (!message.totalChargeSize.isZero()) {
            writer.uint32(32).uint64(message.totalChargeSize);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLocalVirtualGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.globalVirtualGroupId = reader.uint32();
                    break;
                case 3:
                    message.storedSize = reader.uint64();
                    break;
                case 4:
                    message.totalChargeSize = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? Number(object.id) : 0,
            globalVirtualGroupId: (0, helpers_1.isSet)(object.globalVirtualGroupId) ? Number(object.globalVirtualGroupId) : 0,
            storedSize: (0, helpers_1.isSet)(object.storedSize) ? helpers_1.Long.fromValue(object.storedSize) : helpers_1.Long.UZERO,
            totalChargeSize: (0, helpers_1.isSet)(object.totalChargeSize) ? helpers_1.Long.fromValue(object.totalChargeSize) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = Math.round(message.id));
        message.globalVirtualGroupId !== undefined && (obj.globalVirtualGroupId = Math.round(message.globalVirtualGroupId));
        message.storedSize !== undefined && (obj.storedSize = (message.storedSize || helpers_1.Long.UZERO).toString());
        message.totalChargeSize !== undefined && (obj.totalChargeSize = (message.totalChargeSize || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseLocalVirtualGroup();
        message.id = object.id ?? 0;
        message.globalVirtualGroupId = object.globalVirtualGroupId ?? 0;
        message.storedSize = object.storedSize !== undefined && object.storedSize !== null ? helpers_1.Long.fromValue(object.storedSize) : helpers_1.Long.UZERO;
        message.totalChargeSize = object.totalChargeSize !== undefined && object.totalChargeSize !== null ? helpers_1.Long.fromValue(object.totalChargeSize) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id,
            globalVirtualGroupId: object?.global_virtual_group_id,
            storedSize: object?.stored_size,
            totalChargeSize: object?.total_charge_size
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        obj.global_virtual_group_id = message.globalVirtualGroupId;
        obj.stored_size = message.storedSize;
        obj.total_charge_size = message.totalChargeSize;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseLocalVirtualGroup();
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        if (object.global_virtual_group_id !== undefined && object.global_virtual_group_id !== null) {
            message.globalVirtualGroupId = object.global_virtual_group_id;
        }
        if (object.stored_size !== undefined && object.stored_size !== null) {
            message.storedSize = helpers_1.Long.fromString(object.stored_size);
        }
        if (object.total_charge_size !== undefined && object.total_charge_size !== null) {
            message.totalChargeSize = helpers_1.Long.fromString(object.total_charge_size);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.id = message.id;
        obj.global_virtual_group_id = message.globalVirtualGroupId;
        obj.stored_size = message.storedSize ? message.storedSize.toString() : undefined;
        obj.total_charge_size = message.totalChargeSize ? message.totalChargeSize.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.LocalVirtualGroup.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.LocalVirtualGroup.decode(message.value);
    },
    toProto(message) {
        return exports.LocalVirtualGroup.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.LocalVirtualGroup",
            value: exports.LocalVirtualGroup.encode(message).finish()
        };
    }
};
//# sourceMappingURL=common.js.map