"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSetTag = exports.EventCompleteMigrationBucket = exports.EventRejectMigrateBucket = exports.EventCancelMigrationBucket = exports.EventMigrationBucket = exports.EventStalePolicyCleanup = exports.EventMirrorGroupResult = exports.EventMirrorGroup = exports.EventMirrorObjectResult = exports.EventMirrorObject = exports.EventMirrorBucketResult = exports.EventMirrorBucket = exports.EventUpdateGroupExtra = exports.EventGroupMemberDetail = exports.EventRenewGroupMember = exports.EventUpdateGroupMember = exports.EventLeaveGroup = exports.EventDeleteGroup = exports.EventCreateGroup = exports.EventUpdateObjectInfo = exports.EventDiscontinueObject = exports.EventRejectSealObject = exports.EventDeleteObject = exports.EventCopyObject = exports.EventSealObject = exports.EventCancelCreateObject = exports.EventCreateObject = exports.EventDiscontinueBucket = exports.EventUpdateBucketInfo = exports.EventDeleteBucket = exports.EventCreateBucket = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const common_1 = require("./common");
const timestamp_1 = require("../../google/protobuf/timestamp");
const types_1 = require("./types");
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.storage";
function createBaseEventCreateBucket() {
    return {
        owner: "",
        bucketName: "",
        visibility: 0,
        createAt: helpers_1.Long.ZERO,
        bucketId: "",
        sourceType: 0,
        chargedReadQuota: helpers_1.Long.UZERO,
        paymentAddress: "",
        primarySpId: 0,
        globalVirtualGroupFamilyId: 0,
        status: 0
    };
}
exports.EventCreateBucket = {
    typeUrl: "/greenfield.storage.EventCreateBucket",
    encode(message, writer = _m0.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.visibility !== 0) {
            writer.uint32(24).int32(message.visibility);
        }
        if (!message.createAt.isZero()) {
            writer.uint32(32).int64(message.createAt);
        }
        if (message.bucketId !== "") {
            writer.uint32(42).string(message.bucketId);
        }
        if (message.sourceType !== 0) {
            writer.uint32(48).int32(message.sourceType);
        }
        if (!message.chargedReadQuota.isZero()) {
            writer.uint32(56).uint64(message.chargedReadQuota);
        }
        if (message.paymentAddress !== "") {
            writer.uint32(66).string(message.paymentAddress);
        }
        if (message.primarySpId !== 0) {
            writer.uint32(72).uint32(message.primarySpId);
        }
        if (message.globalVirtualGroupFamilyId !== 0) {
            writer.uint32(80).uint32(message.globalVirtualGroupFamilyId);
        }
        if (message.status !== 0) {
            writer.uint32(88).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCreateBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.visibility = reader.int32();
                    break;
                case 4:
                    message.createAt = reader.int64();
                    break;
                case 5:
                    message.bucketId = reader.string();
                    break;
                case 6:
                    message.sourceType = reader.int32();
                    break;
                case 7:
                    message.chargedReadQuota = reader.uint64();
                    break;
                case 8:
                    message.paymentAddress = reader.string();
                    break;
                case 9:
                    message.primarySpId = reader.uint32();
                    break;
                case 10:
                    message.globalVirtualGroupFamilyId = reader.uint32();
                    break;
                case 11:
                    message.status = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : -1,
            createAt: (0, helpers_1.isSet)(object.createAt) ? helpers_1.Long.fromValue(object.createAt) : helpers_1.Long.ZERO,
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            sourceType: (0, helpers_1.isSet)(object.sourceType) ? (0, common_1.sourceTypeFromJSON)(object.sourceType) : -1,
            chargedReadQuota: (0, helpers_1.isSet)(object.chargedReadQuota) ? helpers_1.Long.fromValue(object.chargedReadQuota) : helpers_1.Long.UZERO,
            paymentAddress: (0, helpers_1.isSet)(object.paymentAddress) ? String(object.paymentAddress) : "",
            primarySpId: (0, helpers_1.isSet)(object.primarySpId) ? Number(object.primarySpId) : 0,
            globalVirtualGroupFamilyId: (0, helpers_1.isSet)(object.globalVirtualGroupFamilyId) ? Number(object.globalVirtualGroupFamilyId) : 0,
            status: (0, helpers_1.isSet)(object.status) ? (0, common_1.bucketStatusFromJSON)(object.status) : -1
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        message.createAt !== undefined && (obj.createAt = (message.createAt || helpers_1.Long.ZERO).toString());
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        message.sourceType !== undefined && (obj.sourceType = (0, common_1.sourceTypeToJSON)(message.sourceType));
        message.chargedReadQuota !== undefined && (obj.chargedReadQuota = (message.chargedReadQuota || helpers_1.Long.UZERO).toString());
        message.paymentAddress !== undefined && (obj.paymentAddress = message.paymentAddress);
        message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
        message.globalVirtualGroupFamilyId !== undefined && (obj.globalVirtualGroupFamilyId = Math.round(message.globalVirtualGroupFamilyId));
        message.status !== undefined && (obj.status = (0, common_1.bucketStatusToJSON)(message.status));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCreateBucket();
        message.owner = object.owner ?? "";
        message.bucketName = object.bucketName ?? "";
        message.visibility = object.visibility ?? 0;
        message.createAt = object.createAt !== undefined && object.createAt !== null ? helpers_1.Long.fromValue(object.createAt) : helpers_1.Long.ZERO;
        message.bucketId = object.bucketId ?? "";
        message.sourceType = object.sourceType ?? 0;
        message.chargedReadQuota = object.chargedReadQuota !== undefined && object.chargedReadQuota !== null ? helpers_1.Long.fromValue(object.chargedReadQuota) : helpers_1.Long.UZERO;
        message.paymentAddress = object.paymentAddress ?? "";
        message.primarySpId = object.primarySpId ?? 0;
        message.globalVirtualGroupFamilyId = object.globalVirtualGroupFamilyId ?? 0;
        message.status = object.status ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            owner: object?.owner,
            bucketName: object?.bucket_name,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : -1,
            createAt: object?.create_at,
            bucketId: object?.bucket_id,
            sourceType: (0, helpers_1.isSet)(object.source_type) ? (0, common_1.sourceTypeFromJSON)(object.source_type) : -1,
            chargedReadQuota: object?.charged_read_quota,
            paymentAddress: object?.payment_address,
            primarySpId: object?.primary_sp_id,
            globalVirtualGroupFamilyId: object?.global_virtual_group_family_id,
            status: (0, helpers_1.isSet)(object.status) ? (0, common_1.bucketStatusFromJSON)(object.status) : -1
        };
    },
    toSDK(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.bucket_name = message.bucketName;
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        obj.create_at = message.createAt;
        obj.bucket_id = message.bucketId;
        message.sourceType !== undefined && (obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType));
        obj.charged_read_quota = message.chargedReadQuota;
        obj.payment_address = message.paymentAddress;
        obj.primary_sp_id = message.primarySpId;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        message.status !== undefined && (obj.status = (0, common_1.bucketStatusToJSON)(message.status));
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventCreateBucket();
        if (object.owner !== undefined && object.owner !== null) {
            message.owner = object.owner;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.visibility !== undefined && object.visibility !== null) {
            message.visibility = (0, common_1.visibilityTypeFromJSON)(object.visibility);
        }
        if (object.create_at !== undefined && object.create_at !== null) {
            message.createAt = helpers_1.Long.fromString(object.create_at);
        }
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        if (object.source_type !== undefined && object.source_type !== null) {
            message.sourceType = (0, common_1.sourceTypeFromJSON)(object.source_type);
        }
        if (object.charged_read_quota !== undefined && object.charged_read_quota !== null) {
            message.chargedReadQuota = helpers_1.Long.fromString(object.charged_read_quota);
        }
        if (object.payment_address !== undefined && object.payment_address !== null) {
            message.paymentAddress = object.payment_address;
        }
        if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
            message.primarySpId = object.primary_sp_id;
        }
        if (object.global_virtual_group_family_id !== undefined && object.global_virtual_group_family_id !== null) {
            message.globalVirtualGroupFamilyId = object.global_virtual_group_family_id;
        }
        if (object.status !== undefined && object.status !== null) {
            message.status = (0, common_1.bucketStatusFromJSON)(object.status);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.bucket_name = message.bucketName;
        obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility);
        obj.create_at = message.createAt ? message.createAt.toString() : undefined;
        obj.bucket_id = message.bucketId;
        obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType);
        obj.charged_read_quota = message.chargedReadQuota ? message.chargedReadQuota.toString() : undefined;
        obj.payment_address = message.paymentAddress;
        obj.primary_sp_id = message.primarySpId;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        obj.status = (0, common_1.bucketStatusToJSON)(message.status);
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventCreateBucket.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventCreateBucket.decode(message.value);
    },
    toProto(message) {
        return exports.EventCreateBucket.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventCreateBucket",
            value: exports.EventCreateBucket.encode(message).finish()
        };
    }
};
function createBaseEventDeleteBucket() {
    return {
        operator: "",
        owner: "",
        bucketName: "",
        bucketId: "",
        globalVirtualGroupFamilyId: 0
    };
}
exports.EventDeleteBucket = {
    typeUrl: "/greenfield.storage.EventDeleteBucket",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        if (message.bucketName !== "") {
            writer.uint32(26).string(message.bucketName);
        }
        if (message.bucketId !== "") {
            writer.uint32(34).string(message.bucketId);
        }
        if (message.globalVirtualGroupFamilyId !== 0) {
            writer.uint32(40).uint32(message.globalVirtualGroupFamilyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDeleteBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.bucketName = reader.string();
                    break;
                case 4:
                    message.bucketId = reader.string();
                    break;
                case 5:
                    message.globalVirtualGroupFamilyId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            globalVirtualGroupFamilyId: (0, helpers_1.isSet)(object.globalVirtualGroupFamilyId) ? Number(object.globalVirtualGroupFamilyId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.owner !== undefined && (obj.owner = message.owner);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        message.globalVirtualGroupFamilyId !== undefined && (obj.globalVirtualGroupFamilyId = Math.round(message.globalVirtualGroupFamilyId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventDeleteBucket();
        message.operator = object.operator ?? "";
        message.owner = object.owner ?? "";
        message.bucketName = object.bucketName ?? "";
        message.bucketId = object.bucketId ?? "";
        message.globalVirtualGroupFamilyId = object.globalVirtualGroupFamilyId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            owner: object?.owner,
            bucketName: object?.bucket_name,
            bucketId: object?.bucket_id,
            globalVirtualGroupFamilyId: object?.global_virtual_group_family_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.owner = message.owner;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventDeleteBucket();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.owner !== undefined && object.owner !== null) {
            message.owner = object.owner;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        if (object.global_virtual_group_family_id !== undefined && object.global_virtual_group_family_id !== null) {
            message.globalVirtualGroupFamilyId = object.global_virtual_group_family_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.owner = message.owner;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventDeleteBucket.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventDeleteBucket.decode(message.value);
    },
    toProto(message) {
        return exports.EventDeleteBucket.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventDeleteBucket",
            value: exports.EventDeleteBucket.encode(message).finish()
        };
    }
};
function createBaseEventUpdateBucketInfo() {
    return {
        operator: "",
        bucketName: "",
        bucketId: "",
        chargedReadQuota: helpers_1.Long.UZERO,
        paymentAddress: "",
        visibility: 0,
        globalVirtualGroupFamilyId: 0
    };
}
exports.EventUpdateBucketInfo = {
    typeUrl: "/greenfield.storage.EventUpdateBucketInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.bucketId !== "") {
            writer.uint32(26).string(message.bucketId);
        }
        if (!message.chargedReadQuota.isZero()) {
            writer.uint32(32).uint64(message.chargedReadQuota);
        }
        if (message.paymentAddress !== "") {
            writer.uint32(42).string(message.paymentAddress);
        }
        if (message.visibility !== 0) {
            writer.uint32(48).int32(message.visibility);
        }
        if (message.globalVirtualGroupFamilyId !== 0) {
            writer.uint32(56).uint32(message.globalVirtualGroupFamilyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventUpdateBucketInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.bucketId = reader.string();
                    break;
                case 4:
                    message.chargedReadQuota = reader.uint64();
                    break;
                case 5:
                    message.paymentAddress = reader.string();
                    break;
                case 6:
                    message.visibility = reader.int32();
                    break;
                case 7:
                    message.globalVirtualGroupFamilyId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            chargedReadQuota: (0, helpers_1.isSet)(object.chargedReadQuota) ? helpers_1.Long.fromValue(object.chargedReadQuota) : helpers_1.Long.UZERO,
            paymentAddress: (0, helpers_1.isSet)(object.paymentAddress) ? String(object.paymentAddress) : "",
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : -1,
            globalVirtualGroupFamilyId: (0, helpers_1.isSet)(object.globalVirtualGroupFamilyId) ? Number(object.globalVirtualGroupFamilyId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        message.chargedReadQuota !== undefined && (obj.chargedReadQuota = (message.chargedReadQuota || helpers_1.Long.UZERO).toString());
        message.paymentAddress !== undefined && (obj.paymentAddress = message.paymentAddress);
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        message.globalVirtualGroupFamilyId !== undefined && (obj.globalVirtualGroupFamilyId = Math.round(message.globalVirtualGroupFamilyId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventUpdateBucketInfo();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.bucketId = object.bucketId ?? "";
        message.chargedReadQuota = object.chargedReadQuota !== undefined && object.chargedReadQuota !== null ? helpers_1.Long.fromValue(object.chargedReadQuota) : helpers_1.Long.UZERO;
        message.paymentAddress = object.paymentAddress ?? "";
        message.visibility = object.visibility ?? 0;
        message.globalVirtualGroupFamilyId = object.globalVirtualGroupFamilyId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            bucketId: object?.bucket_id,
            chargedReadQuota: object?.charged_read_quota,
            paymentAddress: object?.payment_address,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : -1,
            globalVirtualGroupFamilyId: object?.global_virtual_group_family_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        obj.charged_read_quota = message.chargedReadQuota;
        obj.payment_address = message.paymentAddress;
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventUpdateBucketInfo();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        if (object.charged_read_quota !== undefined && object.charged_read_quota !== null) {
            message.chargedReadQuota = helpers_1.Long.fromString(object.charged_read_quota);
        }
        if (object.payment_address !== undefined && object.payment_address !== null) {
            message.paymentAddress = object.payment_address;
        }
        if (object.visibility !== undefined && object.visibility !== null) {
            message.visibility = (0, common_1.visibilityTypeFromJSON)(object.visibility);
        }
        if (object.global_virtual_group_family_id !== undefined && object.global_virtual_group_family_id !== null) {
            message.globalVirtualGroupFamilyId = object.global_virtual_group_family_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        obj.charged_read_quota = message.chargedReadQuota ? message.chargedReadQuota.toString() : undefined;
        obj.payment_address = message.paymentAddress;
        obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility);
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventUpdateBucketInfo.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventUpdateBucketInfo.decode(message.value);
    },
    toProto(message) {
        return exports.EventUpdateBucketInfo.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventUpdateBucketInfo",
            value: exports.EventUpdateBucketInfo.encode(message).finish()
        };
    }
};
function createBaseEventDiscontinueBucket() {
    return {
        bucketId: "",
        bucketName: "",
        reason: "",
        deleteAt: helpers_1.Long.ZERO
    };
}
exports.EventDiscontinueBucket = {
    typeUrl: "/greenfield.storage.EventDiscontinueBucket",
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketId !== "") {
            writer.uint32(10).string(message.bucketId);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.reason !== "") {
            writer.uint32(26).string(message.reason);
        }
        if (!message.deleteAt.isZero()) {
            writer.uint32(32).int64(message.deleteAt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDiscontinueBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketId = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.reason = reader.string();
                    break;
                case 4:
                    message.deleteAt = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            reason: (0, helpers_1.isSet)(object.reason) ? String(object.reason) : "",
            deleteAt: (0, helpers_1.isSet)(object.deleteAt) ? helpers_1.Long.fromValue(object.deleteAt) : helpers_1.Long.ZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.reason !== undefined && (obj.reason = message.reason);
        message.deleteAt !== undefined && (obj.deleteAt = (message.deleteAt || helpers_1.Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventDiscontinueBucket();
        message.bucketId = object.bucketId ?? "";
        message.bucketName = object.bucketName ?? "";
        message.reason = object.reason ?? "";
        message.deleteAt = object.deleteAt !== undefined && object.deleteAt !== null ? helpers_1.Long.fromValue(object.deleteAt) : helpers_1.Long.ZERO;
        return message;
    },
    fromSDK(object) {
        return {
            bucketId: object?.bucket_id,
            bucketName: object?.bucket_name,
            reason: object?.reason,
            deleteAt: object?.delete_at
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bucket_id = message.bucketId;
        obj.bucket_name = message.bucketName;
        obj.reason = message.reason;
        obj.delete_at = message.deleteAt;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventDiscontinueBucket();
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.reason !== undefined && object.reason !== null) {
            message.reason = object.reason;
        }
        if (object.delete_at !== undefined && object.delete_at !== null) {
            message.deleteAt = helpers_1.Long.fromString(object.delete_at);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.bucket_id = message.bucketId;
        obj.bucket_name = message.bucketName;
        obj.reason = message.reason;
        obj.delete_at = message.deleteAt ? message.deleteAt.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventDiscontinueBucket.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventDiscontinueBucket.decode(message.value);
    },
    toProto(message) {
        return exports.EventDiscontinueBucket.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventDiscontinueBucket",
            value: exports.EventDiscontinueBucket.encode(message).finish()
        };
    }
};
function createBaseEventCreateObject() {
    return {
        creator: "",
        owner: "",
        bucketName: "",
        objectName: "",
        bucketId: "",
        objectId: "",
        primarySpId: 0,
        payloadSize: helpers_1.Long.UZERO,
        visibility: 0,
        contentType: "",
        createAt: helpers_1.Long.ZERO,
        status: 0,
        redundancyType: 0,
        sourceType: 0,
        checksums: [],
        localVirtualGroupId: 0
    };
}
exports.EventCreateObject = {
    typeUrl: "/greenfield.storage.EventCreateObject",
    encode(message, writer = _m0.Writer.create()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        if (message.bucketName !== "") {
            writer.uint32(26).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(34).string(message.objectName);
        }
        if (message.bucketId !== "") {
            writer.uint32(50).string(message.bucketId);
        }
        if (message.objectId !== "") {
            writer.uint32(58).string(message.objectId);
        }
        if (message.primarySpId !== 0) {
            writer.uint32(64).uint32(message.primarySpId);
        }
        if (!message.payloadSize.isZero()) {
            writer.uint32(72).uint64(message.payloadSize);
        }
        if (message.visibility !== 0) {
            writer.uint32(80).int32(message.visibility);
        }
        if (message.contentType !== "") {
            writer.uint32(90).string(message.contentType);
        }
        if (!message.createAt.isZero()) {
            writer.uint32(96).int64(message.createAt);
        }
        if (message.status !== 0) {
            writer.uint32(104).int32(message.status);
        }
        if (message.redundancyType !== 0) {
            writer.uint32(112).int32(message.redundancyType);
        }
        if (message.sourceType !== 0) {
            writer.uint32(120).int32(message.sourceType);
        }
        for (const v of message.checksums) {
            writer.uint32(130).bytes(v);
        }
        if (message.localVirtualGroupId !== 0) {
            writer.uint32(136).uint32(message.localVirtualGroupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCreateObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.creator = reader.string();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.bucketName = reader.string();
                    break;
                case 4:
                    message.objectName = reader.string();
                    break;
                case 6:
                    message.bucketId = reader.string();
                    break;
                case 7:
                    message.objectId = reader.string();
                    break;
                case 8:
                    message.primarySpId = reader.uint32();
                    break;
                case 9:
                    message.payloadSize = reader.uint64();
                    break;
                case 10:
                    message.visibility = reader.int32();
                    break;
                case 11:
                    message.contentType = reader.string();
                    break;
                case 12:
                    message.createAt = reader.int64();
                    break;
                case 13:
                    message.status = reader.int32();
                    break;
                case 14:
                    message.redundancyType = reader.int32();
                    break;
                case 15:
                    message.sourceType = reader.int32();
                    break;
                case 16:
                    message.checksums.push(reader.bytes());
                    break;
                case 17:
                    message.localVirtualGroupId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: (0, helpers_1.isSet)(object.creator) ? String(object.creator) : "",
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : "",
            primarySpId: (0, helpers_1.isSet)(object.primarySpId) ? Number(object.primarySpId) : 0,
            payloadSize: (0, helpers_1.isSet)(object.payloadSize) ? helpers_1.Long.fromValue(object.payloadSize) : helpers_1.Long.UZERO,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : -1,
            contentType: (0, helpers_1.isSet)(object.contentType) ? String(object.contentType) : "",
            createAt: (0, helpers_1.isSet)(object.createAt) ? helpers_1.Long.fromValue(object.createAt) : helpers_1.Long.ZERO,
            status: (0, helpers_1.isSet)(object.status) ? (0, common_1.objectStatusFromJSON)(object.status) : -1,
            redundancyType: (0, helpers_1.isSet)(object.redundancyType) ? (0, common_1.redundancyTypeFromJSON)(object.redundancyType) : -1,
            sourceType: (0, helpers_1.isSet)(object.sourceType) ? (0, common_1.sourceTypeFromJSON)(object.sourceType) : -1,
            checksums: Array.isArray(object?.checksums) ? object.checksums.map((e) => (0, helpers_1.bytesFromBase64)(e)) : [],
            localVirtualGroupId: (0, helpers_1.isSet)(object.localVirtualGroupId) ? Number(object.localVirtualGroupId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.creator !== undefined && (obj.creator = message.creator);
        message.owner !== undefined && (obj.owner = message.owner);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
        message.payloadSize !== undefined && (obj.payloadSize = (message.payloadSize || helpers_1.Long.UZERO).toString());
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        message.contentType !== undefined && (obj.contentType = message.contentType);
        message.createAt !== undefined && (obj.createAt = (message.createAt || helpers_1.Long.ZERO).toString());
        message.status !== undefined && (obj.status = (0, common_1.objectStatusToJSON)(message.status));
        message.redundancyType !== undefined && (obj.redundancyType = (0, common_1.redundancyTypeToJSON)(message.redundancyType));
        message.sourceType !== undefined && (obj.sourceType = (0, common_1.sourceTypeToJSON)(message.sourceType));
        if (message.checksums) {
            obj.checksums = message.checksums.map(e => (0, helpers_1.base64FromBytes)(e !== undefined ? e : new Uint8Array()));
        }
        else {
            obj.checksums = [];
        }
        message.localVirtualGroupId !== undefined && (obj.localVirtualGroupId = Math.round(message.localVirtualGroupId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCreateObject();
        message.creator = object.creator ?? "";
        message.owner = object.owner ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.bucketId = object.bucketId ?? "";
        message.objectId = object.objectId ?? "";
        message.primarySpId = object.primarySpId ?? 0;
        message.payloadSize = object.payloadSize !== undefined && object.payloadSize !== null ? helpers_1.Long.fromValue(object.payloadSize) : helpers_1.Long.UZERO;
        message.visibility = object.visibility ?? 0;
        message.contentType = object.contentType ?? "";
        message.createAt = object.createAt !== undefined && object.createAt !== null ? helpers_1.Long.fromValue(object.createAt) : helpers_1.Long.ZERO;
        message.status = object.status ?? 0;
        message.redundancyType = object.redundancyType ?? 0;
        message.sourceType = object.sourceType ?? 0;
        message.checksums = object.checksums?.map(e => e) || [];
        message.localVirtualGroupId = object.localVirtualGroupId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            creator: object?.creator,
            owner: object?.owner,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            bucketId: object?.bucket_id,
            objectId: object?.object_id,
            primarySpId: object?.primary_sp_id,
            payloadSize: object?.payload_size,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : -1,
            contentType: object?.content_type,
            createAt: object?.create_at,
            status: (0, helpers_1.isSet)(object.status) ? (0, common_1.objectStatusFromJSON)(object.status) : -1,
            redundancyType: (0, helpers_1.isSet)(object.redundancy_type) ? (0, common_1.redundancyTypeFromJSON)(object.redundancy_type) : -1,
            sourceType: (0, helpers_1.isSet)(object.source_type) ? (0, common_1.sourceTypeFromJSON)(object.source_type) : -1,
            checksums: Array.isArray(object?.checksums) ? object.checksums.map((e) => e) : [],
            localVirtualGroupId: object?.local_virtual_group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.creator = message.creator;
        obj.owner = message.owner;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.bucket_id = message.bucketId;
        obj.object_id = message.objectId;
        obj.primary_sp_id = message.primarySpId;
        obj.payload_size = message.payloadSize;
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        obj.content_type = message.contentType;
        obj.create_at = message.createAt;
        message.status !== undefined && (obj.status = (0, common_1.objectStatusToJSON)(message.status));
        message.redundancyType !== undefined && (obj.redundancy_type = (0, common_1.redundancyTypeToJSON)(message.redundancyType));
        message.sourceType !== undefined && (obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType));
        if (message.checksums) {
            obj.checksums = message.checksums.map(e => e);
        }
        else {
            obj.checksums = [];
        }
        obj.local_virtual_group_id = message.localVirtualGroupId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventCreateObject();
        if (object.creator !== undefined && object.creator !== null) {
            message.creator = object.creator;
        }
        if (object.owner !== undefined && object.owner !== null) {
            message.owner = object.owner;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.object_name !== undefined && object.object_name !== null) {
            message.objectName = object.object_name;
        }
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        if (object.object_id !== undefined && object.object_id !== null) {
            message.objectId = object.object_id;
        }
        if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
            message.primarySpId = object.primary_sp_id;
        }
        if (object.payload_size !== undefined && object.payload_size !== null) {
            message.payloadSize = helpers_1.Long.fromString(object.payload_size);
        }
        if (object.visibility !== undefined && object.visibility !== null) {
            message.visibility = (0, common_1.visibilityTypeFromJSON)(object.visibility);
        }
        if (object.content_type !== undefined && object.content_type !== null) {
            message.contentType = object.content_type;
        }
        if (object.create_at !== undefined && object.create_at !== null) {
            message.createAt = helpers_1.Long.fromString(object.create_at);
        }
        if (object.status !== undefined && object.status !== null) {
            message.status = (0, common_1.objectStatusFromJSON)(object.status);
        }
        if (object.redundancy_type !== undefined && object.redundancy_type !== null) {
            message.redundancyType = (0, common_1.redundancyTypeFromJSON)(object.redundancy_type);
        }
        if (object.source_type !== undefined && object.source_type !== null) {
            message.sourceType = (0, common_1.sourceTypeFromJSON)(object.source_type);
        }
        message.checksums = object.checksums?.map(e => (0, helpers_1.bytesFromBase64)(e)) || [];
        if (object.local_virtual_group_id !== undefined && object.local_virtual_group_id !== null) {
            message.localVirtualGroupId = object.local_virtual_group_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.creator = message.creator;
        obj.owner = message.owner;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.bucket_id = message.bucketId;
        obj.object_id = message.objectId;
        obj.primary_sp_id = message.primarySpId;
        obj.payload_size = message.payloadSize ? message.payloadSize.toString() : undefined;
        obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility);
        obj.content_type = message.contentType;
        obj.create_at = message.createAt ? message.createAt.toString() : undefined;
        obj.status = (0, common_1.objectStatusToJSON)(message.status);
        obj.redundancy_type = (0, common_1.redundancyTypeToJSON)(message.redundancyType);
        obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType);
        if (message.checksums) {
            obj.checksums = message.checksums.map(e => (0, helpers_1.base64FromBytes)(e));
        }
        else {
            obj.checksums = [];
        }
        obj.local_virtual_group_id = message.localVirtualGroupId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventCreateObject.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventCreateObject.decode(message.value);
    },
    toProto(message) {
        return exports.EventCreateObject.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventCreateObject",
            value: exports.EventCreateObject.encode(message).finish()
        };
    }
};
function createBaseEventCancelCreateObject() {
    return {
        operator: "",
        bucketName: "",
        objectName: "",
        primarySpId: 0,
        objectId: ""
    };
}
exports.EventCancelCreateObject = {
    typeUrl: "/greenfield.storage.EventCancelCreateObject",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.primarySpId !== 0) {
            writer.uint32(32).uint32(message.primarySpId);
        }
        if (message.objectId !== "") {
            writer.uint32(50).string(message.objectId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCancelCreateObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.primarySpId = reader.uint32();
                    break;
                case 6:
                    message.objectId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            primarySpId: (0, helpers_1.isSet)(object.primarySpId) ? Number(object.primarySpId) : 0,
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
        message.objectId !== undefined && (obj.objectId = message.objectId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCancelCreateObject();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.primarySpId = object.primarySpId ?? 0;
        message.objectId = object.objectId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            primarySpId: object?.primary_sp_id,
            objectId: object?.object_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.primary_sp_id = message.primarySpId;
        obj.object_id = message.objectId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventCancelCreateObject();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.object_name !== undefined && object.object_name !== null) {
            message.objectName = object.object_name;
        }
        if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
            message.primarySpId = object.primary_sp_id;
        }
        if (object.object_id !== undefined && object.object_id !== null) {
            message.objectId = object.object_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.primary_sp_id = message.primarySpId;
        obj.object_id = message.objectId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventCancelCreateObject.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventCancelCreateObject.decode(message.value);
    },
    toProto(message) {
        return exports.EventCancelCreateObject.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventCancelCreateObject",
            value: exports.EventCancelCreateObject.encode(message).finish()
        };
    }
};
function createBaseEventSealObject() {
    return {
        operator: "",
        bucketName: "",
        objectName: "",
        objectId: "",
        status: 0,
        globalVirtualGroupId: 0,
        localVirtualGroupId: 0
    };
}
exports.EventSealObject = {
    typeUrl: "/greenfield.storage.EventSealObject",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.objectId !== "") {
            writer.uint32(42).string(message.objectId);
        }
        if (message.status !== 0) {
            writer.uint32(48).int32(message.status);
        }
        if (message.globalVirtualGroupId !== 0) {
            writer.uint32(56).uint32(message.globalVirtualGroupId);
        }
        if (message.localVirtualGroupId !== 0) {
            writer.uint32(64).uint32(message.localVirtualGroupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventSealObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 5:
                    message.objectId = reader.string();
                    break;
                case 6:
                    message.status = reader.int32();
                    break;
                case 7:
                    message.globalVirtualGroupId = reader.uint32();
                    break;
                case 8:
                    message.localVirtualGroupId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : "",
            status: (0, helpers_1.isSet)(object.status) ? (0, common_1.objectStatusFromJSON)(object.status) : -1,
            globalVirtualGroupId: (0, helpers_1.isSet)(object.globalVirtualGroupId) ? Number(object.globalVirtualGroupId) : 0,
            localVirtualGroupId: (0, helpers_1.isSet)(object.localVirtualGroupId) ? Number(object.localVirtualGroupId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.status !== undefined && (obj.status = (0, common_1.objectStatusToJSON)(message.status));
        message.globalVirtualGroupId !== undefined && (obj.globalVirtualGroupId = Math.round(message.globalVirtualGroupId));
        message.localVirtualGroupId !== undefined && (obj.localVirtualGroupId = Math.round(message.localVirtualGroupId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventSealObject();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.objectId = object.objectId ?? "";
        message.status = object.status ?? 0;
        message.globalVirtualGroupId = object.globalVirtualGroupId ?? 0;
        message.localVirtualGroupId = object.localVirtualGroupId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            objectId: object?.object_id,
            status: (0, helpers_1.isSet)(object.status) ? (0, common_1.objectStatusFromJSON)(object.status) : -1,
            globalVirtualGroupId: object?.global_virtual_group_id,
            localVirtualGroupId: object?.local_virtual_group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        message.status !== undefined && (obj.status = (0, common_1.objectStatusToJSON)(message.status));
        obj.global_virtual_group_id = message.globalVirtualGroupId;
        obj.local_virtual_group_id = message.localVirtualGroupId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventSealObject();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.object_name !== undefined && object.object_name !== null) {
            message.objectName = object.object_name;
        }
        if (object.object_id !== undefined && object.object_id !== null) {
            message.objectId = object.object_id;
        }
        if (object.status !== undefined && object.status !== null) {
            message.status = (0, common_1.objectStatusFromJSON)(object.status);
        }
        if (object.global_virtual_group_id !== undefined && object.global_virtual_group_id !== null) {
            message.globalVirtualGroupId = object.global_virtual_group_id;
        }
        if (object.local_virtual_group_id !== undefined && object.local_virtual_group_id !== null) {
            message.localVirtualGroupId = object.local_virtual_group_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        obj.status = (0, common_1.objectStatusToJSON)(message.status);
        obj.global_virtual_group_id = message.globalVirtualGroupId;
        obj.local_virtual_group_id = message.localVirtualGroupId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventSealObject.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventSealObject.decode(message.value);
    },
    toProto(message) {
        return exports.EventSealObject.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventSealObject",
            value: exports.EventSealObject.encode(message).finish()
        };
    }
};
function createBaseEventCopyObject() {
    return {
        operator: "",
        srcBucketName: "",
        srcObjectName: "",
        dstBucketName: "",
        dstObjectName: "",
        srcObjectId: "",
        dstObjectId: "",
        localVirtualGroupId: 0
    };
}
exports.EventCopyObject = {
    typeUrl: "/greenfield.storage.EventCopyObject",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.srcBucketName !== "") {
            writer.uint32(18).string(message.srcBucketName);
        }
        if (message.srcObjectName !== "") {
            writer.uint32(26).string(message.srcObjectName);
        }
        if (message.dstBucketName !== "") {
            writer.uint32(34).string(message.dstBucketName);
        }
        if (message.dstObjectName !== "") {
            writer.uint32(42).string(message.dstObjectName);
        }
        if (message.srcObjectId !== "") {
            writer.uint32(50).string(message.srcObjectId);
        }
        if (message.dstObjectId !== "") {
            writer.uint32(58).string(message.dstObjectId);
        }
        if (message.localVirtualGroupId !== 0) {
            writer.uint32(64).uint32(message.localVirtualGroupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCopyObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.srcBucketName = reader.string();
                    break;
                case 3:
                    message.srcObjectName = reader.string();
                    break;
                case 4:
                    message.dstBucketName = reader.string();
                    break;
                case 5:
                    message.dstObjectName = reader.string();
                    break;
                case 6:
                    message.srcObjectId = reader.string();
                    break;
                case 7:
                    message.dstObjectId = reader.string();
                    break;
                case 8:
                    message.localVirtualGroupId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            srcBucketName: (0, helpers_1.isSet)(object.srcBucketName) ? String(object.srcBucketName) : "",
            srcObjectName: (0, helpers_1.isSet)(object.srcObjectName) ? String(object.srcObjectName) : "",
            dstBucketName: (0, helpers_1.isSet)(object.dstBucketName) ? String(object.dstBucketName) : "",
            dstObjectName: (0, helpers_1.isSet)(object.dstObjectName) ? String(object.dstObjectName) : "",
            srcObjectId: (0, helpers_1.isSet)(object.srcObjectId) ? String(object.srcObjectId) : "",
            dstObjectId: (0, helpers_1.isSet)(object.dstObjectId) ? String(object.dstObjectId) : "",
            localVirtualGroupId: (0, helpers_1.isSet)(object.localVirtualGroupId) ? Number(object.localVirtualGroupId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.srcBucketName !== undefined && (obj.srcBucketName = message.srcBucketName);
        message.srcObjectName !== undefined && (obj.srcObjectName = message.srcObjectName);
        message.dstBucketName !== undefined && (obj.dstBucketName = message.dstBucketName);
        message.dstObjectName !== undefined && (obj.dstObjectName = message.dstObjectName);
        message.srcObjectId !== undefined && (obj.srcObjectId = message.srcObjectId);
        message.dstObjectId !== undefined && (obj.dstObjectId = message.dstObjectId);
        message.localVirtualGroupId !== undefined && (obj.localVirtualGroupId = Math.round(message.localVirtualGroupId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCopyObject();
        message.operator = object.operator ?? "";
        message.srcBucketName = object.srcBucketName ?? "";
        message.srcObjectName = object.srcObjectName ?? "";
        message.dstBucketName = object.dstBucketName ?? "";
        message.dstObjectName = object.dstObjectName ?? "";
        message.srcObjectId = object.srcObjectId ?? "";
        message.dstObjectId = object.dstObjectId ?? "";
        message.localVirtualGroupId = object.localVirtualGroupId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            srcBucketName: object?.src_bucket_name,
            srcObjectName: object?.src_object_name,
            dstBucketName: object?.dst_bucket_name,
            dstObjectName: object?.dst_object_name,
            srcObjectId: object?.src_object_id,
            dstObjectId: object?.dst_object_id,
            localVirtualGroupId: object?.local_virtual_group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.src_bucket_name = message.srcBucketName;
        obj.src_object_name = message.srcObjectName;
        obj.dst_bucket_name = message.dstBucketName;
        obj.dst_object_name = message.dstObjectName;
        obj.src_object_id = message.srcObjectId;
        obj.dst_object_id = message.dstObjectId;
        obj.local_virtual_group_id = message.localVirtualGroupId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventCopyObject();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.src_bucket_name !== undefined && object.src_bucket_name !== null) {
            message.srcBucketName = object.src_bucket_name;
        }
        if (object.src_object_name !== undefined && object.src_object_name !== null) {
            message.srcObjectName = object.src_object_name;
        }
        if (object.dst_bucket_name !== undefined && object.dst_bucket_name !== null) {
            message.dstBucketName = object.dst_bucket_name;
        }
        if (object.dst_object_name !== undefined && object.dst_object_name !== null) {
            message.dstObjectName = object.dst_object_name;
        }
        if (object.src_object_id !== undefined && object.src_object_id !== null) {
            message.srcObjectId = object.src_object_id;
        }
        if (object.dst_object_id !== undefined && object.dst_object_id !== null) {
            message.dstObjectId = object.dst_object_id;
        }
        if (object.local_virtual_group_id !== undefined && object.local_virtual_group_id !== null) {
            message.localVirtualGroupId = object.local_virtual_group_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.src_bucket_name = message.srcBucketName;
        obj.src_object_name = message.srcObjectName;
        obj.dst_bucket_name = message.dstBucketName;
        obj.dst_object_name = message.dstObjectName;
        obj.src_object_id = message.srcObjectId;
        obj.dst_object_id = message.dstObjectId;
        obj.local_virtual_group_id = message.localVirtualGroupId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventCopyObject.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventCopyObject.decode(message.value);
    },
    toProto(message) {
        return exports.EventCopyObject.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventCopyObject",
            value: exports.EventCopyObject.encode(message).finish()
        };
    }
};
function createBaseEventDeleteObject() {
    return {
        operator: "",
        bucketName: "",
        objectName: "",
        objectId: "",
        localVirtualGroupId: 0
    };
}
exports.EventDeleteObject = {
    typeUrl: "/greenfield.storage.EventDeleteObject",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.objectId !== "") {
            writer.uint32(34).string(message.objectId);
        }
        if (message.localVirtualGroupId !== 0) {
            writer.uint32(40).uint32(message.localVirtualGroupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDeleteObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.objectId = reader.string();
                    break;
                case 5:
                    message.localVirtualGroupId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : "",
            localVirtualGroupId: (0, helpers_1.isSet)(object.localVirtualGroupId) ? Number(object.localVirtualGroupId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.localVirtualGroupId !== undefined && (obj.localVirtualGroupId = Math.round(message.localVirtualGroupId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventDeleteObject();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.objectId = object.objectId ?? "";
        message.localVirtualGroupId = object.localVirtualGroupId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            objectId: object?.object_id,
            localVirtualGroupId: object?.local_virtual_group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        obj.local_virtual_group_id = message.localVirtualGroupId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventDeleteObject();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.object_name !== undefined && object.object_name !== null) {
            message.objectName = object.object_name;
        }
        if (object.object_id !== undefined && object.object_id !== null) {
            message.objectId = object.object_id;
        }
        if (object.local_virtual_group_id !== undefined && object.local_virtual_group_id !== null) {
            message.localVirtualGroupId = object.local_virtual_group_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        obj.local_virtual_group_id = message.localVirtualGroupId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventDeleteObject.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventDeleteObject.decode(message.value);
    },
    toProto(message) {
        return exports.EventDeleteObject.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventDeleteObject",
            value: exports.EventDeleteObject.encode(message).finish()
        };
    }
};
function createBaseEventRejectSealObject() {
    return {
        operator: "",
        bucketName: "",
        objectName: "",
        objectId: ""
    };
}
exports.EventRejectSealObject = {
    typeUrl: "/greenfield.storage.EventRejectSealObject",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.objectId !== "") {
            writer.uint32(34).string(message.objectId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventRejectSealObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.objectId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventRejectSealObject();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.objectId = object.objectId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            objectId: object?.object_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventRejectSealObject();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.object_name !== undefined && object.object_name !== null) {
            message.objectName = object.object_name;
        }
        if (object.object_id !== undefined && object.object_id !== null) {
            message.objectId = object.object_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventRejectSealObject.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventRejectSealObject.decode(message.value);
    },
    toProto(message) {
        return exports.EventRejectSealObject.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventRejectSealObject",
            value: exports.EventRejectSealObject.encode(message).finish()
        };
    }
};
function createBaseEventDiscontinueObject() {
    return {
        bucketName: "",
        objectId: "",
        reason: "",
        deleteAt: helpers_1.Long.ZERO
    };
}
exports.EventDiscontinueObject = {
    typeUrl: "/greenfield.storage.EventDiscontinueObject",
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketName !== "") {
            writer.uint32(10).string(message.bucketName);
        }
        if (message.objectId !== "") {
            writer.uint32(18).string(message.objectId);
        }
        if (message.reason !== "") {
            writer.uint32(26).string(message.reason);
        }
        if (!message.deleteAt.isZero()) {
            writer.uint32(32).int64(message.deleteAt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDiscontinueObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketName = reader.string();
                    break;
                case 2:
                    message.objectId = reader.string();
                    break;
                case 3:
                    message.reason = reader.string();
                    break;
                case 4:
                    message.deleteAt = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : "",
            reason: (0, helpers_1.isSet)(object.reason) ? String(object.reason) : "",
            deleteAt: (0, helpers_1.isSet)(object.deleteAt) ? helpers_1.Long.fromValue(object.deleteAt) : helpers_1.Long.ZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.reason !== undefined && (obj.reason = message.reason);
        message.deleteAt !== undefined && (obj.deleteAt = (message.deleteAt || helpers_1.Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventDiscontinueObject();
        message.bucketName = object.bucketName ?? "";
        message.objectId = object.objectId ?? "";
        message.reason = object.reason ?? "";
        message.deleteAt = object.deleteAt !== undefined && object.deleteAt !== null ? helpers_1.Long.fromValue(object.deleteAt) : helpers_1.Long.ZERO;
        return message;
    },
    fromSDK(object) {
        return {
            bucketName: object?.bucket_name,
            objectId: object?.object_id,
            reason: object?.reason,
            deleteAt: object?.delete_at
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bucket_name = message.bucketName;
        obj.object_id = message.objectId;
        obj.reason = message.reason;
        obj.delete_at = message.deleteAt;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventDiscontinueObject();
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.object_id !== undefined && object.object_id !== null) {
            message.objectId = object.object_id;
        }
        if (object.reason !== undefined && object.reason !== null) {
            message.reason = object.reason;
        }
        if (object.delete_at !== undefined && object.delete_at !== null) {
            message.deleteAt = helpers_1.Long.fromString(object.delete_at);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.bucket_name = message.bucketName;
        obj.object_id = message.objectId;
        obj.reason = message.reason;
        obj.delete_at = message.deleteAt ? message.deleteAt.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventDiscontinueObject.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventDiscontinueObject.decode(message.value);
    },
    toProto(message) {
        return exports.EventDiscontinueObject.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventDiscontinueObject",
            value: exports.EventDiscontinueObject.encode(message).finish()
        };
    }
};
function createBaseEventUpdateObjectInfo() {
    return {
        operator: "",
        bucketName: "",
        objectName: "",
        objectId: "",
        visibility: 0
    };
}
exports.EventUpdateObjectInfo = {
    typeUrl: "/greenfield.storage.EventUpdateObjectInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.objectId !== "") {
            writer.uint32(34).string(message.objectId);
        }
        if (message.visibility !== 0) {
            writer.uint32(40).int32(message.visibility);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventUpdateObjectInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.objectId = reader.string();
                    break;
                case 5:
                    message.visibility = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : "",
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : -1
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventUpdateObjectInfo();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.objectId = object.objectId ?? "";
        message.visibility = object.visibility ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            objectId: object?.object_id,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : -1
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventUpdateObjectInfo();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.object_name !== undefined && object.object_name !== null) {
            message.objectName = object.object_name;
        }
        if (object.object_id !== undefined && object.object_id !== null) {
            message.objectId = object.object_id;
        }
        if (object.visibility !== undefined && object.visibility !== null) {
            message.visibility = (0, common_1.visibilityTypeFromJSON)(object.visibility);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility);
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventUpdateObjectInfo.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventUpdateObjectInfo.decode(message.value);
    },
    toProto(message) {
        return exports.EventUpdateObjectInfo.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventUpdateObjectInfo",
            value: exports.EventUpdateObjectInfo.encode(message).finish()
        };
    }
};
function createBaseEventCreateGroup() {
    return {
        owner: "",
        groupName: "",
        groupId: "",
        sourceType: 0,
        extra: ""
    };
}
exports.EventCreateGroup = {
    typeUrl: "/greenfield.storage.EventCreateGroup",
    encode(message, writer = _m0.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        if (message.groupName !== "") {
            writer.uint32(18).string(message.groupName);
        }
        if (message.groupId !== "") {
            writer.uint32(26).string(message.groupId);
        }
        if (message.sourceType !== 0) {
            writer.uint32(32).int32(message.sourceType);
        }
        if (message.extra !== "") {
            writer.uint32(42).string(message.extra);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCreateGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.string();
                    break;
                case 2:
                    message.groupName = reader.string();
                    break;
                case 3:
                    message.groupId = reader.string();
                    break;
                case 4:
                    message.sourceType = reader.int32();
                    break;
                case 5:
                    message.extra = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : "",
            sourceType: (0, helpers_1.isSet)(object.sourceType) ? (0, common_1.sourceTypeFromJSON)(object.sourceType) : -1,
            extra: (0, helpers_1.isSet)(object.extra) ? String(object.extra) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        message.sourceType !== undefined && (obj.sourceType = (0, common_1.sourceTypeToJSON)(message.sourceType));
        message.extra !== undefined && (obj.extra = message.extra);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCreateGroup();
        message.owner = object.owner ?? "";
        message.groupName = object.groupName ?? "";
        message.groupId = object.groupId ?? "";
        message.sourceType = object.sourceType ?? 0;
        message.extra = object.extra ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            owner: object?.owner,
            groupName: object?.group_name,
            groupId: object?.group_id,
            sourceType: (0, helpers_1.isSet)(object.source_type) ? (0, common_1.sourceTypeFromJSON)(object.source_type) : -1,
            extra: object?.extra
        };
    },
    toSDK(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        message.sourceType !== undefined && (obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType));
        obj.extra = message.extra;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventCreateGroup();
        if (object.owner !== undefined && object.owner !== null) {
            message.owner = object.owner;
        }
        if (object.group_name !== undefined && object.group_name !== null) {
            message.groupName = object.group_name;
        }
        if (object.group_id !== undefined && object.group_id !== null) {
            message.groupId = object.group_id;
        }
        if (object.source_type !== undefined && object.source_type !== null) {
            message.sourceType = (0, common_1.sourceTypeFromJSON)(object.source_type);
        }
        if (object.extra !== undefined && object.extra !== null) {
            message.extra = object.extra;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType);
        obj.extra = message.extra;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventCreateGroup.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventCreateGroup.decode(message.value);
    },
    toProto(message) {
        return exports.EventCreateGroup.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventCreateGroup",
            value: exports.EventCreateGroup.encode(message).finish()
        };
    }
};
function createBaseEventDeleteGroup() {
    return {
        owner: "",
        groupName: "",
        groupId: ""
    };
}
exports.EventDeleteGroup = {
    typeUrl: "/greenfield.storage.EventDeleteGroup",
    encode(message, writer = _m0.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        if (message.groupName !== "") {
            writer.uint32(26).string(message.groupName);
        }
        if (message.groupId !== "") {
            writer.uint32(34).string(message.groupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDeleteGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.groupName = reader.string();
                    break;
                case 4:
                    message.groupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventDeleteGroup();
        message.owner = object.owner ?? "";
        message.groupName = object.groupName ?? "";
        message.groupId = object.groupId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            owner: object?.owner,
            groupName: object?.group_name,
            groupId: object?.group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventDeleteGroup();
        if (object.owner !== undefined && object.owner !== null) {
            message.owner = object.owner;
        }
        if (object.group_name !== undefined && object.group_name !== null) {
            message.groupName = object.group_name;
        }
        if (object.group_id !== undefined && object.group_id !== null) {
            message.groupId = object.group_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventDeleteGroup.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventDeleteGroup.decode(message.value);
    },
    toProto(message) {
        return exports.EventDeleteGroup.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventDeleteGroup",
            value: exports.EventDeleteGroup.encode(message).finish()
        };
    }
};
function createBaseEventLeaveGroup() {
    return {
        memberAddress: "",
        owner: "",
        groupName: "",
        groupId: ""
    };
}
exports.EventLeaveGroup = {
    typeUrl: "/greenfield.storage.EventLeaveGroup",
    encode(message, writer = _m0.Writer.create()) {
        if (message.memberAddress !== "") {
            writer.uint32(10).string(message.memberAddress);
        }
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        if (message.groupName !== "") {
            writer.uint32(26).string(message.groupName);
        }
        if (message.groupId !== "") {
            writer.uint32(34).string(message.groupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventLeaveGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.memberAddress = reader.string();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.groupName = reader.string();
                    break;
                case 4:
                    message.groupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            memberAddress: (0, helpers_1.isSet)(object.memberAddress) ? String(object.memberAddress) : "",
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.memberAddress !== undefined && (obj.memberAddress = message.memberAddress);
        message.owner !== undefined && (obj.owner = message.owner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventLeaveGroup();
        message.memberAddress = object.memberAddress ?? "";
        message.owner = object.owner ?? "";
        message.groupName = object.groupName ?? "";
        message.groupId = object.groupId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            memberAddress: object?.member_address,
            owner: object?.owner,
            groupName: object?.group_name,
            groupId: object?.group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.member_address = message.memberAddress;
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventLeaveGroup();
        if (object.member_address !== undefined && object.member_address !== null) {
            message.memberAddress = object.member_address;
        }
        if (object.owner !== undefined && object.owner !== null) {
            message.owner = object.owner;
        }
        if (object.group_name !== undefined && object.group_name !== null) {
            message.groupName = object.group_name;
        }
        if (object.group_id !== undefined && object.group_id !== null) {
            message.groupId = object.group_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.member_address = message.memberAddress;
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventLeaveGroup.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventLeaveGroup.decode(message.value);
    },
    toProto(message) {
        return exports.EventLeaveGroup.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventLeaveGroup",
            value: exports.EventLeaveGroup.encode(message).finish()
        };
    }
};
function createBaseEventUpdateGroupMember() {
    return {
        operator: "",
        owner: "",
        groupName: "",
        groupId: "",
        membersToAdd: [],
        membersToDelete: []
    };
}
exports.EventUpdateGroupMember = {
    typeUrl: "/greenfield.storage.EventUpdateGroupMember",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        if (message.groupName !== "") {
            writer.uint32(26).string(message.groupName);
        }
        if (message.groupId !== "") {
            writer.uint32(34).string(message.groupId);
        }
        for (const v of message.membersToAdd) {
            exports.EventGroupMemberDetail.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.membersToDelete) {
            writer.uint32(50).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventUpdateGroupMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.groupName = reader.string();
                    break;
                case 4:
                    message.groupId = reader.string();
                    break;
                case 5:
                    message.membersToAdd.push(exports.EventGroupMemberDetail.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.membersToDelete.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : "",
            membersToAdd: Array.isArray(object?.membersToAdd) ? object.membersToAdd.map((e) => exports.EventGroupMemberDetail.fromJSON(e)) : [],
            membersToDelete: Array.isArray(object?.membersToDelete) ? object.membersToDelete.map((e) => String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.owner !== undefined && (obj.owner = message.owner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        if (message.membersToAdd) {
            obj.membersToAdd = message.membersToAdd.map(e => e ? exports.EventGroupMemberDetail.toJSON(e) : undefined);
        }
        else {
            obj.membersToAdd = [];
        }
        if (message.membersToDelete) {
            obj.membersToDelete = message.membersToDelete.map(e => e);
        }
        else {
            obj.membersToDelete = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventUpdateGroupMember();
        message.operator = object.operator ?? "";
        message.owner = object.owner ?? "";
        message.groupName = object.groupName ?? "";
        message.groupId = object.groupId ?? "";
        message.membersToAdd = object.membersToAdd?.map(e => exports.EventGroupMemberDetail.fromPartial(e)) || [];
        message.membersToDelete = object.membersToDelete?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            owner: object?.owner,
            groupName: object?.group_name,
            groupId: object?.group_id,
            membersToAdd: Array.isArray(object?.members_to_add) ? object.members_to_add.map((e) => exports.EventGroupMemberDetail.fromSDK(e)) : [],
            membersToDelete: Array.isArray(object?.members_to_delete) ? object.members_to_delete.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        if (message.membersToAdd) {
            obj.members_to_add = message.membersToAdd.map(e => e ? exports.EventGroupMemberDetail.toSDK(e) : undefined);
        }
        else {
            obj.members_to_add = [];
        }
        if (message.membersToDelete) {
            obj.members_to_delete = message.membersToDelete.map(e => e);
        }
        else {
            obj.members_to_delete = [];
        }
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventUpdateGroupMember();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.owner !== undefined && object.owner !== null) {
            message.owner = object.owner;
        }
        if (object.group_name !== undefined && object.group_name !== null) {
            message.groupName = object.group_name;
        }
        if (object.group_id !== undefined && object.group_id !== null) {
            message.groupId = object.group_id;
        }
        message.membersToAdd = object.members_to_add?.map(e => exports.EventGroupMemberDetail.fromAmino(e)) || [];
        message.membersToDelete = object.members_to_delete?.map(e => e) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        if (message.membersToAdd) {
            obj.members_to_add = message.membersToAdd.map(e => e ? exports.EventGroupMemberDetail.toAmino(e) : undefined);
        }
        else {
            obj.members_to_add = [];
        }
        if (message.membersToDelete) {
            obj.members_to_delete = message.membersToDelete.map(e => e);
        }
        else {
            obj.members_to_delete = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventUpdateGroupMember.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventUpdateGroupMember.decode(message.value);
    },
    toProto(message) {
        return exports.EventUpdateGroupMember.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventUpdateGroupMember",
            value: exports.EventUpdateGroupMember.encode(message).finish()
        };
    }
};
function createBaseEventRenewGroupMember() {
    return {
        operator: "",
        owner: "",
        groupName: "",
        groupId: "",
        sourceType: 0,
        members: []
    };
}
exports.EventRenewGroupMember = {
    typeUrl: "/greenfield.storage.EventRenewGroupMember",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        if (message.groupName !== "") {
            writer.uint32(26).string(message.groupName);
        }
        if (message.groupId !== "") {
            writer.uint32(34).string(message.groupId);
        }
        if (message.sourceType !== 0) {
            writer.uint32(40).int32(message.sourceType);
        }
        for (const v of message.members) {
            exports.EventGroupMemberDetail.encode(v, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventRenewGroupMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.groupName = reader.string();
                    break;
                case 4:
                    message.groupId = reader.string();
                    break;
                case 5:
                    message.sourceType = reader.int32();
                    break;
                case 6:
                    message.members.push(exports.EventGroupMemberDetail.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : "",
            sourceType: (0, helpers_1.isSet)(object.sourceType) ? (0, common_1.sourceTypeFromJSON)(object.sourceType) : -1,
            members: Array.isArray(object?.members) ? object.members.map((e) => exports.EventGroupMemberDetail.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.owner !== undefined && (obj.owner = message.owner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        message.sourceType !== undefined && (obj.sourceType = (0, common_1.sourceTypeToJSON)(message.sourceType));
        if (message.members) {
            obj.members = message.members.map(e => e ? exports.EventGroupMemberDetail.toJSON(e) : undefined);
        }
        else {
            obj.members = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventRenewGroupMember();
        message.operator = object.operator ?? "";
        message.owner = object.owner ?? "";
        message.groupName = object.groupName ?? "";
        message.groupId = object.groupId ?? "";
        message.sourceType = object.sourceType ?? 0;
        message.members = object.members?.map(e => exports.EventGroupMemberDetail.fromPartial(e)) || [];
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            owner: object?.owner,
            groupName: object?.group_name,
            groupId: object?.group_id,
            sourceType: (0, helpers_1.isSet)(object.source_type) ? (0, common_1.sourceTypeFromJSON)(object.source_type) : -1,
            members: Array.isArray(object?.members) ? object.members.map((e) => exports.EventGroupMemberDetail.fromSDK(e)) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        message.sourceType !== undefined && (obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType));
        if (message.members) {
            obj.members = message.members.map(e => e ? exports.EventGroupMemberDetail.toSDK(e) : undefined);
        }
        else {
            obj.members = [];
        }
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventRenewGroupMember();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.owner !== undefined && object.owner !== null) {
            message.owner = object.owner;
        }
        if (object.group_name !== undefined && object.group_name !== null) {
            message.groupName = object.group_name;
        }
        if (object.group_id !== undefined && object.group_id !== null) {
            message.groupId = object.group_id;
        }
        if (object.source_type !== undefined && object.source_type !== null) {
            message.sourceType = (0, common_1.sourceTypeFromJSON)(object.source_type);
        }
        message.members = object.members?.map(e => exports.EventGroupMemberDetail.fromAmino(e)) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType);
        if (message.members) {
            obj.members = message.members.map(e => e ? exports.EventGroupMemberDetail.toAmino(e) : undefined);
        }
        else {
            obj.members = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventRenewGroupMember.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventRenewGroupMember.decode(message.value);
    },
    toProto(message) {
        return exports.EventRenewGroupMember.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventRenewGroupMember",
            value: exports.EventRenewGroupMember.encode(message).finish()
        };
    }
};
function createBaseEventGroupMemberDetail() {
    return {
        member: "",
        expirationTime: undefined
    };
}
exports.EventGroupMemberDetail = {
    typeUrl: "/greenfield.storage.EventGroupMemberDetail",
    encode(message, writer = _m0.Writer.create()) {
        if (message.member !== "") {
            writer.uint32(10).string(message.member);
        }
        if (message.expirationTime !== undefined) {
            timestamp_1.Timestamp.encode(message.expirationTime, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventGroupMemberDetail();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.member = reader.string();
                    break;
                case 2:
                    message.expirationTime = timestamp_1.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            member: (0, helpers_1.isSet)(object.member) ? String(object.member) : "",
            expirationTime: (0, helpers_1.isSet)(object.expirationTime) ? (0, helpers_1.fromJsonTimestamp)(object.expirationTime) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.member !== undefined && (obj.member = message.member);
        message.expirationTime !== undefined && (obj.expirationTime = (0, helpers_1.fromTimestamp)(message.expirationTime).toISOString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventGroupMemberDetail();
        message.member = object.member ?? "";
        message.expirationTime = object.expirationTime !== undefined && object.expirationTime !== null ? timestamp_1.Timestamp.fromPartial(object.expirationTime) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            member: object?.member,
            expirationTime: object.expiration_time ? timestamp_1.Timestamp.fromSDK(object.expiration_time) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.member = message.member;
        message.expirationTime !== undefined && (obj.expiration_time = message.expirationTime ? timestamp_1.Timestamp.toSDK(message.expirationTime) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventGroupMemberDetail();
        if (object.member !== undefined && object.member !== null) {
            message.member = object.member;
        }
        if (object.expiration_time !== undefined && object.expiration_time !== null) {
            message.expirationTime = timestamp_1.Timestamp.fromAmino(object.expiration_time);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.member = message.member;
        obj.expiration_time = message.expirationTime ? timestamp_1.Timestamp.toAmino(message.expirationTime) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventGroupMemberDetail.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventGroupMemberDetail.decode(message.value);
    },
    toProto(message) {
        return exports.EventGroupMemberDetail.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventGroupMemberDetail",
            value: exports.EventGroupMemberDetail.encode(message).finish()
        };
    }
};
function createBaseEventUpdateGroupExtra() {
    return {
        operator: "",
        owner: "",
        groupName: "",
        groupId: "",
        extra: ""
    };
}
exports.EventUpdateGroupExtra = {
    typeUrl: "/greenfield.storage.EventUpdateGroupExtra",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        if (message.groupName !== "") {
            writer.uint32(26).string(message.groupName);
        }
        if (message.groupId !== "") {
            writer.uint32(34).string(message.groupId);
        }
        if (message.extra !== "") {
            writer.uint32(42).string(message.extra);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventUpdateGroupExtra();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.groupName = reader.string();
                    break;
                case 4:
                    message.groupId = reader.string();
                    break;
                case 5:
                    message.extra = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : "",
            extra: (0, helpers_1.isSet)(object.extra) ? String(object.extra) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.owner !== undefined && (obj.owner = message.owner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        message.extra !== undefined && (obj.extra = message.extra);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventUpdateGroupExtra();
        message.operator = object.operator ?? "";
        message.owner = object.owner ?? "";
        message.groupName = object.groupName ?? "";
        message.groupId = object.groupId ?? "";
        message.extra = object.extra ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            owner: object?.owner,
            groupName: object?.group_name,
            groupId: object?.group_id,
            extra: object?.extra
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        obj.extra = message.extra;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventUpdateGroupExtra();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.owner !== undefined && object.owner !== null) {
            message.owner = object.owner;
        }
        if (object.group_name !== undefined && object.group_name !== null) {
            message.groupName = object.group_name;
        }
        if (object.group_id !== undefined && object.group_id !== null) {
            message.groupId = object.group_id;
        }
        if (object.extra !== undefined && object.extra !== null) {
            message.extra = object.extra;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        obj.extra = message.extra;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventUpdateGroupExtra.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventUpdateGroupExtra.decode(message.value);
    },
    toProto(message) {
        return exports.EventUpdateGroupExtra.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventUpdateGroupExtra",
            value: exports.EventUpdateGroupExtra.encode(message).finish()
        };
    }
};
function createBaseEventMirrorBucket() {
    return {
        operator: "",
        bucketName: "",
        bucketId: "",
        destChainId: 0
    };
}
exports.EventMirrorBucket = {
    typeUrl: "/greenfield.storage.EventMirrorBucket",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.bucketId !== "") {
            writer.uint32(34).string(message.bucketId);
        }
        if (message.destChainId !== 0) {
            writer.uint32(40).uint32(message.destChainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMirrorBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 4:
                    message.bucketId = reader.string();
                    break;
                case 5:
                    message.destChainId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            destChainId: (0, helpers_1.isSet)(object.destChainId) ? Number(object.destChainId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        message.destChainId !== undefined && (obj.destChainId = Math.round(message.destChainId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventMirrorBucket();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.bucketId = object.bucketId ?? "";
        message.destChainId = object.destChainId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            bucketId: object?.bucket_id,
            destChainId: object?.dest_chain_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        obj.dest_chain_id = message.destChainId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventMirrorBucket();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        if (object.dest_chain_id !== undefined && object.dest_chain_id !== null) {
            message.destChainId = object.dest_chain_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        obj.dest_chain_id = message.destChainId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventMirrorBucket.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventMirrorBucket.decode(message.value);
    },
    toProto(message) {
        return exports.EventMirrorBucket.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventMirrorBucket",
            value: exports.EventMirrorBucket.encode(message).finish()
        };
    }
};
function createBaseEventMirrorBucketResult() {
    return {
        status: 0,
        bucketName: "",
        bucketId: "",
        destChainId: 0
    };
}
exports.EventMirrorBucketResult = {
    typeUrl: "/greenfield.storage.EventMirrorBucketResult",
    encode(message, writer = _m0.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).uint32(message.status);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.bucketId !== "") {
            writer.uint32(34).string(message.bucketId);
        }
        if (message.destChainId !== 0) {
            writer.uint32(40).uint32(message.destChainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMirrorBucketResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.status = reader.uint32();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 4:
                    message.bucketId = reader.string();
                    break;
                case 5:
                    message.destChainId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: (0, helpers_1.isSet)(object.status) ? Number(object.status) : 0,
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            destChainId: (0, helpers_1.isSet)(object.destChainId) ? Number(object.destChainId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.status !== undefined && (obj.status = Math.round(message.status));
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        message.destChainId !== undefined && (obj.destChainId = Math.round(message.destChainId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventMirrorBucketResult();
        message.status = object.status ?? 0;
        message.bucketName = object.bucketName ?? "";
        message.bucketId = object.bucketId ?? "";
        message.destChainId = object.destChainId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            status: object?.status,
            bucketName: object?.bucket_name,
            bucketId: object?.bucket_id,
            destChainId: object?.dest_chain_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.status = message.status;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        obj.dest_chain_id = message.destChainId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventMirrorBucketResult();
        if (object.status !== undefined && object.status !== null) {
            message.status = object.status;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        if (object.dest_chain_id !== undefined && object.dest_chain_id !== null) {
            message.destChainId = object.dest_chain_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.status = message.status;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        obj.dest_chain_id = message.destChainId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventMirrorBucketResult.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventMirrorBucketResult.decode(message.value);
    },
    toProto(message) {
        return exports.EventMirrorBucketResult.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventMirrorBucketResult",
            value: exports.EventMirrorBucketResult.encode(message).finish()
        };
    }
};
function createBaseEventMirrorObject() {
    return {
        operator: "",
        bucketName: "",
        objectName: "",
        objectId: "",
        destChainId: 0
    };
}
exports.EventMirrorObject = {
    typeUrl: "/greenfield.storage.EventMirrorObject",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.objectId !== "") {
            writer.uint32(34).string(message.objectId);
        }
        if (message.destChainId !== 0) {
            writer.uint32(40).uint32(message.destChainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMirrorObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.objectId = reader.string();
                    break;
                case 5:
                    message.destChainId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : "",
            destChainId: (0, helpers_1.isSet)(object.destChainId) ? Number(object.destChainId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.destChainId !== undefined && (obj.destChainId = Math.round(message.destChainId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventMirrorObject();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.objectId = object.objectId ?? "";
        message.destChainId = object.destChainId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            objectId: object?.object_id,
            destChainId: object?.dest_chain_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        obj.dest_chain_id = message.destChainId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventMirrorObject();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.object_name !== undefined && object.object_name !== null) {
            message.objectName = object.object_name;
        }
        if (object.object_id !== undefined && object.object_id !== null) {
            message.objectId = object.object_id;
        }
        if (object.dest_chain_id !== undefined && object.dest_chain_id !== null) {
            message.destChainId = object.dest_chain_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        obj.dest_chain_id = message.destChainId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventMirrorObject.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventMirrorObject.decode(message.value);
    },
    toProto(message) {
        return exports.EventMirrorObject.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventMirrorObject",
            value: exports.EventMirrorObject.encode(message).finish()
        };
    }
};
function createBaseEventMirrorObjectResult() {
    return {
        status: 0,
        bucketName: "",
        objectName: "",
        objectId: "",
        destChainId: 0
    };
}
exports.EventMirrorObjectResult = {
    typeUrl: "/greenfield.storage.EventMirrorObjectResult",
    encode(message, writer = _m0.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).uint32(message.status);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.objectId !== "") {
            writer.uint32(34).string(message.objectId);
        }
        if (message.destChainId !== 0) {
            writer.uint32(40).uint32(message.destChainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMirrorObjectResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.status = reader.uint32();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.objectId = reader.string();
                    break;
                case 5:
                    message.destChainId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: (0, helpers_1.isSet)(object.status) ? Number(object.status) : 0,
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : "",
            destChainId: (0, helpers_1.isSet)(object.destChainId) ? Number(object.destChainId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.status !== undefined && (obj.status = Math.round(message.status));
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.destChainId !== undefined && (obj.destChainId = Math.round(message.destChainId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventMirrorObjectResult();
        message.status = object.status ?? 0;
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.objectId = object.objectId ?? "";
        message.destChainId = object.destChainId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            status: object?.status,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            objectId: object?.object_id,
            destChainId: object?.dest_chain_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.status = message.status;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        obj.dest_chain_id = message.destChainId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventMirrorObjectResult();
        if (object.status !== undefined && object.status !== null) {
            message.status = object.status;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.object_name !== undefined && object.object_name !== null) {
            message.objectName = object.object_name;
        }
        if (object.object_id !== undefined && object.object_id !== null) {
            message.objectId = object.object_id;
        }
        if (object.dest_chain_id !== undefined && object.dest_chain_id !== null) {
            message.destChainId = object.dest_chain_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.status = message.status;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        obj.dest_chain_id = message.destChainId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventMirrorObjectResult.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventMirrorObjectResult.decode(message.value);
    },
    toProto(message) {
        return exports.EventMirrorObjectResult.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventMirrorObjectResult",
            value: exports.EventMirrorObjectResult.encode(message).finish()
        };
    }
};
function createBaseEventMirrorGroup() {
    return {
        owner: "",
        groupName: "",
        groupId: "",
        destChainId: 0
    };
}
exports.EventMirrorGroup = {
    typeUrl: "/greenfield.storage.EventMirrorGroup",
    encode(message, writer = _m0.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        if (message.groupName !== "") {
            writer.uint32(18).string(message.groupName);
        }
        if (message.groupId !== "") {
            writer.uint32(26).string(message.groupId);
        }
        if (message.destChainId !== 0) {
            writer.uint32(32).uint32(message.destChainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMirrorGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.string();
                    break;
                case 2:
                    message.groupName = reader.string();
                    break;
                case 3:
                    message.groupId = reader.string();
                    break;
                case 4:
                    message.destChainId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : "",
            destChainId: (0, helpers_1.isSet)(object.destChainId) ? Number(object.destChainId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        message.destChainId !== undefined && (obj.destChainId = Math.round(message.destChainId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventMirrorGroup();
        message.owner = object.owner ?? "";
        message.groupName = object.groupName ?? "";
        message.groupId = object.groupId ?? "";
        message.destChainId = object.destChainId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            owner: object?.owner,
            groupName: object?.group_name,
            groupId: object?.group_id,
            destChainId: object?.dest_chain_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        obj.dest_chain_id = message.destChainId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventMirrorGroup();
        if (object.owner !== undefined && object.owner !== null) {
            message.owner = object.owner;
        }
        if (object.group_name !== undefined && object.group_name !== null) {
            message.groupName = object.group_name;
        }
        if (object.group_id !== undefined && object.group_id !== null) {
            message.groupId = object.group_id;
        }
        if (object.dest_chain_id !== undefined && object.dest_chain_id !== null) {
            message.destChainId = object.dest_chain_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        obj.dest_chain_id = message.destChainId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventMirrorGroup.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventMirrorGroup.decode(message.value);
    },
    toProto(message) {
        return exports.EventMirrorGroup.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventMirrorGroup",
            value: exports.EventMirrorGroup.encode(message).finish()
        };
    }
};
function createBaseEventMirrorGroupResult() {
    return {
        status: 0,
        groupName: "",
        groupId: "",
        destChainId: 0
    };
}
exports.EventMirrorGroupResult = {
    typeUrl: "/greenfield.storage.EventMirrorGroupResult",
    encode(message, writer = _m0.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).uint32(message.status);
        }
        if (message.groupName !== "") {
            writer.uint32(18).string(message.groupName);
        }
        if (message.groupId !== "") {
            writer.uint32(26).string(message.groupId);
        }
        if (message.destChainId !== 0) {
            writer.uint32(32).uint32(message.destChainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMirrorGroupResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.status = reader.uint32();
                    break;
                case 2:
                    message.groupName = reader.string();
                    break;
                case 3:
                    message.groupId = reader.string();
                    break;
                case 4:
                    message.destChainId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: (0, helpers_1.isSet)(object.status) ? Number(object.status) : 0,
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : "",
            destChainId: (0, helpers_1.isSet)(object.destChainId) ? Number(object.destChainId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.status !== undefined && (obj.status = Math.round(message.status));
        message.groupName !== undefined && (obj.groupName = message.groupName);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        message.destChainId !== undefined && (obj.destChainId = Math.round(message.destChainId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventMirrorGroupResult();
        message.status = object.status ?? 0;
        message.groupName = object.groupName ?? "";
        message.groupId = object.groupId ?? "";
        message.destChainId = object.destChainId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            status: object?.status,
            groupName: object?.group_name,
            groupId: object?.group_id,
            destChainId: object?.dest_chain_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.status = message.status;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        obj.dest_chain_id = message.destChainId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventMirrorGroupResult();
        if (object.status !== undefined && object.status !== null) {
            message.status = object.status;
        }
        if (object.group_name !== undefined && object.group_name !== null) {
            message.groupName = object.group_name;
        }
        if (object.group_id !== undefined && object.group_id !== null) {
            message.groupId = object.group_id;
        }
        if (object.dest_chain_id !== undefined && object.dest_chain_id !== null) {
            message.destChainId = object.dest_chain_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.status = message.status;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        obj.dest_chain_id = message.destChainId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventMirrorGroupResult.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventMirrorGroupResult.decode(message.value);
    },
    toProto(message) {
        return exports.EventMirrorGroupResult.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventMirrorGroupResult",
            value: exports.EventMirrorGroupResult.encode(message).finish()
        };
    }
};
function createBaseEventStalePolicyCleanup() {
    return {
        blockNum: helpers_1.Long.ZERO,
        deleteInfo: undefined
    };
}
exports.EventStalePolicyCleanup = {
    typeUrl: "/greenfield.storage.EventStalePolicyCleanup",
    encode(message, writer = _m0.Writer.create()) {
        if (!message.blockNum.isZero()) {
            writer.uint32(8).int64(message.blockNum);
        }
        if (message.deleteInfo !== undefined) {
            types_1.DeleteInfo.encode(message.deleteInfo, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventStalePolicyCleanup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.blockNum = reader.int64();
                    break;
                case 2:
                    message.deleteInfo = types_1.DeleteInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockNum: (0, helpers_1.isSet)(object.blockNum) ? helpers_1.Long.fromValue(object.blockNum) : helpers_1.Long.ZERO,
            deleteInfo: (0, helpers_1.isSet)(object.deleteInfo) ? types_1.DeleteInfo.fromJSON(object.deleteInfo) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.blockNum !== undefined && (obj.blockNum = (message.blockNum || helpers_1.Long.ZERO).toString());
        message.deleteInfo !== undefined && (obj.deleteInfo = message.deleteInfo ? types_1.DeleteInfo.toJSON(message.deleteInfo) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventStalePolicyCleanup();
        message.blockNum = object.blockNum !== undefined && object.blockNum !== null ? helpers_1.Long.fromValue(object.blockNum) : helpers_1.Long.ZERO;
        message.deleteInfo = object.deleteInfo !== undefined && object.deleteInfo !== null ? types_1.DeleteInfo.fromPartial(object.deleteInfo) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            blockNum: object?.blockNum,
            deleteInfo: object.delete_info ? types_1.DeleteInfo.fromSDK(object.delete_info) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.blockNum = message.blockNum;
        message.deleteInfo !== undefined && (obj.delete_info = message.deleteInfo ? types_1.DeleteInfo.toSDK(message.deleteInfo) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventStalePolicyCleanup();
        if (object.blockNum !== undefined && object.blockNum !== null) {
            message.blockNum = helpers_1.Long.fromString(object.blockNum);
        }
        if (object.delete_info !== undefined && object.delete_info !== null) {
            message.deleteInfo = types_1.DeleteInfo.fromAmino(object.delete_info);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.blockNum = message.blockNum ? message.blockNum.toString() : undefined;
        obj.delete_info = message.deleteInfo ? types_1.DeleteInfo.toAmino(message.deleteInfo) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventStalePolicyCleanup.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventStalePolicyCleanup.decode(message.value);
    },
    toProto(message) {
        return exports.EventStalePolicyCleanup.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventStalePolicyCleanup",
            value: exports.EventStalePolicyCleanup.encode(message).finish()
        };
    }
};
function createBaseEventMigrationBucket() {
    return {
        operator: "",
        bucketName: "",
        bucketId: "",
        dstPrimarySpId: 0
    };
}
exports.EventMigrationBucket = {
    typeUrl: "/greenfield.storage.EventMigrationBucket",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.bucketId !== "") {
            writer.uint32(26).string(message.bucketId);
        }
        if (message.dstPrimarySpId !== 0) {
            writer.uint32(32).uint32(message.dstPrimarySpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMigrationBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.bucketId = reader.string();
                    break;
                case 4:
                    message.dstPrimarySpId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            dstPrimarySpId: (0, helpers_1.isSet)(object.dstPrimarySpId) ? Number(object.dstPrimarySpId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        message.dstPrimarySpId !== undefined && (obj.dstPrimarySpId = Math.round(message.dstPrimarySpId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventMigrationBucket();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.bucketId = object.bucketId ?? "";
        message.dstPrimarySpId = object.dstPrimarySpId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            bucketId: object?.bucket_id,
            dstPrimarySpId: object?.dst_primary_sp_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        obj.dst_primary_sp_id = message.dstPrimarySpId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventMigrationBucket();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        if (object.dst_primary_sp_id !== undefined && object.dst_primary_sp_id !== null) {
            message.dstPrimarySpId = object.dst_primary_sp_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        obj.dst_primary_sp_id = message.dstPrimarySpId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventMigrationBucket.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventMigrationBucket.decode(message.value);
    },
    toProto(message) {
        return exports.EventMigrationBucket.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventMigrationBucket",
            value: exports.EventMigrationBucket.encode(message).finish()
        };
    }
};
function createBaseEventCancelMigrationBucket() {
    return {
        operator: "",
        bucketName: "",
        bucketId: ""
    };
}
exports.EventCancelMigrationBucket = {
    typeUrl: "/greenfield.storage.EventCancelMigrationBucket",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.bucketId !== "") {
            writer.uint32(26).string(message.bucketId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCancelMigrationBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.bucketId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCancelMigrationBucket();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.bucketId = object.bucketId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            bucketId: object?.bucket_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventCancelMigrationBucket();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventCancelMigrationBucket.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventCancelMigrationBucket.decode(message.value);
    },
    toProto(message) {
        return exports.EventCancelMigrationBucket.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventCancelMigrationBucket",
            value: exports.EventCancelMigrationBucket.encode(message).finish()
        };
    }
};
function createBaseEventRejectMigrateBucket() {
    return {
        operator: "",
        bucketName: "",
        bucketId: ""
    };
}
exports.EventRejectMigrateBucket = {
    typeUrl: "/greenfield.storage.EventRejectMigrateBucket",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.bucketId !== "") {
            writer.uint32(26).string(message.bucketId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventRejectMigrateBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.bucketId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventRejectMigrateBucket();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.bucketId = object.bucketId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            bucketId: object?.bucket_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventRejectMigrateBucket();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventRejectMigrateBucket.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventRejectMigrateBucket.decode(message.value);
    },
    toProto(message) {
        return exports.EventRejectMigrateBucket.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventRejectMigrateBucket",
            value: exports.EventRejectMigrateBucket.encode(message).finish()
        };
    }
};
function createBaseEventCompleteMigrationBucket() {
    return {
        operator: "",
        bucketName: "",
        bucketId: "",
        globalVirtualGroupFamilyId: 0,
        srcPrimarySpId: 0
    };
}
exports.EventCompleteMigrationBucket = {
    typeUrl: "/greenfield.storage.EventCompleteMigrationBucket",
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.bucketId !== "") {
            writer.uint32(26).string(message.bucketId);
        }
        if (message.globalVirtualGroupFamilyId !== 0) {
            writer.uint32(32).uint32(message.globalVirtualGroupFamilyId);
        }
        if (message.srcPrimarySpId !== 0) {
            writer.uint32(40).uint32(message.srcPrimarySpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCompleteMigrationBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.bucketId = reader.string();
                    break;
                case 4:
                    message.globalVirtualGroupFamilyId = reader.uint32();
                    break;
                case 5:
                    message.srcPrimarySpId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            globalVirtualGroupFamilyId: (0, helpers_1.isSet)(object.globalVirtualGroupFamilyId) ? Number(object.globalVirtualGroupFamilyId) : 0,
            srcPrimarySpId: (0, helpers_1.isSet)(object.srcPrimarySpId) ? Number(object.srcPrimarySpId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        message.globalVirtualGroupFamilyId !== undefined && (obj.globalVirtualGroupFamilyId = Math.round(message.globalVirtualGroupFamilyId));
        message.srcPrimarySpId !== undefined && (obj.srcPrimarySpId = Math.round(message.srcPrimarySpId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCompleteMigrationBucket();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.bucketId = object.bucketId ?? "";
        message.globalVirtualGroupFamilyId = object.globalVirtualGroupFamilyId ?? 0;
        message.srcPrimarySpId = object.srcPrimarySpId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            bucketId: object?.bucket_id,
            globalVirtualGroupFamilyId: object?.global_virtual_group_family_id,
            srcPrimarySpId: object?.src_primary_sp_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        obj.src_primary_sp_id = message.srcPrimarySpId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventCompleteMigrationBucket();
        if (object.operator !== undefined && object.operator !== null) {
            message.operator = object.operator;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        if (object.global_virtual_group_family_id !== undefined && object.global_virtual_group_family_id !== null) {
            message.globalVirtualGroupFamilyId = object.global_virtual_group_family_id;
        }
        if (object.src_primary_sp_id !== undefined && object.src_primary_sp_id !== null) {
            message.srcPrimarySpId = object.src_primary_sp_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        obj.src_primary_sp_id = message.srcPrimarySpId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventCompleteMigrationBucket.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventCompleteMigrationBucket.decode(message.value);
    },
    toProto(message) {
        return exports.EventCompleteMigrationBucket.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventCompleteMigrationBucket",
            value: exports.EventCompleteMigrationBucket.encode(message).finish()
        };
    }
};
function createBaseEventSetTag() {
    return {
        resource: "",
        tags: undefined
    };
}
exports.EventSetTag = {
    typeUrl: "/greenfield.storage.EventSetTag",
    encode(message, writer = _m0.Writer.create()) {
        if (message.resource !== "") {
            writer.uint32(10).string(message.resource);
        }
        if (message.tags !== undefined) {
            types_1.ResourceTags.encode(message.tags, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventSetTag();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.resource = reader.string();
                    break;
                case 2:
                    message.tags = types_1.ResourceTags.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            resource: (0, helpers_1.isSet)(object.resource) ? String(object.resource) : "",
            tags: (0, helpers_1.isSet)(object.tags) ? types_1.ResourceTags.fromJSON(object.tags) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.resource !== undefined && (obj.resource = message.resource);
        message.tags !== undefined && (obj.tags = message.tags ? types_1.ResourceTags.toJSON(message.tags) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventSetTag();
        message.resource = object.resource ?? "";
        message.tags = object.tags !== undefined && object.tags !== null ? types_1.ResourceTags.fromPartial(object.tags) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            resource: object?.resource,
            tags: object.tags ? types_1.ResourceTags.fromSDK(object.tags) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.resource = message.resource;
        message.tags !== undefined && (obj.tags = message.tags ? types_1.ResourceTags.toSDK(message.tags) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventSetTag();
        if (object.resource !== undefined && object.resource !== null) {
            message.resource = object.resource;
        }
        if (object.tags !== undefined && object.tags !== null) {
            message.tags = types_1.ResourceTags.fromAmino(object.tags);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.resource = message.resource;
        obj.tags = message.tags ? types_1.ResourceTags.toAmino(message.tags) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventSetTag.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.EventSetTag.decode(message.value);
    },
    toProto(message) {
        return exports.EventSetTag.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.EventSetTag",
            value: exports.EventSetTag.encode(message).finish()
        };
    }
};
//# sourceMappingURL=events.js.map