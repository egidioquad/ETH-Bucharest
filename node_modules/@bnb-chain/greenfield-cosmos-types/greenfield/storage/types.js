"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceTags_Tag = exports.ResourceTags = exports.MigrationBucketInfo = exports.DeleteInfo = exports.Ids = exports.GroupMetaData = exports.ObjectMetaData = exports.BucketMetaData = exports.Trait = exports.GroupInfo = exports.ObjectInfo = exports.InternalBucketInfo = exports.BucketInfo = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const common_1 = require("./common");
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.storage";
function createBaseBucketInfo() {
    return {
        owner: "",
        bucketName: "",
        visibility: 0,
        id: "",
        sourceType: 0,
        createAt: helpers_1.Long.ZERO,
        paymentAddress: "",
        globalVirtualGroupFamilyId: 0,
        chargedReadQuota: helpers_1.Long.UZERO,
        bucketStatus: 0,
        tags: undefined
    };
}
exports.BucketInfo = {
    typeUrl: "/greenfield.storage.BucketInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.visibility !== 0) {
            writer.uint32(24).int32(message.visibility);
        }
        if (message.id !== "") {
            writer.uint32(34).string(message.id);
        }
        if (message.sourceType !== 0) {
            writer.uint32(40).int32(message.sourceType);
        }
        if (!message.createAt.isZero()) {
            writer.uint32(48).int64(message.createAt);
        }
        if (message.paymentAddress !== "") {
            writer.uint32(58).string(message.paymentAddress);
        }
        if (message.globalVirtualGroupFamilyId !== 0) {
            writer.uint32(64).uint32(message.globalVirtualGroupFamilyId);
        }
        if (!message.chargedReadQuota.isZero()) {
            writer.uint32(72).uint64(message.chargedReadQuota);
        }
        if (message.bucketStatus !== 0) {
            writer.uint32(80).int32(message.bucketStatus);
        }
        if (message.tags !== undefined) {
            exports.ResourceTags.encode(message.tags, writer.uint32(90).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBucketInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.visibility = reader.int32();
                    break;
                case 4:
                    message.id = reader.string();
                    break;
                case 5:
                    message.sourceType = reader.int32();
                    break;
                case 6:
                    message.createAt = reader.int64();
                    break;
                case 7:
                    message.paymentAddress = reader.string();
                    break;
                case 8:
                    message.globalVirtualGroupFamilyId = reader.uint32();
                    break;
                case 9:
                    message.chargedReadQuota = reader.uint64();
                    break;
                case 10:
                    message.bucketStatus = reader.int32();
                    break;
                case 11:
                    message.tags = exports.ResourceTags.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : -1,
            id: (0, helpers_1.isSet)(object.id) ? String(object.id) : "",
            sourceType: (0, helpers_1.isSet)(object.sourceType) ? (0, common_1.sourceTypeFromJSON)(object.sourceType) : -1,
            createAt: (0, helpers_1.isSet)(object.createAt) ? helpers_1.Long.fromValue(object.createAt) : helpers_1.Long.ZERO,
            paymentAddress: (0, helpers_1.isSet)(object.paymentAddress) ? String(object.paymentAddress) : "",
            globalVirtualGroupFamilyId: (0, helpers_1.isSet)(object.globalVirtualGroupFamilyId) ? Number(object.globalVirtualGroupFamilyId) : 0,
            chargedReadQuota: (0, helpers_1.isSet)(object.chargedReadQuota) ? helpers_1.Long.fromValue(object.chargedReadQuota) : helpers_1.Long.UZERO,
            bucketStatus: (0, helpers_1.isSet)(object.bucketStatus) ? (0, common_1.bucketStatusFromJSON)(object.bucketStatus) : -1,
            tags: (0, helpers_1.isSet)(object.tags) ? exports.ResourceTags.fromJSON(object.tags) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        message.id !== undefined && (obj.id = message.id);
        message.sourceType !== undefined && (obj.sourceType = (0, common_1.sourceTypeToJSON)(message.sourceType));
        message.createAt !== undefined && (obj.createAt = (message.createAt || helpers_1.Long.ZERO).toString());
        message.paymentAddress !== undefined && (obj.paymentAddress = message.paymentAddress);
        message.globalVirtualGroupFamilyId !== undefined && (obj.globalVirtualGroupFamilyId = Math.round(message.globalVirtualGroupFamilyId));
        message.chargedReadQuota !== undefined && (obj.chargedReadQuota = (message.chargedReadQuota || helpers_1.Long.UZERO).toString());
        message.bucketStatus !== undefined && (obj.bucketStatus = (0, common_1.bucketStatusToJSON)(message.bucketStatus));
        message.tags !== undefined && (obj.tags = message.tags ? exports.ResourceTags.toJSON(message.tags) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseBucketInfo();
        message.owner = object.owner ?? "";
        message.bucketName = object.bucketName ?? "";
        message.visibility = object.visibility ?? 0;
        message.id = object.id ?? "";
        message.sourceType = object.sourceType ?? 0;
        message.createAt = object.createAt !== undefined && object.createAt !== null ? helpers_1.Long.fromValue(object.createAt) : helpers_1.Long.ZERO;
        message.paymentAddress = object.paymentAddress ?? "";
        message.globalVirtualGroupFamilyId = object.globalVirtualGroupFamilyId ?? 0;
        message.chargedReadQuota = object.chargedReadQuota !== undefined && object.chargedReadQuota !== null ? helpers_1.Long.fromValue(object.chargedReadQuota) : helpers_1.Long.UZERO;
        message.bucketStatus = object.bucketStatus ?? 0;
        message.tags = object.tags !== undefined && object.tags !== null ? exports.ResourceTags.fromPartial(object.tags) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            owner: object?.owner,
            bucketName: object?.bucket_name,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : -1,
            id: object?.id,
            sourceType: (0, helpers_1.isSet)(object.source_type) ? (0, common_1.sourceTypeFromJSON)(object.source_type) : -1,
            createAt: object?.create_at,
            paymentAddress: object?.payment_address,
            globalVirtualGroupFamilyId: object?.global_virtual_group_family_id,
            chargedReadQuota: object?.charged_read_quota,
            bucketStatus: (0, helpers_1.isSet)(object.bucket_status) ? (0, common_1.bucketStatusFromJSON)(object.bucket_status) : -1,
            tags: object.tags ? exports.ResourceTags.fromSDK(object.tags) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.bucket_name = message.bucketName;
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        obj.id = message.id;
        message.sourceType !== undefined && (obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType));
        obj.create_at = message.createAt;
        obj.payment_address = message.paymentAddress;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        obj.charged_read_quota = message.chargedReadQuota;
        message.bucketStatus !== undefined && (obj.bucket_status = (0, common_1.bucketStatusToJSON)(message.bucketStatus));
        message.tags !== undefined && (obj.tags = message.tags ? exports.ResourceTags.toSDK(message.tags) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseBucketInfo();
        if (object.owner !== undefined && object.owner !== null) {
            message.owner = object.owner;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.visibility !== undefined && object.visibility !== null) {
            message.visibility = (0, common_1.visibilityTypeFromJSON)(object.visibility);
        }
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        if (object.source_type !== undefined && object.source_type !== null) {
            message.sourceType = (0, common_1.sourceTypeFromJSON)(object.source_type);
        }
        if (object.create_at !== undefined && object.create_at !== null) {
            message.createAt = helpers_1.Long.fromString(object.create_at);
        }
        if (object.payment_address !== undefined && object.payment_address !== null) {
            message.paymentAddress = object.payment_address;
        }
        if (object.global_virtual_group_family_id !== undefined && object.global_virtual_group_family_id !== null) {
            message.globalVirtualGroupFamilyId = object.global_virtual_group_family_id;
        }
        if (object.charged_read_quota !== undefined && object.charged_read_quota !== null) {
            message.chargedReadQuota = helpers_1.Long.fromString(object.charged_read_quota);
        }
        if (object.bucket_status !== undefined && object.bucket_status !== null) {
            message.bucketStatus = (0, common_1.bucketStatusFromJSON)(object.bucket_status);
        }
        if (object.tags !== undefined && object.tags !== null) {
            message.tags = exports.ResourceTags.fromAmino(object.tags);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.bucket_name = message.bucketName;
        obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility);
        obj.id = message.id;
        obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType);
        obj.create_at = message.createAt ? message.createAt.toString() : undefined;
        obj.payment_address = message.paymentAddress;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        obj.charged_read_quota = message.chargedReadQuota ? message.chargedReadQuota.toString() : undefined;
        obj.bucket_status = (0, common_1.bucketStatusToJSON)(message.bucketStatus);
        obj.tags = message.tags ? exports.ResourceTags.toAmino(message.tags) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.BucketInfo.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.BucketInfo.decode(message.value);
    },
    toProto(message) {
        return exports.BucketInfo.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.BucketInfo",
            value: exports.BucketInfo.encode(message).finish()
        };
    }
};
function createBaseInternalBucketInfo() {
    return {
        priceTime: helpers_1.Long.ZERO,
        totalChargeSize: helpers_1.Long.UZERO,
        localVirtualGroups: [],
        nextLocalVirtualGroupId: 0
    };
}
exports.InternalBucketInfo = {
    typeUrl: "/greenfield.storage.InternalBucketInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (!message.priceTime.isZero()) {
            writer.uint32(8).int64(message.priceTime);
        }
        if (!message.totalChargeSize.isZero()) {
            writer.uint32(16).uint64(message.totalChargeSize);
        }
        for (const v of message.localVirtualGroups) {
            common_1.LocalVirtualGroup.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.nextLocalVirtualGroupId !== 0) {
            writer.uint32(32).uint32(message.nextLocalVirtualGroupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInternalBucketInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.priceTime = reader.int64();
                    break;
                case 2:
                    message.totalChargeSize = reader.uint64();
                    break;
                case 3:
                    message.localVirtualGroups.push(common_1.LocalVirtualGroup.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.nextLocalVirtualGroupId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            priceTime: (0, helpers_1.isSet)(object.priceTime) ? helpers_1.Long.fromValue(object.priceTime) : helpers_1.Long.ZERO,
            totalChargeSize: (0, helpers_1.isSet)(object.totalChargeSize) ? helpers_1.Long.fromValue(object.totalChargeSize) : helpers_1.Long.UZERO,
            localVirtualGroups: Array.isArray(object?.localVirtualGroups) ? object.localVirtualGroups.map((e) => common_1.LocalVirtualGroup.fromJSON(e)) : [],
            nextLocalVirtualGroupId: (0, helpers_1.isSet)(object.nextLocalVirtualGroupId) ? Number(object.nextLocalVirtualGroupId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.priceTime !== undefined && (obj.priceTime = (message.priceTime || helpers_1.Long.ZERO).toString());
        message.totalChargeSize !== undefined && (obj.totalChargeSize = (message.totalChargeSize || helpers_1.Long.UZERO).toString());
        if (message.localVirtualGroups) {
            obj.localVirtualGroups = message.localVirtualGroups.map(e => e ? common_1.LocalVirtualGroup.toJSON(e) : undefined);
        }
        else {
            obj.localVirtualGroups = [];
        }
        message.nextLocalVirtualGroupId !== undefined && (obj.nextLocalVirtualGroupId = Math.round(message.nextLocalVirtualGroupId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseInternalBucketInfo();
        message.priceTime = object.priceTime !== undefined && object.priceTime !== null ? helpers_1.Long.fromValue(object.priceTime) : helpers_1.Long.ZERO;
        message.totalChargeSize = object.totalChargeSize !== undefined && object.totalChargeSize !== null ? helpers_1.Long.fromValue(object.totalChargeSize) : helpers_1.Long.UZERO;
        message.localVirtualGroups = object.localVirtualGroups?.map(e => common_1.LocalVirtualGroup.fromPartial(e)) || [];
        message.nextLocalVirtualGroupId = object.nextLocalVirtualGroupId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            priceTime: object?.price_time,
            totalChargeSize: object?.total_charge_size,
            localVirtualGroups: Array.isArray(object?.local_virtual_groups) ? object.local_virtual_groups.map((e) => common_1.LocalVirtualGroup.fromSDK(e)) : [],
            nextLocalVirtualGroupId: object?.next_local_virtual_group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.price_time = message.priceTime;
        obj.total_charge_size = message.totalChargeSize;
        if (message.localVirtualGroups) {
            obj.local_virtual_groups = message.localVirtualGroups.map(e => e ? common_1.LocalVirtualGroup.toSDK(e) : undefined);
        }
        else {
            obj.local_virtual_groups = [];
        }
        obj.next_local_virtual_group_id = message.nextLocalVirtualGroupId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseInternalBucketInfo();
        if (object.price_time !== undefined && object.price_time !== null) {
            message.priceTime = helpers_1.Long.fromString(object.price_time);
        }
        if (object.total_charge_size !== undefined && object.total_charge_size !== null) {
            message.totalChargeSize = helpers_1.Long.fromString(object.total_charge_size);
        }
        message.localVirtualGroups = object.local_virtual_groups?.map(e => common_1.LocalVirtualGroup.fromAmino(e)) || [];
        if (object.next_local_virtual_group_id !== undefined && object.next_local_virtual_group_id !== null) {
            message.nextLocalVirtualGroupId = object.next_local_virtual_group_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.price_time = message.priceTime ? message.priceTime.toString() : undefined;
        obj.total_charge_size = message.totalChargeSize ? message.totalChargeSize.toString() : undefined;
        if (message.localVirtualGroups) {
            obj.local_virtual_groups = message.localVirtualGroups.map(e => e ? common_1.LocalVirtualGroup.toAmino(e) : undefined);
        }
        else {
            obj.local_virtual_groups = [];
        }
        obj.next_local_virtual_group_id = message.nextLocalVirtualGroupId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.InternalBucketInfo.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.InternalBucketInfo.decode(message.value);
    },
    toProto(message) {
        return exports.InternalBucketInfo.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.InternalBucketInfo",
            value: exports.InternalBucketInfo.encode(message).finish()
        };
    }
};
function createBaseObjectInfo() {
    return {
        owner: "",
        creator: "",
        bucketName: "",
        objectName: "",
        id: "",
        localVirtualGroupId: 0,
        payloadSize: helpers_1.Long.UZERO,
        visibility: 0,
        contentType: "",
        createAt: helpers_1.Long.ZERO,
        objectStatus: 0,
        redundancyType: 0,
        sourceType: 0,
        checksums: [],
        tags: undefined
    };
}
exports.ObjectInfo = {
    typeUrl: "/greenfield.storage.ObjectInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        if (message.creator !== "") {
            writer.uint32(18).string(message.creator);
        }
        if (message.bucketName !== "") {
            writer.uint32(26).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(34).string(message.objectName);
        }
        if (message.id !== "") {
            writer.uint32(42).string(message.id);
        }
        if (message.localVirtualGroupId !== 0) {
            writer.uint32(48).uint32(message.localVirtualGroupId);
        }
        if (!message.payloadSize.isZero()) {
            writer.uint32(56).uint64(message.payloadSize);
        }
        if (message.visibility !== 0) {
            writer.uint32(64).int32(message.visibility);
        }
        if (message.contentType !== "") {
            writer.uint32(74).string(message.contentType);
        }
        if (!message.createAt.isZero()) {
            writer.uint32(80).int64(message.createAt);
        }
        if (message.objectStatus !== 0) {
            writer.uint32(88).int32(message.objectStatus);
        }
        if (message.redundancyType !== 0) {
            writer.uint32(96).int32(message.redundancyType);
        }
        if (message.sourceType !== 0) {
            writer.uint32(104).int32(message.sourceType);
        }
        for (const v of message.checksums) {
            writer.uint32(114).bytes(v);
        }
        if (message.tags !== undefined) {
            exports.ResourceTags.encode(message.tags, writer.uint32(122).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseObjectInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.string();
                    break;
                case 2:
                    message.creator = reader.string();
                    break;
                case 3:
                    message.bucketName = reader.string();
                    break;
                case 4:
                    message.objectName = reader.string();
                    break;
                case 5:
                    message.id = reader.string();
                    break;
                case 6:
                    message.localVirtualGroupId = reader.uint32();
                    break;
                case 7:
                    message.payloadSize = reader.uint64();
                    break;
                case 8:
                    message.visibility = reader.int32();
                    break;
                case 9:
                    message.contentType = reader.string();
                    break;
                case 10:
                    message.createAt = reader.int64();
                    break;
                case 11:
                    message.objectStatus = reader.int32();
                    break;
                case 12:
                    message.redundancyType = reader.int32();
                    break;
                case 13:
                    message.sourceType = reader.int32();
                    break;
                case 14:
                    message.checksums.push(reader.bytes());
                    break;
                case 15:
                    message.tags = exports.ResourceTags.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            creator: (0, helpers_1.isSet)(object.creator) ? String(object.creator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            id: (0, helpers_1.isSet)(object.id) ? String(object.id) : "",
            localVirtualGroupId: (0, helpers_1.isSet)(object.localVirtualGroupId) ? Number(object.localVirtualGroupId) : 0,
            payloadSize: (0, helpers_1.isSet)(object.payloadSize) ? helpers_1.Long.fromValue(object.payloadSize) : helpers_1.Long.UZERO,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : -1,
            contentType: (0, helpers_1.isSet)(object.contentType) ? String(object.contentType) : "",
            createAt: (0, helpers_1.isSet)(object.createAt) ? helpers_1.Long.fromValue(object.createAt) : helpers_1.Long.ZERO,
            objectStatus: (0, helpers_1.isSet)(object.objectStatus) ? (0, common_1.objectStatusFromJSON)(object.objectStatus) : -1,
            redundancyType: (0, helpers_1.isSet)(object.redundancyType) ? (0, common_1.redundancyTypeFromJSON)(object.redundancyType) : -1,
            sourceType: (0, helpers_1.isSet)(object.sourceType) ? (0, common_1.sourceTypeFromJSON)(object.sourceType) : -1,
            checksums: Array.isArray(object?.checksums) ? object.checksums.map((e) => (0, helpers_1.bytesFromBase64)(e)) : [],
            tags: (0, helpers_1.isSet)(object.tags) ? exports.ResourceTags.fromJSON(object.tags) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        message.creator !== undefined && (obj.creator = message.creator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.id !== undefined && (obj.id = message.id);
        message.localVirtualGroupId !== undefined && (obj.localVirtualGroupId = Math.round(message.localVirtualGroupId));
        message.payloadSize !== undefined && (obj.payloadSize = (message.payloadSize || helpers_1.Long.UZERO).toString());
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        message.contentType !== undefined && (obj.contentType = message.contentType);
        message.createAt !== undefined && (obj.createAt = (message.createAt || helpers_1.Long.ZERO).toString());
        message.objectStatus !== undefined && (obj.objectStatus = (0, common_1.objectStatusToJSON)(message.objectStatus));
        message.redundancyType !== undefined && (obj.redundancyType = (0, common_1.redundancyTypeToJSON)(message.redundancyType));
        message.sourceType !== undefined && (obj.sourceType = (0, common_1.sourceTypeToJSON)(message.sourceType));
        if (message.checksums) {
            obj.checksums = message.checksums.map(e => (0, helpers_1.base64FromBytes)(e !== undefined ? e : new Uint8Array()));
        }
        else {
            obj.checksums = [];
        }
        message.tags !== undefined && (obj.tags = message.tags ? exports.ResourceTags.toJSON(message.tags) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseObjectInfo();
        message.owner = object.owner ?? "";
        message.creator = object.creator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.id = object.id ?? "";
        message.localVirtualGroupId = object.localVirtualGroupId ?? 0;
        message.payloadSize = object.payloadSize !== undefined && object.payloadSize !== null ? helpers_1.Long.fromValue(object.payloadSize) : helpers_1.Long.UZERO;
        message.visibility = object.visibility ?? 0;
        message.contentType = object.contentType ?? "";
        message.createAt = object.createAt !== undefined && object.createAt !== null ? helpers_1.Long.fromValue(object.createAt) : helpers_1.Long.ZERO;
        message.objectStatus = object.objectStatus ?? 0;
        message.redundancyType = object.redundancyType ?? 0;
        message.sourceType = object.sourceType ?? 0;
        message.checksums = object.checksums?.map(e => e) || [];
        message.tags = object.tags !== undefined && object.tags !== null ? exports.ResourceTags.fromPartial(object.tags) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            owner: object?.owner,
            creator: object?.creator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            id: object?.id,
            localVirtualGroupId: object?.local_virtual_group_id,
            payloadSize: object?.payload_size,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : -1,
            contentType: object?.content_type,
            createAt: object?.create_at,
            objectStatus: (0, helpers_1.isSet)(object.object_status) ? (0, common_1.objectStatusFromJSON)(object.object_status) : -1,
            redundancyType: (0, helpers_1.isSet)(object.redundancy_type) ? (0, common_1.redundancyTypeFromJSON)(object.redundancy_type) : -1,
            sourceType: (0, helpers_1.isSet)(object.source_type) ? (0, common_1.sourceTypeFromJSON)(object.source_type) : -1,
            checksums: Array.isArray(object?.checksums) ? object.checksums.map((e) => e) : [],
            tags: object.tags ? exports.ResourceTags.fromSDK(object.tags) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.creator = message.creator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.id = message.id;
        obj.local_virtual_group_id = message.localVirtualGroupId;
        obj.payload_size = message.payloadSize;
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        obj.content_type = message.contentType;
        obj.create_at = message.createAt;
        message.objectStatus !== undefined && (obj.object_status = (0, common_1.objectStatusToJSON)(message.objectStatus));
        message.redundancyType !== undefined && (obj.redundancy_type = (0, common_1.redundancyTypeToJSON)(message.redundancyType));
        message.sourceType !== undefined && (obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType));
        if (message.checksums) {
            obj.checksums = message.checksums.map(e => e);
        }
        else {
            obj.checksums = [];
        }
        message.tags !== undefined && (obj.tags = message.tags ? exports.ResourceTags.toSDK(message.tags) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseObjectInfo();
        if (object.owner !== undefined && object.owner !== null) {
            message.owner = object.owner;
        }
        if (object.creator !== undefined && object.creator !== null) {
            message.creator = object.creator;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.object_name !== undefined && object.object_name !== null) {
            message.objectName = object.object_name;
        }
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        if (object.local_virtual_group_id !== undefined && object.local_virtual_group_id !== null) {
            message.localVirtualGroupId = object.local_virtual_group_id;
        }
        if (object.payload_size !== undefined && object.payload_size !== null) {
            message.payloadSize = helpers_1.Long.fromString(object.payload_size);
        }
        if (object.visibility !== undefined && object.visibility !== null) {
            message.visibility = (0, common_1.visibilityTypeFromJSON)(object.visibility);
        }
        if (object.content_type !== undefined && object.content_type !== null) {
            message.contentType = object.content_type;
        }
        if (object.create_at !== undefined && object.create_at !== null) {
            message.createAt = helpers_1.Long.fromString(object.create_at);
        }
        if (object.object_status !== undefined && object.object_status !== null) {
            message.objectStatus = (0, common_1.objectStatusFromJSON)(object.object_status);
        }
        if (object.redundancy_type !== undefined && object.redundancy_type !== null) {
            message.redundancyType = (0, common_1.redundancyTypeFromJSON)(object.redundancy_type);
        }
        if (object.source_type !== undefined && object.source_type !== null) {
            message.sourceType = (0, common_1.sourceTypeFromJSON)(object.source_type);
        }
        message.checksums = object.checksums?.map(e => (0, helpers_1.bytesFromBase64)(e)) || [];
        if (object.tags !== undefined && object.tags !== null) {
            message.tags = exports.ResourceTags.fromAmino(object.tags);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.creator = message.creator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.id = message.id;
        obj.local_virtual_group_id = message.localVirtualGroupId;
        obj.payload_size = message.payloadSize ? message.payloadSize.toString() : undefined;
        obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility);
        obj.content_type = message.contentType;
        obj.create_at = message.createAt ? message.createAt.toString() : undefined;
        obj.object_status = (0, common_1.objectStatusToJSON)(message.objectStatus);
        obj.redundancy_type = (0, common_1.redundancyTypeToJSON)(message.redundancyType);
        obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType);
        if (message.checksums) {
            obj.checksums = message.checksums.map(e => (0, helpers_1.base64FromBytes)(e));
        }
        else {
            obj.checksums = [];
        }
        obj.tags = message.tags ? exports.ResourceTags.toAmino(message.tags) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.ObjectInfo.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.ObjectInfo.decode(message.value);
    },
    toProto(message) {
        return exports.ObjectInfo.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.ObjectInfo",
            value: exports.ObjectInfo.encode(message).finish()
        };
    }
};
function createBaseGroupInfo() {
    return {
        owner: "",
        groupName: "",
        sourceType: 0,
        id: "",
        extra: "",
        tags: undefined
    };
}
exports.GroupInfo = {
    typeUrl: "/greenfield.storage.GroupInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        if (message.groupName !== "") {
            writer.uint32(18).string(message.groupName);
        }
        if (message.sourceType !== 0) {
            writer.uint32(24).int32(message.sourceType);
        }
        if (message.id !== "") {
            writer.uint32(34).string(message.id);
        }
        if (message.extra !== "") {
            writer.uint32(42).string(message.extra);
        }
        if (message.tags !== undefined) {
            exports.ResourceTags.encode(message.tags, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.string();
                    break;
                case 2:
                    message.groupName = reader.string();
                    break;
                case 3:
                    message.sourceType = reader.int32();
                    break;
                case 4:
                    message.id = reader.string();
                    break;
                case 5:
                    message.extra = reader.string();
                    break;
                case 6:
                    message.tags = exports.ResourceTags.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            sourceType: (0, helpers_1.isSet)(object.sourceType) ? (0, common_1.sourceTypeFromJSON)(object.sourceType) : -1,
            id: (0, helpers_1.isSet)(object.id) ? String(object.id) : "",
            extra: (0, helpers_1.isSet)(object.extra) ? String(object.extra) : "",
            tags: (0, helpers_1.isSet)(object.tags) ? exports.ResourceTags.fromJSON(object.tags) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        message.sourceType !== undefined && (obj.sourceType = (0, common_1.sourceTypeToJSON)(message.sourceType));
        message.id !== undefined && (obj.id = message.id);
        message.extra !== undefined && (obj.extra = message.extra);
        message.tags !== undefined && (obj.tags = message.tags ? exports.ResourceTags.toJSON(message.tags) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGroupInfo();
        message.owner = object.owner ?? "";
        message.groupName = object.groupName ?? "";
        message.sourceType = object.sourceType ?? 0;
        message.id = object.id ?? "";
        message.extra = object.extra ?? "";
        message.tags = object.tags !== undefined && object.tags !== null ? exports.ResourceTags.fromPartial(object.tags) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            owner: object?.owner,
            groupName: object?.group_name,
            sourceType: (0, helpers_1.isSet)(object.source_type) ? (0, common_1.sourceTypeFromJSON)(object.source_type) : -1,
            id: object?.id,
            extra: object?.extra,
            tags: object.tags ? exports.ResourceTags.fromSDK(object.tags) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        message.sourceType !== undefined && (obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType));
        obj.id = message.id;
        obj.extra = message.extra;
        message.tags !== undefined && (obj.tags = message.tags ? exports.ResourceTags.toSDK(message.tags) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseGroupInfo();
        if (object.owner !== undefined && object.owner !== null) {
            message.owner = object.owner;
        }
        if (object.group_name !== undefined && object.group_name !== null) {
            message.groupName = object.group_name;
        }
        if (object.source_type !== undefined && object.source_type !== null) {
            message.sourceType = (0, common_1.sourceTypeFromJSON)(object.source_type);
        }
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        if (object.extra !== undefined && object.extra !== null) {
            message.extra = object.extra;
        }
        if (object.tags !== undefined && object.tags !== null) {
            message.tags = exports.ResourceTags.fromAmino(object.tags);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType);
        obj.id = message.id;
        obj.extra = message.extra;
        obj.tags = message.tags ? exports.ResourceTags.toAmino(message.tags) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.GroupInfo.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.GroupInfo.decode(message.value);
    },
    toProto(message) {
        return exports.GroupInfo.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.GroupInfo",
            value: exports.GroupInfo.encode(message).finish()
        };
    }
};
function createBaseTrait() {
    return {
        traitType: "",
        value: ""
    };
}
exports.Trait = {
    typeUrl: "/greenfield.storage.Trait",
    encode(message, writer = _m0.Writer.create()) {
        if (message.traitType !== "") {
            writer.uint32(10).string(message.traitType);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTrait();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.traitType = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            traitType: (0, helpers_1.isSet)(object.traitType) ? String(object.traitType) : "",
            value: (0, helpers_1.isSet)(object.value) ? String(object.value) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.traitType !== undefined && (obj.traitType = message.traitType);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseTrait();
        message.traitType = object.traitType ?? "";
        message.value = object.value ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            traitType: object?.trait_type,
            value: object?.value
        };
    },
    toSDK(message) {
        const obj = {};
        obj.trait_type = message.traitType;
        obj.value = message.value;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseTrait();
        if (object.trait_type !== undefined && object.trait_type !== null) {
            message.traitType = object.trait_type;
        }
        if (object.value !== undefined && object.value !== null) {
            message.value = object.value;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.trait_type = message.traitType;
        obj.value = message.value;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.Trait.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.Trait.decode(message.value);
    },
    toProto(message) {
        return exports.Trait.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.Trait",
            value: exports.Trait.encode(message).finish()
        };
    }
};
function createBaseBucketMetaData() {
    return {
        description: "",
        externalUrl: "",
        bucketName: "",
        image: "",
        attributes: []
    };
}
exports.BucketMetaData = {
    typeUrl: "/greenfield.storage.BucketMetaData",
    encode(message, writer = _m0.Writer.create()) {
        if (message.description !== "") {
            writer.uint32(10).string(message.description);
        }
        if (message.externalUrl !== "") {
            writer.uint32(18).string(message.externalUrl);
        }
        if (message.bucketName !== "") {
            writer.uint32(26).string(message.bucketName);
        }
        if (message.image !== "") {
            writer.uint32(34).string(message.image);
        }
        for (const v of message.attributes) {
            exports.Trait.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBucketMetaData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.description = reader.string();
                    break;
                case 2:
                    message.externalUrl = reader.string();
                    break;
                case 3:
                    message.bucketName = reader.string();
                    break;
                case 4:
                    message.image = reader.string();
                    break;
                case 5:
                    message.attributes.push(exports.Trait.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            description: (0, helpers_1.isSet)(object.description) ? String(object.description) : "",
            externalUrl: (0, helpers_1.isSet)(object.externalUrl) ? String(object.externalUrl) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            image: (0, helpers_1.isSet)(object.image) ? String(object.image) : "",
            attributes: Array.isArray(object?.attributes) ? object.attributes.map((e) => exports.Trait.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.description !== undefined && (obj.description = message.description);
        message.externalUrl !== undefined && (obj.externalUrl = message.externalUrl);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.image !== undefined && (obj.image = message.image);
        if (message.attributes) {
            obj.attributes = message.attributes.map(e => e ? exports.Trait.toJSON(e) : undefined);
        }
        else {
            obj.attributes = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseBucketMetaData();
        message.description = object.description ?? "";
        message.externalUrl = object.externalUrl ?? "";
        message.bucketName = object.bucketName ?? "";
        message.image = object.image ?? "";
        message.attributes = object.attributes?.map(e => exports.Trait.fromPartial(e)) || [];
        return message;
    },
    fromSDK(object) {
        return {
            description: object?.description,
            externalUrl: object?.external_url,
            bucketName: object?.bucket_name,
            image: object?.image,
            attributes: Array.isArray(object?.attributes) ? object.attributes.map((e) => exports.Trait.fromSDK(e)) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.description = message.description;
        obj.external_url = message.externalUrl;
        obj.bucket_name = message.bucketName;
        obj.image = message.image;
        if (message.attributes) {
            obj.attributes = message.attributes.map(e => e ? exports.Trait.toSDK(e) : undefined);
        }
        else {
            obj.attributes = [];
        }
        return obj;
    },
    fromAmino(object) {
        const message = createBaseBucketMetaData();
        if (object.description !== undefined && object.description !== null) {
            message.description = object.description;
        }
        if (object.external_url !== undefined && object.external_url !== null) {
            message.externalUrl = object.external_url;
        }
        if (object.bucket_name !== undefined && object.bucket_name !== null) {
            message.bucketName = object.bucket_name;
        }
        if (object.image !== undefined && object.image !== null) {
            message.image = object.image;
        }
        message.attributes = object.attributes?.map(e => exports.Trait.fromAmino(e)) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.description = message.description;
        obj.external_url = message.externalUrl;
        obj.bucket_name = message.bucketName;
        obj.image = message.image;
        if (message.attributes) {
            obj.attributes = message.attributes.map(e => e ? exports.Trait.toAmino(e) : undefined);
        }
        else {
            obj.attributes = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.BucketMetaData.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.BucketMetaData.decode(message.value);
    },
    toProto(message) {
        return exports.BucketMetaData.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.BucketMetaData",
            value: exports.BucketMetaData.encode(message).finish()
        };
    }
};
function createBaseObjectMetaData() {
    return {
        description: "",
        externalUrl: "",
        objectName: "",
        image: "",
        attributes: []
    };
}
exports.ObjectMetaData = {
    typeUrl: "/greenfield.storage.ObjectMetaData",
    encode(message, writer = _m0.Writer.create()) {
        if (message.description !== "") {
            writer.uint32(10).string(message.description);
        }
        if (message.externalUrl !== "") {
            writer.uint32(18).string(message.externalUrl);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.image !== "") {
            writer.uint32(34).string(message.image);
        }
        for (const v of message.attributes) {
            exports.Trait.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseObjectMetaData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.description = reader.string();
                    break;
                case 2:
                    message.externalUrl = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.image = reader.string();
                    break;
                case 5:
                    message.attributes.push(exports.Trait.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            description: (0, helpers_1.isSet)(object.description) ? String(object.description) : "",
            externalUrl: (0, helpers_1.isSet)(object.externalUrl) ? String(object.externalUrl) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            image: (0, helpers_1.isSet)(object.image) ? String(object.image) : "",
            attributes: Array.isArray(object?.attributes) ? object.attributes.map((e) => exports.Trait.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.description !== undefined && (obj.description = message.description);
        message.externalUrl !== undefined && (obj.externalUrl = message.externalUrl);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.image !== undefined && (obj.image = message.image);
        if (message.attributes) {
            obj.attributes = message.attributes.map(e => e ? exports.Trait.toJSON(e) : undefined);
        }
        else {
            obj.attributes = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseObjectMetaData();
        message.description = object.description ?? "";
        message.externalUrl = object.externalUrl ?? "";
        message.objectName = object.objectName ?? "";
        message.image = object.image ?? "";
        message.attributes = object.attributes?.map(e => exports.Trait.fromPartial(e)) || [];
        return message;
    },
    fromSDK(object) {
        return {
            description: object?.description,
            externalUrl: object?.external_url,
            objectName: object?.object_name,
            image: object?.image,
            attributes: Array.isArray(object?.attributes) ? object.attributes.map((e) => exports.Trait.fromSDK(e)) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.description = message.description;
        obj.external_url = message.externalUrl;
        obj.object_name = message.objectName;
        obj.image = message.image;
        if (message.attributes) {
            obj.attributes = message.attributes.map(e => e ? exports.Trait.toSDK(e) : undefined);
        }
        else {
            obj.attributes = [];
        }
        return obj;
    },
    fromAmino(object) {
        const message = createBaseObjectMetaData();
        if (object.description !== undefined && object.description !== null) {
            message.description = object.description;
        }
        if (object.external_url !== undefined && object.external_url !== null) {
            message.externalUrl = object.external_url;
        }
        if (object.object_name !== undefined && object.object_name !== null) {
            message.objectName = object.object_name;
        }
        if (object.image !== undefined && object.image !== null) {
            message.image = object.image;
        }
        message.attributes = object.attributes?.map(e => exports.Trait.fromAmino(e)) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.description = message.description;
        obj.external_url = message.externalUrl;
        obj.object_name = message.objectName;
        obj.image = message.image;
        if (message.attributes) {
            obj.attributes = message.attributes.map(e => e ? exports.Trait.toAmino(e) : undefined);
        }
        else {
            obj.attributes = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.ObjectMetaData.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.ObjectMetaData.decode(message.value);
    },
    toProto(message) {
        return exports.ObjectMetaData.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.ObjectMetaData",
            value: exports.ObjectMetaData.encode(message).finish()
        };
    }
};
function createBaseGroupMetaData() {
    return {
        description: "",
        externalUrl: "",
        groupName: "",
        image: "",
        attributes: []
    };
}
exports.GroupMetaData = {
    typeUrl: "/greenfield.storage.GroupMetaData",
    encode(message, writer = _m0.Writer.create()) {
        if (message.description !== "") {
            writer.uint32(10).string(message.description);
        }
        if (message.externalUrl !== "") {
            writer.uint32(18).string(message.externalUrl);
        }
        if (message.groupName !== "") {
            writer.uint32(26).string(message.groupName);
        }
        if (message.image !== "") {
            writer.uint32(34).string(message.image);
        }
        for (const v of message.attributes) {
            exports.Trait.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupMetaData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.description = reader.string();
                    break;
                case 2:
                    message.externalUrl = reader.string();
                    break;
                case 3:
                    message.groupName = reader.string();
                    break;
                case 4:
                    message.image = reader.string();
                    break;
                case 5:
                    message.attributes.push(exports.Trait.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            description: (0, helpers_1.isSet)(object.description) ? String(object.description) : "",
            externalUrl: (0, helpers_1.isSet)(object.externalUrl) ? String(object.externalUrl) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            image: (0, helpers_1.isSet)(object.image) ? String(object.image) : "",
            attributes: Array.isArray(object?.attributes) ? object.attributes.map((e) => exports.Trait.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.description !== undefined && (obj.description = message.description);
        message.externalUrl !== undefined && (obj.externalUrl = message.externalUrl);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        message.image !== undefined && (obj.image = message.image);
        if (message.attributes) {
            obj.attributes = message.attributes.map(e => e ? exports.Trait.toJSON(e) : undefined);
        }
        else {
            obj.attributes = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGroupMetaData();
        message.description = object.description ?? "";
        message.externalUrl = object.externalUrl ?? "";
        message.groupName = object.groupName ?? "";
        message.image = object.image ?? "";
        message.attributes = object.attributes?.map(e => exports.Trait.fromPartial(e)) || [];
        return message;
    },
    fromSDK(object) {
        return {
            description: object?.description,
            externalUrl: object?.external_url,
            groupName: object?.group_name,
            image: object?.image,
            attributes: Array.isArray(object?.attributes) ? object.attributes.map((e) => exports.Trait.fromSDK(e)) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.description = message.description;
        obj.external_url = message.externalUrl;
        obj.group_name = message.groupName;
        obj.image = message.image;
        if (message.attributes) {
            obj.attributes = message.attributes.map(e => e ? exports.Trait.toSDK(e) : undefined);
        }
        else {
            obj.attributes = [];
        }
        return obj;
    },
    fromAmino(object) {
        const message = createBaseGroupMetaData();
        if (object.description !== undefined && object.description !== null) {
            message.description = object.description;
        }
        if (object.external_url !== undefined && object.external_url !== null) {
            message.externalUrl = object.external_url;
        }
        if (object.group_name !== undefined && object.group_name !== null) {
            message.groupName = object.group_name;
        }
        if (object.image !== undefined && object.image !== null) {
            message.image = object.image;
        }
        message.attributes = object.attributes?.map(e => exports.Trait.fromAmino(e)) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.description = message.description;
        obj.external_url = message.externalUrl;
        obj.group_name = message.groupName;
        obj.image = message.image;
        if (message.attributes) {
            obj.attributes = message.attributes.map(e => e ? exports.Trait.toAmino(e) : undefined);
        }
        else {
            obj.attributes = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.GroupMetaData.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.GroupMetaData.decode(message.value);
    },
    toProto(message) {
        return exports.GroupMetaData.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.GroupMetaData",
            value: exports.GroupMetaData.encode(message).finish()
        };
    }
};
function createBaseIds() {
    return {
        id: []
    };
}
exports.Ids = {
    typeUrl: "/greenfield.storage.Ids",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.id) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIds();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: Array.isArray(object?.id) ? object.id.map((e) => String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id) {
            obj.id = message.id.map(e => e);
        }
        else {
            obj.id = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseIds();
        message.id = object.id?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            id: Array.isArray(object?.id) ? object.id.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.id) {
            obj.id = message.id.map(e => e);
        }
        else {
            obj.id = [];
        }
        return obj;
    },
    fromAmino(object) {
        const message = createBaseIds();
        message.id = object.id?.map(e => e) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        if (message.id) {
            obj.id = message.id.map(e => e);
        }
        else {
            obj.id = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.Ids.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.Ids.decode(message.value);
    },
    toProto(message) {
        return exports.Ids.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.Ids",
            value: exports.Ids.encode(message).finish()
        };
    }
};
function createBaseDeleteInfo() {
    return {
        bucketIds: undefined,
        objectIds: undefined,
        groupIds: undefined
    };
}
exports.DeleteInfo = {
    typeUrl: "/greenfield.storage.DeleteInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketIds !== undefined) {
            exports.Ids.encode(message.bucketIds, writer.uint32(10).fork()).ldelim();
        }
        if (message.objectIds !== undefined) {
            exports.Ids.encode(message.objectIds, writer.uint32(18).fork()).ldelim();
        }
        if (message.groupIds !== undefined) {
            exports.Ids.encode(message.groupIds, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketIds = exports.Ids.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.objectIds = exports.Ids.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.groupIds = exports.Ids.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketIds: (0, helpers_1.isSet)(object.bucketIds) ? exports.Ids.fromJSON(object.bucketIds) : undefined,
            objectIds: (0, helpers_1.isSet)(object.objectIds) ? exports.Ids.fromJSON(object.objectIds) : undefined,
            groupIds: (0, helpers_1.isSet)(object.groupIds) ? exports.Ids.fromJSON(object.groupIds) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketIds !== undefined && (obj.bucketIds = message.bucketIds ? exports.Ids.toJSON(message.bucketIds) : undefined);
        message.objectIds !== undefined && (obj.objectIds = message.objectIds ? exports.Ids.toJSON(message.objectIds) : undefined);
        message.groupIds !== undefined && (obj.groupIds = message.groupIds ? exports.Ids.toJSON(message.groupIds) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDeleteInfo();
        message.bucketIds = object.bucketIds !== undefined && object.bucketIds !== null ? exports.Ids.fromPartial(object.bucketIds) : undefined;
        message.objectIds = object.objectIds !== undefined && object.objectIds !== null ? exports.Ids.fromPartial(object.objectIds) : undefined;
        message.groupIds = object.groupIds !== undefined && object.groupIds !== null ? exports.Ids.fromPartial(object.groupIds) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            bucketIds: object.bucket_ids ? exports.Ids.fromSDK(object.bucket_ids) : undefined,
            objectIds: object.object_ids ? exports.Ids.fromSDK(object.object_ids) : undefined,
            groupIds: object.group_ids ? exports.Ids.fromSDK(object.group_ids) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.bucketIds !== undefined && (obj.bucket_ids = message.bucketIds ? exports.Ids.toSDK(message.bucketIds) : undefined);
        message.objectIds !== undefined && (obj.object_ids = message.objectIds ? exports.Ids.toSDK(message.objectIds) : undefined);
        message.groupIds !== undefined && (obj.group_ids = message.groupIds ? exports.Ids.toSDK(message.groupIds) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseDeleteInfo();
        if (object.bucket_ids !== undefined && object.bucket_ids !== null) {
            message.bucketIds = exports.Ids.fromAmino(object.bucket_ids);
        }
        if (object.object_ids !== undefined && object.object_ids !== null) {
            message.objectIds = exports.Ids.fromAmino(object.object_ids);
        }
        if (object.group_ids !== undefined && object.group_ids !== null) {
            message.groupIds = exports.Ids.fromAmino(object.group_ids);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.bucket_ids = message.bucketIds ? exports.Ids.toAmino(message.bucketIds) : undefined;
        obj.object_ids = message.objectIds ? exports.Ids.toAmino(message.objectIds) : undefined;
        obj.group_ids = message.groupIds ? exports.Ids.toAmino(message.groupIds) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.DeleteInfo.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.DeleteInfo.decode(message.value);
    },
    toProto(message) {
        return exports.DeleteInfo.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.DeleteInfo",
            value: exports.DeleteInfo.encode(message).finish()
        };
    }
};
function createBaseMigrationBucketInfo() {
    return {
        srcSpId: 0,
        srcGlobalVirtualGroupFamilyId: 0,
        dstSpId: 0,
        bucketId: ""
    };
}
exports.MigrationBucketInfo = {
    typeUrl: "/greenfield.storage.MigrationBucketInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.srcSpId !== 0) {
            writer.uint32(8).uint32(message.srcSpId);
        }
        if (message.srcGlobalVirtualGroupFamilyId !== 0) {
            writer.uint32(16).uint32(message.srcGlobalVirtualGroupFamilyId);
        }
        if (message.dstSpId !== 0) {
            writer.uint32(24).uint32(message.dstSpId);
        }
        if (message.bucketId !== "") {
            writer.uint32(34).string(message.bucketId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMigrationBucketInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.srcSpId = reader.uint32();
                    break;
                case 2:
                    message.srcGlobalVirtualGroupFamilyId = reader.uint32();
                    break;
                case 3:
                    message.dstSpId = reader.uint32();
                    break;
                case 4:
                    message.bucketId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            srcSpId: (0, helpers_1.isSet)(object.srcSpId) ? Number(object.srcSpId) : 0,
            srcGlobalVirtualGroupFamilyId: (0, helpers_1.isSet)(object.srcGlobalVirtualGroupFamilyId) ? Number(object.srcGlobalVirtualGroupFamilyId) : 0,
            dstSpId: (0, helpers_1.isSet)(object.dstSpId) ? Number(object.dstSpId) : 0,
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.srcSpId !== undefined && (obj.srcSpId = Math.round(message.srcSpId));
        message.srcGlobalVirtualGroupFamilyId !== undefined && (obj.srcGlobalVirtualGroupFamilyId = Math.round(message.srcGlobalVirtualGroupFamilyId));
        message.dstSpId !== undefined && (obj.dstSpId = Math.round(message.dstSpId));
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMigrationBucketInfo();
        message.srcSpId = object.srcSpId ?? 0;
        message.srcGlobalVirtualGroupFamilyId = object.srcGlobalVirtualGroupFamilyId ?? 0;
        message.dstSpId = object.dstSpId ?? 0;
        message.bucketId = object.bucketId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            srcSpId: object?.src_sp_id,
            srcGlobalVirtualGroupFamilyId: object?.src_global_virtual_group_family_id,
            dstSpId: object?.dst_sp_id,
            bucketId: object?.bucket_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.src_sp_id = message.srcSpId;
        obj.src_global_virtual_group_family_id = message.srcGlobalVirtualGroupFamilyId;
        obj.dst_sp_id = message.dstSpId;
        obj.bucket_id = message.bucketId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseMigrationBucketInfo();
        if (object.src_sp_id !== undefined && object.src_sp_id !== null) {
            message.srcSpId = object.src_sp_id;
        }
        if (object.src_global_virtual_group_family_id !== undefined && object.src_global_virtual_group_family_id !== null) {
            message.srcGlobalVirtualGroupFamilyId = object.src_global_virtual_group_family_id;
        }
        if (object.dst_sp_id !== undefined && object.dst_sp_id !== null) {
            message.dstSpId = object.dst_sp_id;
        }
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.src_sp_id = message.srcSpId;
        obj.src_global_virtual_group_family_id = message.srcGlobalVirtualGroupFamilyId;
        obj.dst_sp_id = message.dstSpId;
        obj.bucket_id = message.bucketId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MigrationBucketInfo.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MigrationBucketInfo.decode(message.value);
    },
    toProto(message) {
        return exports.MigrationBucketInfo.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.MigrationBucketInfo",
            value: exports.MigrationBucketInfo.encode(message).finish()
        };
    }
};
function createBaseResourceTags() {
    return {
        tags: []
    };
}
exports.ResourceTags = {
    typeUrl: "/greenfield.storage.ResourceTags",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.tags) {
            exports.ResourceTags_Tag.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResourceTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tags.push(exports.ResourceTags_Tag.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            tags: Array.isArray(object?.tags) ? object.tags.map((e) => exports.ResourceTags_Tag.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tags) {
            obj.tags = message.tags.map(e => e ? exports.ResourceTags_Tag.toJSON(e) : undefined);
        }
        else {
            obj.tags = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseResourceTags();
        message.tags = object.tags?.map(e => exports.ResourceTags_Tag.fromPartial(e)) || [];
        return message;
    },
    fromSDK(object) {
        return {
            tags: Array.isArray(object?.tags) ? object.tags.map((e) => exports.ResourceTags_Tag.fromSDK(e)) : []
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.tags) {
            obj.tags = message.tags.map(e => e ? exports.ResourceTags_Tag.toSDK(e) : undefined);
        }
        else {
            obj.tags = [];
        }
        return obj;
    },
    fromAmino(object) {
        const message = createBaseResourceTags();
        message.tags = object.tags?.map(e => exports.ResourceTags_Tag.fromAmino(e)) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        if (message.tags) {
            obj.tags = message.tags.map(e => e ? exports.ResourceTags_Tag.toAmino(e) : undefined);
        }
        else {
            obj.tags = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.ResourceTags.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.ResourceTags.decode(message.value);
    },
    toProto(message) {
        return exports.ResourceTags.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.ResourceTags",
            value: exports.ResourceTags.encode(message).finish()
        };
    }
};
function createBaseResourceTags_Tag() {
    return {
        key: "",
        value: ""
    };
}
exports.ResourceTags_Tag = {
    typeUrl: "/greenfield.storage.Tag",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResourceTags_Tag();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: (0, helpers_1.isSet)(object.key) ? String(object.key) : "",
            value: (0, helpers_1.isSet)(object.value) ? String(object.value) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseResourceTags_Tag();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            key: object?.key,
            value: object?.value
        };
    },
    toSDK(message) {
        const obj = {};
        obj.key = message.key;
        obj.value = message.value;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseResourceTags_Tag();
        if (object.key !== undefined && object.key !== null) {
            message.key = object.key;
        }
        if (object.value !== undefined && object.value !== null) {
            message.value = object.value;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.key = message.key;
        obj.value = message.value;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.ResourceTags_Tag.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.ResourceTags_Tag.decode(message.value);
    },
    toProto(message) {
        return exports.ResourceTags_Tag.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.storage.Tag",
            value: exports.ResourceTags_Tag.encode(message).finish()
        };
    }
};
//# sourceMappingURL=types.js.map