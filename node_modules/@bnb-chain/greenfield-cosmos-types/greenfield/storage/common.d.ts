/// <reference types="long" />
import { Long } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.storage";
/**
 * SourceType represents the source of resource creation, which can
 * from Greenfield native or from a cross-chain transfer from BSC
 */
export declare enum SourceType {
    SOURCE_TYPE_ORIGIN = 0,
    SOURCE_TYPE_MIRROR_PENDING = 1,
    SOURCE_TYPE_BSC_CROSS_CHAIN = 2,
    SOURCE_TYPE_OP_CROSS_CHAIN = 3,
    UNRECOGNIZED = -1
}
export declare const SourceTypeSDKType: typeof SourceType;
export declare const SourceTypeAmino: typeof SourceType;
export declare function sourceTypeFromJSON(object: any): SourceType;
export declare function sourceTypeToJSON(object: SourceType): string;
/**
 * BucketStatus represents the status of a bucket. After a user successfully
 * sends a CreateBucket transaction onto the chain, the status is set to 'Created'.
 * When a Discontinue Object transaction is received on chain, the status is set to 'Discontinued'.
 */
export declare enum BucketStatus {
    BUCKET_STATUS_CREATED = 0,
    BUCKET_STATUS_DISCONTINUED = 1,
    BUCKET_STATUS_MIGRATING = 2,
    UNRECOGNIZED = -1
}
export declare const BucketStatusSDKType: typeof BucketStatus;
export declare const BucketStatusAmino: typeof BucketStatus;
export declare function bucketStatusFromJSON(object: any): BucketStatus;
export declare function bucketStatusToJSON(object: BucketStatus): string;
/**
 * RedundancyType represents the redundancy algorithm type for object data,
 * which can be either multi-replica or erasure coding.
 */
export declare enum RedundancyType {
    REDUNDANCY_EC_TYPE = 0,
    REDUNDANCY_REPLICA_TYPE = 1,
    UNRECOGNIZED = -1
}
export declare const RedundancyTypeSDKType: typeof RedundancyType;
export declare const RedundancyTypeAmino: typeof RedundancyType;
export declare function redundancyTypeFromJSON(object: any): RedundancyType;
export declare function redundancyTypeToJSON(object: RedundancyType): string;
/**
 * ObjectStatus represents the creation status of an object. After a user successfully
 * sends a CreateObject transaction onto the chain, the status is set to 'Created'.
 * After the Primary Service Provider successfully sends a Seal Object transaction onto
 * the chain, the status is set to 'Sealed'. When a Discontinue Object transaction is
 * received on chain, the status is set to 'Discontinued'.
 */
export declare enum ObjectStatus {
    OBJECT_STATUS_CREATED = 0,
    OBJECT_STATUS_SEALED = 1,
    OBJECT_STATUS_DISCONTINUED = 2,
    UNRECOGNIZED = -1
}
export declare const ObjectStatusSDKType: typeof ObjectStatus;
export declare const ObjectStatusAmino: typeof ObjectStatus;
export declare function objectStatusFromJSON(object: any): ObjectStatus;
export declare function objectStatusToJSON(object: ObjectStatus): string;
/** VisibilityType is the resources public status. */
export declare enum VisibilityType {
    VISIBILITY_TYPE_UNSPECIFIED = 0,
    VISIBILITY_TYPE_PUBLIC_READ = 1,
    VISIBILITY_TYPE_PRIVATE = 2,
    /** VISIBILITY_TYPE_INHERIT - If the bucket Visibility is inherit, it's finally set to private. If the object Visibility is inherit, it's the same as bucket. */
    VISIBILITY_TYPE_INHERIT = 3,
    UNRECOGNIZED = -1
}
export declare const VisibilityTypeSDKType: typeof VisibilityType;
export declare const VisibilityTypeAmino: typeof VisibilityType;
export declare function visibilityTypeFromJSON(object: any): VisibilityType;
export declare function visibilityTypeToJSON(object: VisibilityType): string;
/**
 * SecondarySpSealObjectSignDoc used to generate seal signature of secondary SP
 * If the secondary SP only signs the checksum to declare the object pieces are saved,
 * it might be reused by the primary SP to fake it's declaration.
 * Then the primary SP can challenge and slash the secondary SP.
 * So the id of the object is needed to prevent this.
 */
export interface SecondarySpSealObjectSignDoc {
    chainId: string;
    globalVirtualGroupId: number;
    objectId: string;
    /** checksum is the sha256 hash of slice of integrity hash from secondary sps */
    checksum: Uint8Array;
}
export interface SecondarySpSealObjectSignDocProtoMsg {
    typeUrl: "/greenfield.storage.SecondarySpSealObjectSignDoc";
    value: Uint8Array;
}
/**
 * SecondarySpSealObjectSignDoc used to generate seal signature of secondary SP
 * If the secondary SP only signs the checksum to declare the object pieces are saved,
 * it might be reused by the primary SP to fake it's declaration.
 * Then the primary SP can challenge and slash the secondary SP.
 * So the id of the object is needed to prevent this.
 */
export interface SecondarySpSealObjectSignDocAmino {
    chain_id?: string;
    global_virtual_group_id?: number;
    object_id?: string;
    /** checksum is the sha256 hash of slice of integrity hash from secondary sps */
    checksum?: string;
}
export interface SecondarySpSealObjectSignDocAminoMsg {
    type: "/greenfield.storage.SecondarySpSealObjectSignDoc";
    value: SecondarySpSealObjectSignDocAmino;
}
/**
 * SecondarySpSealObjectSignDoc used to generate seal signature of secondary SP
 * If the secondary SP only signs the checksum to declare the object pieces are saved,
 * it might be reused by the primary SP to fake it's declaration.
 * Then the primary SP can challenge and slash the secondary SP.
 * So the id of the object is needed to prevent this.
 */
export interface SecondarySpSealObjectSignDocSDKType {
    chain_id: string;
    global_virtual_group_id: number;
    object_id: string;
    checksum: Uint8Array;
}
export interface GVGMapping {
    srcGlobalVirtualGroupId: number;
    dstGlobalVirtualGroupId: number;
    secondarySpBlsSignature: Uint8Array;
}
export interface GVGMappingProtoMsg {
    typeUrl: "/greenfield.storage.GVGMapping";
    value: Uint8Array;
}
export interface GVGMappingAmino {
    src_global_virtual_group_id?: number;
    dst_global_virtual_group_id?: number;
    secondary_sp_bls_signature?: string;
}
export interface GVGMappingAminoMsg {
    type: "/greenfield.storage.GVGMapping";
    value: GVGMappingAmino;
}
export interface GVGMappingSDKType {
    src_global_virtual_group_id: number;
    dst_global_virtual_group_id: number;
    secondary_sp_bls_signature: Uint8Array;
}
export interface SecondarySpMigrationBucketSignDoc {
    chainId: string;
    dstPrimarySpId: number;
    srcGlobalVirtualGroupId: number;
    dstGlobalVirtualGroupId: number;
    bucketId: string;
}
export interface SecondarySpMigrationBucketSignDocProtoMsg {
    typeUrl: "/greenfield.storage.SecondarySpMigrationBucketSignDoc";
    value: Uint8Array;
}
export interface SecondarySpMigrationBucketSignDocAmino {
    chain_id?: string;
    dst_primary_sp_id?: number;
    src_global_virtual_group_id?: number;
    dst_global_virtual_group_id?: number;
    bucket_id?: string;
}
export interface SecondarySpMigrationBucketSignDocAminoMsg {
    type: "/greenfield.storage.SecondarySpMigrationBucketSignDoc";
    value: SecondarySpMigrationBucketSignDocAmino;
}
export interface SecondarySpMigrationBucketSignDocSDKType {
    chain_id: string;
    dst_primary_sp_id: number;
    src_global_virtual_group_id: number;
    dst_global_virtual_group_id: number;
    bucket_id: string;
}
/**
 * Local virtual group(LVG) uniquely associated with a global virtual group.
 * Each bucket maintains a mapping from local virtual group to global virtual group
 * Each local virtual group is associated with a unique virtual payment account,
 * where all object fees are streamed to.
 */
export interface LocalVirtualGroup {
    /** id is the identifier of the local virtual group. */
    id: number;
    /** global_virtual_group_id is the identifier of the global virtual group. */
    globalVirtualGroupId: number;
    /** stored_size is the size of the stored data in the local virtual group. */
    storedSize: Long;
    /**
     * total_charge_size is the total charged size of the objects in the LVG.
     * Notice that the minimum unit of charge is 128K
     */
    totalChargeSize: Long;
}
export interface LocalVirtualGroupProtoMsg {
    typeUrl: "/greenfield.storage.LocalVirtualGroup";
    value: Uint8Array;
}
/**
 * Local virtual group(LVG) uniquely associated with a global virtual group.
 * Each bucket maintains a mapping from local virtual group to global virtual group
 * Each local virtual group is associated with a unique virtual payment account,
 * where all object fees are streamed to.
 */
export interface LocalVirtualGroupAmino {
    /** id is the identifier of the local virtual group. */
    id?: number;
    /** global_virtual_group_id is the identifier of the global virtual group. */
    global_virtual_group_id?: number;
    /** stored_size is the size of the stored data in the local virtual group. */
    stored_size?: string;
    /**
     * total_charge_size is the total charged size of the objects in the LVG.
     * Notice that the minimum unit of charge is 128K
     */
    total_charge_size?: string;
}
export interface LocalVirtualGroupAminoMsg {
    type: "/greenfield.storage.LocalVirtualGroup";
    value: LocalVirtualGroupAmino;
}
/**
 * Local virtual group(LVG) uniquely associated with a global virtual group.
 * Each bucket maintains a mapping from local virtual group to global virtual group
 * Each local virtual group is associated with a unique virtual payment account,
 * where all object fees are streamed to.
 */
export interface LocalVirtualGroupSDKType {
    id: number;
    global_virtual_group_id: number;
    stored_size: Long;
    total_charge_size: Long;
}
export declare const SecondarySpSealObjectSignDoc: {
    typeUrl: string;
    encode(message: SecondarySpSealObjectSignDoc, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SecondarySpSealObjectSignDoc;
    fromJSON(object: any): SecondarySpSealObjectSignDoc;
    toJSON(message: SecondarySpSealObjectSignDoc): unknown;
    fromPartial<I extends {
        chainId?: string;
        globalVirtualGroupId?: number;
        objectId?: string;
        checksum?: Uint8Array;
    } & {
        chainId?: string;
        globalVirtualGroupId?: number;
        objectId?: string;
        checksum?: Uint8Array;
    } & Record<Exclude<keyof I, keyof SecondarySpSealObjectSignDoc>, never>>(object: I): SecondarySpSealObjectSignDoc;
    fromSDK(object: SecondarySpSealObjectSignDocSDKType): SecondarySpSealObjectSignDoc;
    toSDK(message: SecondarySpSealObjectSignDoc): SecondarySpSealObjectSignDocSDKType;
    fromAmino(object: SecondarySpSealObjectSignDocAmino): SecondarySpSealObjectSignDoc;
    toAmino(message: SecondarySpSealObjectSignDoc): SecondarySpSealObjectSignDocAmino;
    fromAminoMsg(object: SecondarySpSealObjectSignDocAminoMsg): SecondarySpSealObjectSignDoc;
    fromProtoMsg(message: SecondarySpSealObjectSignDocProtoMsg): SecondarySpSealObjectSignDoc;
    toProto(message: SecondarySpSealObjectSignDoc): Uint8Array;
    toProtoMsg(message: SecondarySpSealObjectSignDoc): SecondarySpSealObjectSignDocProtoMsg;
};
export declare const GVGMapping: {
    typeUrl: string;
    encode(message: GVGMapping, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GVGMapping;
    fromJSON(object: any): GVGMapping;
    toJSON(message: GVGMapping): unknown;
    fromPartial<I extends {
        srcGlobalVirtualGroupId?: number;
        dstGlobalVirtualGroupId?: number;
        secondarySpBlsSignature?: Uint8Array;
    } & {
        srcGlobalVirtualGroupId?: number;
        dstGlobalVirtualGroupId?: number;
        secondarySpBlsSignature?: Uint8Array;
    } & Record<Exclude<keyof I, keyof GVGMapping>, never>>(object: I): GVGMapping;
    fromSDK(object: GVGMappingSDKType): GVGMapping;
    toSDK(message: GVGMapping): GVGMappingSDKType;
    fromAmino(object: GVGMappingAmino): GVGMapping;
    toAmino(message: GVGMapping): GVGMappingAmino;
    fromAminoMsg(object: GVGMappingAminoMsg): GVGMapping;
    fromProtoMsg(message: GVGMappingProtoMsg): GVGMapping;
    toProto(message: GVGMapping): Uint8Array;
    toProtoMsg(message: GVGMapping): GVGMappingProtoMsg;
};
export declare const SecondarySpMigrationBucketSignDoc: {
    typeUrl: string;
    encode(message: SecondarySpMigrationBucketSignDoc, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SecondarySpMigrationBucketSignDoc;
    fromJSON(object: any): SecondarySpMigrationBucketSignDoc;
    toJSON(message: SecondarySpMigrationBucketSignDoc): unknown;
    fromPartial<I extends {
        chainId?: string;
        dstPrimarySpId?: number;
        srcGlobalVirtualGroupId?: number;
        dstGlobalVirtualGroupId?: number;
        bucketId?: string;
    } & {
        chainId?: string;
        dstPrimarySpId?: number;
        srcGlobalVirtualGroupId?: number;
        dstGlobalVirtualGroupId?: number;
        bucketId?: string;
    } & Record<Exclude<keyof I, keyof SecondarySpMigrationBucketSignDoc>, never>>(object: I): SecondarySpMigrationBucketSignDoc;
    fromSDK(object: SecondarySpMigrationBucketSignDocSDKType): SecondarySpMigrationBucketSignDoc;
    toSDK(message: SecondarySpMigrationBucketSignDoc): SecondarySpMigrationBucketSignDocSDKType;
    fromAmino(object: SecondarySpMigrationBucketSignDocAmino): SecondarySpMigrationBucketSignDoc;
    toAmino(message: SecondarySpMigrationBucketSignDoc): SecondarySpMigrationBucketSignDocAmino;
    fromAminoMsg(object: SecondarySpMigrationBucketSignDocAminoMsg): SecondarySpMigrationBucketSignDoc;
    fromProtoMsg(message: SecondarySpMigrationBucketSignDocProtoMsg): SecondarySpMigrationBucketSignDoc;
    toProto(message: SecondarySpMigrationBucketSignDoc): Uint8Array;
    toProtoMsg(message: SecondarySpMigrationBucketSignDoc): SecondarySpMigrationBucketSignDocProtoMsg;
};
export declare const LocalVirtualGroup: {
    typeUrl: string;
    encode(message: LocalVirtualGroup, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LocalVirtualGroup;
    fromJSON(object: any): LocalVirtualGroup;
    toJSON(message: LocalVirtualGroup): unknown;
    fromPartial<I extends {
        id?: number;
        globalVirtualGroupId?: number;
        storedSize?: string | number | Long.Long;
        totalChargeSize?: string | number | Long.Long;
    } & {
        id?: number;
        globalVirtualGroupId?: number;
        storedSize?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["storedSize"], keyof Long.Long>, never>);
        totalChargeSize?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["totalChargeSize"], keyof Long.Long>, never>);
    } & Record<Exclude<keyof I, keyof LocalVirtualGroup>, never>>(object: I): LocalVirtualGroup;
    fromSDK(object: LocalVirtualGroupSDKType): LocalVirtualGroup;
    toSDK(message: LocalVirtualGroup): LocalVirtualGroupSDKType;
    fromAmino(object: LocalVirtualGroupAmino): LocalVirtualGroup;
    toAmino(message: LocalVirtualGroup): LocalVirtualGroupAmino;
    fromAminoMsg(object: LocalVirtualGroupAminoMsg): LocalVirtualGroup;
    fromProtoMsg(message: LocalVirtualGroupProtoMsg): LocalVirtualGroup;
    toProto(message: LocalVirtualGroup): Uint8Array;
    toProtoMsg(message: LocalVirtualGroup): LocalVirtualGroupProtoMsg;
};
