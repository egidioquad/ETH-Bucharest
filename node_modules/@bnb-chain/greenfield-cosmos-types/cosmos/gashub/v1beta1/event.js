"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventUpdateMsgGasParams = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
const helpers_1 = require("../../../helpers");
exports.protobufPackage = "cosmos.gashub.v1beta1";
function createBaseEventUpdateMsgGasParams() {
    return {
        msgTypeUrl: "",
        fromValue: "",
        toValue: ""
    };
}
exports.EventUpdateMsgGasParams = {
    typeUrl: "/cosmos.gashub.v1beta1.EventUpdateMsgGasParams",
    encode(message, writer = _m0.Writer.create()) {
        if (message.msgTypeUrl !== "") {
            writer.uint32(10).string(message.msgTypeUrl);
        }
        if (message.fromValue !== "") {
            writer.uint32(18).string(message.fromValue);
        }
        if (message.toValue !== "") {
            writer.uint32(26).string(message.toValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventUpdateMsgGasParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.msgTypeUrl = reader.string();
                    break;
                case 2:
                    message.fromValue = reader.string();
                    break;
                case 3:
                    message.toValue = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            msgTypeUrl: (0, helpers_1.isSet)(object.msgTypeUrl) ? String(object.msgTypeUrl) : "",
            fromValue: (0, helpers_1.isSet)(object.fromValue) ? String(object.fromValue) : "",
            toValue: (0, helpers_1.isSet)(object.toValue) ? String(object.toValue) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.msgTypeUrl !== undefined && (obj.msgTypeUrl = message.msgTypeUrl);
        message.fromValue !== undefined && (obj.fromValue = message.fromValue);
        message.toValue !== undefined && (obj.toValue = message.toValue);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventUpdateMsgGasParams();
        message.msgTypeUrl = object.msgTypeUrl ?? "";
        message.fromValue = object.fromValue ?? "";
        message.toValue = object.toValue ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            msgTypeUrl: object?.msg_type_url,
            fromValue: object?.from_value,
            toValue: object?.to_value
        };
    },
    toSDK(message) {
        const obj = {};
        obj.msg_type_url = message.msgTypeUrl;
        obj.from_value = message.fromValue;
        obj.to_value = message.toValue;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseEventUpdateMsgGasParams();
        if (object.msg_type_url !== undefined && object.msg_type_url !== null) {
            message.msgTypeUrl = object.msg_type_url;
        }
        if (object.from_value !== undefined && object.from_value !== null) {
            message.fromValue = object.from_value;
        }
        if (object.to_value !== undefined && object.to_value !== null) {
            message.toValue = object.to_value;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.msg_type_url = message.msgTypeUrl;
        obj.from_value = message.fromValue;
        obj.to_value = message.toValue;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.EventUpdateMsgGasParams.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/EventUpdateMsgGasParams",
            value: exports.EventUpdateMsgGasParams.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.EventUpdateMsgGasParams.decode(message.value);
    },
    toProto(message) {
        return exports.EventUpdateMsgGasParams.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.gashub.v1beta1.EventUpdateMsgGasParams",
            value: exports.EventUpdateMsgGasParams.encode(message).finish()
        };
    }
};
//# sourceMappingURL=event.js.map