"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgSetMsgGasParamsResponse = exports.MsgSetMsgGasParams = exports.MsgUpdateParamsResponse = exports.MsgUpdateParams = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const gashub_1 = require("./gashub");
const _m0 = __importStar(require("protobufjs/minimal"));
const helpers_1 = require("../../../helpers");
exports.protobufPackage = "cosmos.gashub.v1beta1";
function createBaseMsgUpdateParams() {
    return {
        authority: "",
        params: gashub_1.Params.fromPartial({})
    };
}
exports.MsgUpdateParams = {
    typeUrl: "/cosmos.gashub.v1beta1.MsgUpdateParams",
    encode(message, writer = _m0.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.params !== undefined) {
            gashub_1.Params.encode(message.params, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authority = reader.string();
                    break;
                case 2:
                    message.params = gashub_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: (0, helpers_1.isSet)(object.authority) ? String(object.authority) : "",
            params: (0, helpers_1.isSet)(object.params) ? gashub_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.authority !== undefined && (obj.authority = message.authority);
        message.params !== undefined && (obj.params = message.params ? gashub_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateParams();
        message.authority = object.authority ?? "";
        message.params = object.params !== undefined && object.params !== null ? gashub_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            authority: object?.authority,
            params: object.params ? gashub_1.Params.fromSDK(object.params) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.authority = message.authority;
        message.params !== undefined && (obj.params = message.params ? gashub_1.Params.toSDK(message.params) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseMsgUpdateParams();
        if (object.authority !== undefined && object.authority !== null) {
            message.authority = object.authority;
        }
        if (object.params !== undefined && object.params !== null) {
            message.params = gashub_1.Params.fromAmino(object.params);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.authority = message.authority;
        obj.params = message.params ? gashub_1.Params.toAmino(message.params) : gashub_1.Params.fromPartial({});
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgUpdateParams.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/x/gashub/MsgUpdateParams",
            value: exports.MsgUpdateParams.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgUpdateParams.decode(message.value);
    },
    toProto(message) {
        return exports.MsgUpdateParams.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.gashub.v1beta1.MsgUpdateParams",
            value: exports.MsgUpdateParams.encode(message).finish()
        };
    }
};
function createBaseMsgUpdateParamsResponse() {
    return {};
}
exports.MsgUpdateParamsResponse = {
    typeUrl: "/cosmos.gashub.v1beta1.MsgUpdateParamsResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateParamsResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    },
    fromAmino(_) {
        const message = createBaseMsgUpdateParamsResponse();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgUpdateParamsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/MsgUpdateParamsResponse",
            value: exports.MsgUpdateParamsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgUpdateParamsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgUpdateParamsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.gashub.v1beta1.MsgUpdateParamsResponse",
            value: exports.MsgUpdateParamsResponse.encode(message).finish()
        };
    }
};
function createBaseMsgSetMsgGasParams() {
    return {
        authority: "",
        updateSet: [],
        deleteSet: []
    };
}
exports.MsgSetMsgGasParams = {
    typeUrl: "/cosmos.gashub.v1beta1.MsgSetMsgGasParams",
    encode(message, writer = _m0.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        for (const v of message.updateSet) {
            gashub_1.MsgGasParams.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.deleteSet) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetMsgGasParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authority = reader.string();
                    break;
                case 2:
                    message.updateSet.push(gashub_1.MsgGasParams.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.deleteSet.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: (0, helpers_1.isSet)(object.authority) ? String(object.authority) : "",
            updateSet: Array.isArray(object?.updateSet) ? object.updateSet.map((e) => gashub_1.MsgGasParams.fromJSON(e)) : [],
            deleteSet: Array.isArray(object?.deleteSet) ? object.deleteSet.map((e) => String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.authority !== undefined && (obj.authority = message.authority);
        if (message.updateSet) {
            obj.updateSet = message.updateSet.map(e => e ? gashub_1.MsgGasParams.toJSON(e) : undefined);
        }
        else {
            obj.updateSet = [];
        }
        if (message.deleteSet) {
            obj.deleteSet = message.deleteSet.map(e => e);
        }
        else {
            obj.deleteSet = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgSetMsgGasParams();
        message.authority = object.authority ?? "";
        message.updateSet = object.updateSet?.map(e => gashub_1.MsgGasParams.fromPartial(e)) || [];
        message.deleteSet = object.deleteSet?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            authority: object?.authority,
            updateSet: Array.isArray(object?.update_set) ? object.update_set.map((e) => gashub_1.MsgGasParams.fromSDK(e)) : [],
            deleteSet: Array.isArray(object?.delete_set) ? object.delete_set.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.authority = message.authority;
        if (message.updateSet) {
            obj.update_set = message.updateSet.map(e => e ? gashub_1.MsgGasParams.toSDK(e) : undefined);
        }
        else {
            obj.update_set = [];
        }
        if (message.deleteSet) {
            obj.delete_set = message.deleteSet.map(e => e);
        }
        else {
            obj.delete_set = [];
        }
        return obj;
    },
    fromAmino(object) {
        const message = createBaseMsgSetMsgGasParams();
        if (object.authority !== undefined && object.authority !== null) {
            message.authority = object.authority;
        }
        message.updateSet = object.update_set?.map(e => gashub_1.MsgGasParams.fromAmino(e)) || [];
        message.deleteSet = object.delete_set?.map(e => e) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.authority = message.authority;
        if (message.updateSet) {
            obj.update_set = message.updateSet.map(e => e ? gashub_1.MsgGasParams.toAmino(e) : undefined);
        }
        else {
            obj.update_set = [];
        }
        if (message.deleteSet) {
            obj.delete_set = message.deleteSet.map(e => e);
        }
        else {
            obj.delete_set = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSetMsgGasParams.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/MsgSetMsgGasParams",
            value: exports.MsgSetMsgGasParams.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgSetMsgGasParams.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSetMsgGasParams.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.gashub.v1beta1.MsgSetMsgGasParams",
            value: exports.MsgSetMsgGasParams.encode(message).finish()
        };
    }
};
function createBaseMsgSetMsgGasParamsResponse() {
    return {};
}
exports.MsgSetMsgGasParamsResponse = {
    typeUrl: "/cosmos.gashub.v1beta1.MsgSetMsgGasParamsResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetMsgGasParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgSetMsgGasParamsResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    },
    fromAmino(_) {
        const message = createBaseMsgSetMsgGasParamsResponse();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSetMsgGasParamsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/MsgSetMsgGasParamsResponse",
            value: exports.MsgSetMsgGasParamsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgSetMsgGasParamsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSetMsgGasParamsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.gashub.v1beta1.MsgSetMsgGasParamsResponse",
            value: exports.MsgSetMsgGasParamsResponse.encode(message).finish()
        };
    }
};
class MsgClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.UpdateParams = this.UpdateParams.bind(this);
        this.SetMsgGasParams = this.SetMsgGasParams.bind(this);
    }
    UpdateParams(request) {
        const data = exports.MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("cosmos.gashub.v1beta1.Msg", "UpdateParams", data);
        return promise.then(data => exports.MsgUpdateParamsResponse.decode(new _m0.Reader(data)));
    }
    SetMsgGasParams(request) {
        const data = exports.MsgSetMsgGasParams.encode(request).finish();
        const promise = this.rpc.request("cosmos.gashub.v1beta1.Msg", "SetMsgGasParams", data);
        return promise.then(data => exports.MsgSetMsgGasParamsResponse.decode(new _m0.Reader(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
//# sourceMappingURL=tx.js.map