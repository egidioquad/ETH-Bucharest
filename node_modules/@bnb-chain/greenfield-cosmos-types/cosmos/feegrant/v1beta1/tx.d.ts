import { Any, AnyProtoMsg, AnyAmino, AnySDKType } from "../../../google/protobuf/any";
import { BasicAllowance, BasicAllowanceProtoMsg, BasicAllowanceSDKType, PeriodicAllowance, PeriodicAllowanceProtoMsg, PeriodicAllowanceSDKType, AllowedMsgAllowance, AllowedMsgAllowanceProtoMsg, AllowedMsgAllowanceSDKType } from "./feegrant";
import * as _m0 from "protobufjs/minimal";
import { Rpc } from "../../../helpers";
export declare const protobufPackage = "cosmos.feegrant.v1beta1";
/**
 * MsgGrantAllowance adds permission for Grantee to spend up to Allowance
 * of fees from the account of Granter.
 */
export interface MsgGrantAllowance {
    /** granter is the address of the user granting an allowance of their funds. */
    granter: string;
    /** grantee is the address of the user being granted an allowance of another user's funds. */
    grantee: string;
    /** allowance can be any of basic, periodic, allowed fee allowance. */
    allowance?: BasicAllowance | PeriodicAllowance | AllowedMsgAllowance | Any | undefined;
}
export interface MsgGrantAllowanceProtoMsg {
    typeUrl: "/cosmos.feegrant.v1beta1.MsgGrantAllowance";
    value: Uint8Array;
}
export type MsgGrantAllowanceEncoded = Omit<MsgGrantAllowance, "allowance"> & {
    /** allowance can be any of basic, periodic, allowed fee allowance. */ allowance?: BasicAllowanceProtoMsg | PeriodicAllowanceProtoMsg | AllowedMsgAllowanceProtoMsg | AnyProtoMsg | undefined;
};
/**
 * MsgGrantAllowance adds permission for Grantee to spend up to Allowance
 * of fees from the account of Granter.
 */
export interface MsgGrantAllowanceAmino {
    /** granter is the address of the user granting an allowance of their funds. */
    granter?: string;
    /** grantee is the address of the user being granted an allowance of another user's funds. */
    grantee?: string;
    /** allowance can be any of basic, periodic, allowed fee allowance. */
    allowance?: AnyAmino;
}
export interface MsgGrantAllowanceAminoMsg {
    type: "cosmos-sdk/MsgGrantAllowance";
    value: MsgGrantAllowanceAmino;
}
/**
 * MsgGrantAllowance adds permission for Grantee to spend up to Allowance
 * of fees from the account of Granter.
 */
export interface MsgGrantAllowanceSDKType {
    granter: string;
    grantee: string;
    allowance?: BasicAllowanceSDKType | PeriodicAllowanceSDKType | AllowedMsgAllowanceSDKType | AnySDKType | undefined;
}
/** MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse response type. */
export interface MsgGrantAllowanceResponse {
}
export interface MsgGrantAllowanceResponseProtoMsg {
    typeUrl: "/cosmos.feegrant.v1beta1.MsgGrantAllowanceResponse";
    value: Uint8Array;
}
/** MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse response type. */
export interface MsgGrantAllowanceResponseAmino {
}
export interface MsgGrantAllowanceResponseAminoMsg {
    type: "cosmos-sdk/MsgGrantAllowanceResponse";
    value: MsgGrantAllowanceResponseAmino;
}
/** MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse response type. */
export interface MsgGrantAllowanceResponseSDKType {
}
/** MsgRevokeAllowance removes any existing Allowance from Granter to Grantee. */
export interface MsgRevokeAllowance {
    /** granter is the address of the user granting an allowance of their funds. */
    granter: string;
    /** grantee is the address of the user being granted an allowance of another user's funds. */
    grantee: string;
}
export interface MsgRevokeAllowanceProtoMsg {
    typeUrl: "/cosmos.feegrant.v1beta1.MsgRevokeAllowance";
    value: Uint8Array;
}
/** MsgRevokeAllowance removes any existing Allowance from Granter to Grantee. */
export interface MsgRevokeAllowanceAmino {
    /** granter is the address of the user granting an allowance of their funds. */
    granter?: string;
    /** grantee is the address of the user being granted an allowance of another user's funds. */
    grantee?: string;
}
export interface MsgRevokeAllowanceAminoMsg {
    type: "cosmos-sdk/MsgRevokeAllowance";
    value: MsgRevokeAllowanceAmino;
}
/** MsgRevokeAllowance removes any existing Allowance from Granter to Grantee. */
export interface MsgRevokeAllowanceSDKType {
    granter: string;
    grantee: string;
}
/** MsgRevokeAllowanceResponse defines the Msg/RevokeAllowanceResponse response type. */
export interface MsgRevokeAllowanceResponse {
}
export interface MsgRevokeAllowanceResponseProtoMsg {
    typeUrl: "/cosmos.feegrant.v1beta1.MsgRevokeAllowanceResponse";
    value: Uint8Array;
}
/** MsgRevokeAllowanceResponse defines the Msg/RevokeAllowanceResponse response type. */
export interface MsgRevokeAllowanceResponseAmino {
}
export interface MsgRevokeAllowanceResponseAminoMsg {
    type: "cosmos-sdk/MsgRevokeAllowanceResponse";
    value: MsgRevokeAllowanceResponseAmino;
}
/** MsgRevokeAllowanceResponse defines the Msg/RevokeAllowanceResponse response type. */
export interface MsgRevokeAllowanceResponseSDKType {
}
export declare const MsgGrantAllowance: {
    typeUrl: string;
    encode(message: MsgGrantAllowance, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgGrantAllowance;
    fromJSON(object: any): MsgGrantAllowance;
    toJSON(message: MsgGrantAllowance): unknown;
    fromPartial<I extends {
        granter?: string;
        grantee?: string;
        allowance?: {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        } | {
            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
            spendLimit?: {
                denom?: string;
                amount?: string;
            }[];
            expiration?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            };
        } | {
            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
            basic?: {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            };
            period?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            };
            periodSpendLimit?: {
                denom?: string;
                amount?: string;
            }[];
            periodCanSpend?: {
                denom?: string;
                amount?: string;
            }[];
            periodReset?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            };
        } | {
            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
            allowance?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                };
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | any;
            allowedMessages?: string[];
        };
    } & {
        granter?: string;
        grantee?: string;
        allowance?: ({
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        } & {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        } & Record<Exclude<keyof I["allowance"], keyof Any>, never>) | ({
            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
            spendLimit?: {
                denom?: string;
                amount?: string;
            }[];
            expiration?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            };
        } & {
            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
            spendLimit?: {
                denom?: string;
                amount?: string;
            }[] & ({
                denom?: string;
                amount?: string;
            } & {
                denom?: string;
                amount?: string;
            } & Record<Exclude<keyof I["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["spendLimit"], keyof {
                denom?: string;
                amount?: string;
            }[]>, never>;
            expiration?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            } & {
                seconds?: string | number | (import("long").Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | import("long").Long) => import("long").Long;
                    and: (other: string | number | import("long").Long) => import("long").Long;
                    compare: (other: string | number | import("long").Long) => number;
                    comp: (other: string | number | import("long").Long) => number;
                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                    equals: (other: string | number | import("long").Long) => boolean;
                    eq: (other: string | number | import("long").Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | import("long").Long) => boolean;
                    gt: (other: string | number | import("long").Long) => boolean;
                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                    gte: (other: string | number | import("long").Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | import("long").Long) => boolean;
                    lt: (other: string | number | import("long").Long) => boolean;
                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                    lte: (other: string | number | import("long").Long) => boolean;
                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                    mod: (other: string | number | import("long").Long) => import("long").Long;
                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                    negate: () => import("long").Long;
                    neg: () => import("long").Long;
                    not: () => import("long").Long;
                    notEquals: (other: string | number | import("long").Long) => boolean;
                    neq: (other: string | number | import("long").Long) => boolean;
                    or: (other: string | number | import("long").Long) => import("long").Long;
                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                    shl: (numBits: number | import("long").Long) => import("long").Long;
                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                    shr: (numBits: number | import("long").Long) => import("long").Long;
                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                    shru: (numBits: number | import("long").Long) => import("long").Long;
                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => import("long").Long;
                    toString: (radix?: number) => string;
                    toUnsigned: () => import("long").Long;
                    xor: (other: string | number | import("long").Long) => import("long").Long;
                } & Record<Exclude<keyof I["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                nanos?: number;
            } & Record<Exclude<keyof I["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
        } & Record<Exclude<keyof I["allowance"], keyof BasicAllowance>, never>) | ({
            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
            basic?: {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            };
            period?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            };
            periodSpendLimit?: {
                denom?: string;
                amount?: string;
            }[];
            periodCanSpend?: {
                denom?: string;
                amount?: string;
            }[];
            periodReset?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            };
        } & {
            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
            basic?: {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } & {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[] & ({
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["basic"]["spendLimit"], keyof {
                    denom?: string;
                    amount?: string;
                }[]>, never>;
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                } & {
                    seconds?: string | number | (import("long").Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | import("long").Long) => import("long").Long;
                        and: (other: string | number | import("long").Long) => import("long").Long;
                        compare: (other: string | number | import("long").Long) => number;
                        comp: (other: string | number | import("long").Long) => number;
                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                        equals: (other: string | number | import("long").Long) => boolean;
                        eq: (other: string | number | import("long").Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | import("long").Long) => boolean;
                        gt: (other: string | number | import("long").Long) => boolean;
                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        gte: (other: string | number | import("long").Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | import("long").Long) => boolean;
                        lt: (other: string | number | import("long").Long) => boolean;
                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        lte: (other: string | number | import("long").Long) => boolean;
                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                        mod: (other: string | number | import("long").Long) => import("long").Long;
                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                        negate: () => import("long").Long;
                        neg: () => import("long").Long;
                        not: () => import("long").Long;
                        notEquals: (other: string | number | import("long").Long) => boolean;
                        neq: (other: string | number | import("long").Long) => boolean;
                        or: (other: string | number | import("long").Long) => import("long").Long;
                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                        shl: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                        shr: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                        shru: (numBits: number | import("long").Long) => import("long").Long;
                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => import("long").Long;
                        toString: (radix?: number) => string;
                        toUnsigned: () => import("long").Long;
                        xor: (other: string | number | import("long").Long) => import("long").Long;
                    } & Record<Exclude<keyof I["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                    nanos?: number;
                } & Record<Exclude<keyof I["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
            } & Record<Exclude<keyof I["allowance"]["basic"], keyof BasicAllowance>, never>;
            period?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            } & {
                seconds?: string | number | (import("long").Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | import("long").Long) => import("long").Long;
                    and: (other: string | number | import("long").Long) => import("long").Long;
                    compare: (other: string | number | import("long").Long) => number;
                    comp: (other: string | number | import("long").Long) => number;
                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                    equals: (other: string | number | import("long").Long) => boolean;
                    eq: (other: string | number | import("long").Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | import("long").Long) => boolean;
                    gt: (other: string | number | import("long").Long) => boolean;
                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                    gte: (other: string | number | import("long").Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | import("long").Long) => boolean;
                    lt: (other: string | number | import("long").Long) => boolean;
                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                    lte: (other: string | number | import("long").Long) => boolean;
                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                    mod: (other: string | number | import("long").Long) => import("long").Long;
                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                    negate: () => import("long").Long;
                    neg: () => import("long").Long;
                    not: () => import("long").Long;
                    notEquals: (other: string | number | import("long").Long) => boolean;
                    neq: (other: string | number | import("long").Long) => boolean;
                    or: (other: string | number | import("long").Long) => import("long").Long;
                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                    shl: (numBits: number | import("long").Long) => import("long").Long;
                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                    shr: (numBits: number | import("long").Long) => import("long").Long;
                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                    shru: (numBits: number | import("long").Long) => import("long").Long;
                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => import("long").Long;
                    toString: (radix?: number) => string;
                    toUnsigned: () => import("long").Long;
                    xor: (other: string | number | import("long").Long) => import("long").Long;
                } & Record<Exclude<keyof I["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                nanos?: number;
            } & Record<Exclude<keyof I["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
            periodSpendLimit?: {
                denom?: string;
                amount?: string;
            }[] & ({
                denom?: string;
                amount?: string;
            } & {
                denom?: string;
                amount?: string;
            } & Record<Exclude<keyof I["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["periodSpendLimit"], keyof {
                denom?: string;
                amount?: string;
            }[]>, never>;
            periodCanSpend?: {
                denom?: string;
                amount?: string;
            }[] & ({
                denom?: string;
                amount?: string;
            } & {
                denom?: string;
                amount?: string;
            } & Record<Exclude<keyof I["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["periodCanSpend"], keyof {
                denom?: string;
                amount?: string;
            }[]>, never>;
            periodReset?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            } & {
                seconds?: string | number | (import("long").Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | import("long").Long) => import("long").Long;
                    and: (other: string | number | import("long").Long) => import("long").Long;
                    compare: (other: string | number | import("long").Long) => number;
                    comp: (other: string | number | import("long").Long) => number;
                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                    equals: (other: string | number | import("long").Long) => boolean;
                    eq: (other: string | number | import("long").Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | import("long").Long) => boolean;
                    gt: (other: string | number | import("long").Long) => boolean;
                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                    gte: (other: string | number | import("long").Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | import("long").Long) => boolean;
                    lt: (other: string | number | import("long").Long) => boolean;
                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                    lte: (other: string | number | import("long").Long) => boolean;
                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                    mod: (other: string | number | import("long").Long) => import("long").Long;
                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                    negate: () => import("long").Long;
                    neg: () => import("long").Long;
                    not: () => import("long").Long;
                    notEquals: (other: string | number | import("long").Long) => boolean;
                    neq: (other: string | number | import("long").Long) => boolean;
                    or: (other: string | number | import("long").Long) => import("long").Long;
                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                    shl: (numBits: number | import("long").Long) => import("long").Long;
                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                    shr: (numBits: number | import("long").Long) => import("long").Long;
                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                    shru: (numBits: number | import("long").Long) => import("long").Long;
                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => import("long").Long;
                    toString: (radix?: number) => string;
                    toUnsigned: () => import("long").Long;
                    xor: (other: string | number | import("long").Long) => import("long").Long;
                } & Record<Exclude<keyof I["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                nanos?: number;
            } & Record<Exclude<keyof I["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
        } & Record<Exclude<keyof I["allowance"], keyof PeriodicAllowance>, never>) | ({
            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
            allowance?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                };
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | any;
            allowedMessages?: string[];
        } & {
            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
            allowance?: ({
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } & {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } & Record<Exclude<keyof I["allowance"]["allowance"], keyof Any>, never>) | ({
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } & {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[] & ({
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["spendLimit"], keyof {
                    denom?: string;
                    amount?: string;
                }[]>, never>;
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                } & {
                    seconds?: string | number | (import("long").Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | import("long").Long) => import("long").Long;
                        and: (other: string | number | import("long").Long) => import("long").Long;
                        compare: (other: string | number | import("long").Long) => number;
                        comp: (other: string | number | import("long").Long) => number;
                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                        equals: (other: string | number | import("long").Long) => boolean;
                        eq: (other: string | number | import("long").Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | import("long").Long) => boolean;
                        gt: (other: string | number | import("long").Long) => boolean;
                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        gte: (other: string | number | import("long").Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | import("long").Long) => boolean;
                        lt: (other: string | number | import("long").Long) => boolean;
                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        lte: (other: string | number | import("long").Long) => boolean;
                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                        mod: (other: string | number | import("long").Long) => import("long").Long;
                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                        negate: () => import("long").Long;
                        neg: () => import("long").Long;
                        not: () => import("long").Long;
                        notEquals: (other: string | number | import("long").Long) => boolean;
                        neq: (other: string | number | import("long").Long) => boolean;
                        or: (other: string | number | import("long").Long) => import("long").Long;
                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                        shl: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                        shr: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                        shru: (numBits: number | import("long").Long) => import("long").Long;
                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => import("long").Long;
                        toString: (radix?: number) => string;
                        toUnsigned: () => import("long").Long;
                        xor: (other: string | number | import("long").Long) => import("long").Long;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                    nanos?: number;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
            } & Record<Exclude<keyof I["allowance"]["allowance"], keyof BasicAllowance>, never>) | ({
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                };
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } & {
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } & {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    } & {
                        seconds?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                        nanos?: number;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["basic"], keyof BasicAllowance>, never>;
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                } & {
                    seconds?: string | number | (import("long").Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | import("long").Long) => import("long").Long;
                        and: (other: string | number | import("long").Long) => import("long").Long;
                        compare: (other: string | number | import("long").Long) => number;
                        comp: (other: string | number | import("long").Long) => number;
                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                        equals: (other: string | number | import("long").Long) => boolean;
                        eq: (other: string | number | import("long").Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | import("long").Long) => boolean;
                        gt: (other: string | number | import("long").Long) => boolean;
                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        gte: (other: string | number | import("long").Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | import("long").Long) => boolean;
                        lt: (other: string | number | import("long").Long) => boolean;
                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        lte: (other: string | number | import("long").Long) => boolean;
                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                        mod: (other: string | number | import("long").Long) => import("long").Long;
                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                        negate: () => import("long").Long;
                        neg: () => import("long").Long;
                        not: () => import("long").Long;
                        notEquals: (other: string | number | import("long").Long) => boolean;
                        neq: (other: string | number | import("long").Long) => boolean;
                        or: (other: string | number | import("long").Long) => import("long").Long;
                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                        shl: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                        shr: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                        shru: (numBits: number | import("long").Long) => import("long").Long;
                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => import("long").Long;
                        toString: (radix?: number) => string;
                        toUnsigned: () => import("long").Long;
                        xor: (other: string | number | import("long").Long) => import("long").Long;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                    nanos?: number;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[] & ({
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["periodSpendLimit"], keyof {
                    denom?: string;
                    amount?: string;
                }[]>, never>;
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[] & ({
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["periodCanSpend"], keyof {
                    denom?: string;
                    amount?: string;
                }[]>, never>;
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                } & {
                    seconds?: string | number | (import("long").Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | import("long").Long) => import("long").Long;
                        and: (other: string | number | import("long").Long) => import("long").Long;
                        compare: (other: string | number | import("long").Long) => number;
                        comp: (other: string | number | import("long").Long) => number;
                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                        equals: (other: string | number | import("long").Long) => boolean;
                        eq: (other: string | number | import("long").Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | import("long").Long) => boolean;
                        gt: (other: string | number | import("long").Long) => boolean;
                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        gte: (other: string | number | import("long").Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | import("long").Long) => boolean;
                        lt: (other: string | number | import("long").Long) => boolean;
                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        lte: (other: string | number | import("long").Long) => boolean;
                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                        mod: (other: string | number | import("long").Long) => import("long").Long;
                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                        negate: () => import("long").Long;
                        neg: () => import("long").Long;
                        not: () => import("long").Long;
                        notEquals: (other: string | number | import("long").Long) => boolean;
                        neq: (other: string | number | import("long").Long) => boolean;
                        or: (other: string | number | import("long").Long) => import("long").Long;
                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                        shl: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                        shr: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                        shru: (numBits: number | import("long").Long) => import("long").Long;
                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => import("long").Long;
                        toString: (radix?: number) => string;
                        toUnsigned: () => import("long").Long;
                        xor: (other: string | number | import("long").Long) => import("long").Long;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                    nanos?: number;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
            } & Record<Exclude<keyof I["allowance"]["allowance"], keyof PeriodicAllowance>, never>) | ({
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | any;
                allowedMessages?: string[];
            } & {
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: ({
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } & {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"], keyof Any>, never>) | ({
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } & {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    } & {
                        seconds?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                        nanos?: number;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"], keyof BasicAllowance>, never>) | ({
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } & {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } & {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        } & {
                            seconds?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                            nanos?: number;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["basic"], keyof BasicAllowance>, never>;
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    } & {
                        seconds?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                        nanos?: number;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    } & {
                        seconds?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                        nanos?: number;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"], keyof PeriodicAllowance>, never>) | ({
                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                    allowance?: {
                        $typeUrl?: "/google.protobuf.Any";
                        typeUrl?: string;
                        value?: Uint8Array;
                    } | {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } | {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                        basic?: {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        };
                        period?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                        periodSpendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        periodCanSpend?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        periodReset?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } | any;
                    allowedMessages?: string[];
                } & {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                    allowance?: ({
                        $typeUrl?: "/google.protobuf.Any";
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        $typeUrl?: "/google.protobuf.Any";
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"], keyof Any>, never>) | ({
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } & {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        } & {
                            seconds?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                            nanos?: number;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"], keyof BasicAllowance>, never>) | ({
                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                        basic?: {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        };
                        period?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                        periodSpendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        periodCanSpend?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        periodReset?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } & {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                        basic?: {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } & {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            } & {
                                seconds?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                nanos?: number;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof BasicAllowance>, never>;
                        period?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        } & {
                            seconds?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                            nanos?: number;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                        periodSpendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        periodCanSpend?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        periodReset?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        } & {
                            seconds?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                            nanos?: number;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"], keyof PeriodicAllowance>, never>) | ({
                        $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                        allowance?: {
                            $typeUrl?: "/google.protobuf.Any";
                            typeUrl?: string;
                            value?: Uint8Array;
                        } | {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } | {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                            basic?: {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            };
                            period?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                            periodSpendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            periodCanSpend?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            periodReset?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } | any;
                        allowedMessages?: string[];
                    } & {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                        allowance?: ({
                            $typeUrl?: "/google.protobuf.Any";
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            $typeUrl?: "/google.protobuf.Any";
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof Any>, never>) | ({
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } & {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            } & {
                                seconds?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                nanos?: number;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof BasicAllowance>, never>) | ({
                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                            basic?: {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            };
                            period?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                            periodSpendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            periodCanSpend?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            periodReset?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } & {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                            basic?: {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } & {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                } & {
                                    seconds?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                    nanos?: number;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof BasicAllowance>, never>;
                            period?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            } & {
                                seconds?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                nanos?: number;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                            periodSpendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            periodCanSpend?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            periodReset?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            } & {
                                seconds?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                nanos?: number;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof PeriodicAllowance>, never>) | ({
                            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                            allowance?: {
                                $typeUrl?: "/google.protobuf.Any";
                                typeUrl?: string;
                                value?: Uint8Array;
                            } | {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } | {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                basic?: {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                };
                                period?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                                periodSpendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                periodCanSpend?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                periodReset?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } | any;
                            allowedMessages?: string[];
                        } & {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                            allowance?: ({
                                $typeUrl?: "/google.protobuf.Any";
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                $typeUrl?: "/google.protobuf.Any";
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof Any>, never>) | ({
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } & {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                } & {
                                    seconds?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                    nanos?: number;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof BasicAllowance>, never>) | ({
                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                basic?: {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                };
                                period?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                                periodSpendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                periodCanSpend?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                periodReset?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } & {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                basic?: {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } & {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[] & ({
                                        denom?: string;
                                        amount?: string;
                                    } & {
                                        denom?: string;
                                        amount?: string;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                        denom?: string;
                                        amount?: string;
                                    }[]>, never>;
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    } & {
                                        seconds?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                        nanos?: number;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof BasicAllowance>, never>;
                                period?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                } & {
                                    seconds?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                    nanos?: number;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                periodSpendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                periodCanSpend?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                periodReset?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                } & {
                                    seconds?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                    nanos?: number;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof PeriodicAllowance>, never>) | ({
                                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                allowance?: {
                                    $typeUrl?: "/google.protobuf.Any";
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } | {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } | {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                    basic?: {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    };
                                    period?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                    periodSpendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    periodCanSpend?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    periodReset?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } | any;
                                allowedMessages?: string[];
                            } & {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                allowance?: ({
                                    $typeUrl?: "/google.protobuf.Any";
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } & {
                                    $typeUrl?: "/google.protobuf.Any";
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof Any>, never>) | ({
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } & {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[] & ({
                                        denom?: string;
                                        amount?: string;
                                    } & {
                                        denom?: string;
                                        amount?: string;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                        denom?: string;
                                        amount?: string;
                                    }[]>, never>;
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    } & {
                                        seconds?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                        nanos?: number;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof BasicAllowance>, never>) | ({
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                    basic?: {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    };
                                    period?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                    periodSpendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    periodCanSpend?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    periodReset?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } & {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                    basic?: {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } & {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[] & ({
                                            denom?: string;
                                            amount?: string;
                                        } & {
                                            denom?: string;
                                            amount?: string;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                            denom?: string;
                                            amount?: string;
                                        }[]>, never>;
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        } & {
                                            seconds?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                            nanos?: number;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof BasicAllowance>, never>;
                                    period?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    } & {
                                        seconds?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                        nanos?: number;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                    periodSpendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[] & ({
                                        denom?: string;
                                        amount?: string;
                                    } & {
                                        denom?: string;
                                        amount?: string;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                        denom?: string;
                                        amount?: string;
                                    }[]>, never>;
                                    periodCanSpend?: {
                                        denom?: string;
                                        amount?: string;
                                    }[] & ({
                                        denom?: string;
                                        amount?: string;
                                    } & {
                                        denom?: string;
                                        amount?: string;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                        denom?: string;
                                        amount?: string;
                                    }[]>, never>;
                                    periodReset?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    } & {
                                        seconds?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                        nanos?: number;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof PeriodicAllowance>, never>) | ({
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                    allowance?: {
                                        $typeUrl?: "/google.protobuf.Any";
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    } | {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } | {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                        basic?: {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        };
                                        period?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                        periodSpendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        periodCanSpend?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        periodReset?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } | any;
                                    allowedMessages?: string[];
                                } & {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                    allowance?: ({
                                        $typeUrl?: "/google.protobuf.Any";
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    } & {
                                        $typeUrl?: "/google.protobuf.Any";
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof Any>, never>) | ({
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } & {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[] & ({
                                            denom?: string;
                                            amount?: string;
                                        } & {
                                            denom?: string;
                                            amount?: string;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                            denom?: string;
                                            amount?: string;
                                        }[]>, never>;
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        } & {
                                            seconds?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                            nanos?: number;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof BasicAllowance>, never>) | ({
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                        basic?: {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        };
                                        period?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                        periodSpendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        periodCanSpend?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        periodReset?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } & {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                        basic?: {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } & {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[] & ({
                                                denom?: string;
                                                amount?: string;
                                            } & {
                                                denom?: string;
                                                amount?: string;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                                denom?: string;
                                                amount?: string;
                                            }[]>, never>;
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            } & {
                                                seconds?: string | number | (import("long").Long & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                                nanos?: number;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof BasicAllowance>, never>;
                                        period?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        } & {
                                            seconds?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                            nanos?: number;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                        periodSpendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[] & ({
                                            denom?: string;
                                            amount?: string;
                                        } & {
                                            denom?: string;
                                            amount?: string;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                            denom?: string;
                                            amount?: string;
                                        }[]>, never>;
                                        periodCanSpend?: {
                                            denom?: string;
                                            amount?: string;
                                        }[] & ({
                                            denom?: string;
                                            amount?: string;
                                        } & {
                                            denom?: string;
                                            amount?: string;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                            denom?: string;
                                            amount?: string;
                                        }[]>, never>;
                                        periodReset?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        } & {
                                            seconds?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                            nanos?: number;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof PeriodicAllowance>, never>) | ({
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                        allowance?: {
                                            $typeUrl?: "/google.protobuf.Any";
                                            typeUrl?: string;
                                            value?: Uint8Array;
                                        } | {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } | {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                            basic?: {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            };
                                            period?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                            periodSpendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            periodCanSpend?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            periodReset?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } | any;
                                        allowedMessages?: string[];
                                    } & {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                        allowance?: ({
                                            $typeUrl?: "/google.protobuf.Any";
                                            typeUrl?: string;
                                            value?: Uint8Array;
                                        } & {
                                            $typeUrl?: "/google.protobuf.Any";
                                            typeUrl?: string;
                                            value?: Uint8Array;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof Any>, never>) | ({
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } & {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[] & ({
                                                denom?: string;
                                                amount?: string;
                                            } & {
                                                denom?: string;
                                                amount?: string;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                                denom?: string;
                                                amount?: string;
                                            }[]>, never>;
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            } & {
                                                seconds?: string | number | (import("long").Long & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                                nanos?: number;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof BasicAllowance>, never>) | ({
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                            basic?: {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            };
                                            period?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                            periodSpendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            periodCanSpend?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            periodReset?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } & {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                            basic?: {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } & {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[] & ({
                                                    denom?: string;
                                                    amount?: string;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                                    denom?: string;
                                                    amount?: string;
                                                }[]>, never>;
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof BasicAllowance>, never>;
                                            period?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            } & {
                                                seconds?: string | number | (import("long").Long & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                                nanos?: number;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                            periodSpendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[] & ({
                                                denom?: string;
                                                amount?: string;
                                            } & {
                                                denom?: string;
                                                amount?: string;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                                denom?: string;
                                                amount?: string;
                                            }[]>, never>;
                                            periodCanSpend?: {
                                                denom?: string;
                                                amount?: string;
                                            }[] & ({
                                                denom?: string;
                                                amount?: string;
                                            } & {
                                                denom?: string;
                                                amount?: string;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                                denom?: string;
                                                amount?: string;
                                            }[]>, never>;
                                            periodReset?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            } & {
                                                seconds?: string | number | (import("long").Long & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                                nanos?: number;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof PeriodicAllowance>, never>) | ({
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                            allowance?: {
                                                $typeUrl?: "/google.protobuf.Any";
                                                typeUrl?: string;
                                                value?: Uint8Array;
                                            } | {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } | {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                basic?: {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                };
                                                period?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                                periodSpendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                periodCanSpend?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                periodReset?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } | any;
                                            allowedMessages?: string[];
                                        } & {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                            allowance?: ({
                                                $typeUrl?: "/google.protobuf.Any";
                                                typeUrl?: string;
                                                value?: Uint8Array;
                                            } & {
                                                $typeUrl?: "/google.protobuf.Any";
                                                typeUrl?: string;
                                                value?: Uint8Array;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof Any>, never>) | ({
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } & {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[] & ({
                                                    denom?: string;
                                                    amount?: string;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                                    denom?: string;
                                                    amount?: string;
                                                }[]>, never>;
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof BasicAllowance>, never>) | ({
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                basic?: {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                };
                                                period?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                                periodSpendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                periodCanSpend?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                periodReset?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } & {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                basic?: {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof BasicAllowance>, never>;
                                                period?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                                periodSpendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[] & ({
                                                    denom?: string;
                                                    amount?: string;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                                    denom?: string;
                                                    amount?: string;
                                                }[]>, never>;
                                                periodCanSpend?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[] & ({
                                                    denom?: string;
                                                    amount?: string;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                                    denom?: string;
                                                    amount?: string;
                                                }[]>, never>;
                                                periodReset?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof PeriodicAllowance>, never>) | ({
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                                allowance?: {
                                                    $typeUrl?: "/google.protobuf.Any";
                                                    typeUrl?: string;
                                                    value?: Uint8Array;
                                                } | {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } | {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                    basic?: {
                                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                        spendLimit?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        expiration?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                    };
                                                    period?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                    periodSpendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    periodCanSpend?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    periodReset?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } | any;
                                                allowedMessages?: string[];
                                            } & {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                                allowance?: ({
                                                    $typeUrl?: "/google.protobuf.Any";
                                                    typeUrl?: string;
                                                    value?: Uint8Array;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof Any>, never>) | ({
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof BasicAllowance>, never>) | ({
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                    basic?: {
                                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                        spendLimit?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        expiration?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                    };
                                                    period?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                    periodSpendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    periodCanSpend?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    periodReset?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof PeriodicAllowance>, never>) | ({
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                                    allowance?: {
                                                        $typeUrl?: "/google.protobuf.Any";
                                                        typeUrl?: string;
                                                        value?: Uint8Array;
                                                    } | {
                                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                        spendLimit?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        expiration?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                    } | {
                                                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                        basic?: {
                                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                            spendLimit?: {
                                                                denom?: string;
                                                                amount?: string;
                                                            }[];
                                                            expiration?: {
                                                                seconds?: string | number | import("long").Long;
                                                                nanos?: number;
                                                            };
                                                        };
                                                        period?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                        periodSpendLimit?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        periodCanSpend?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        periodReset?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                    } | any;
                                                    allowedMessages?: string[];
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof AllowedMsgAllowance>, never>);
                                                allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof AllowedMsgAllowance>, never>);
                                            allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof AllowedMsgAllowance>, never>);
                                        allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof AllowedMsgAllowance>, never>);
                                    allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof AllowedMsgAllowance>, never>);
                                allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof AllowedMsgAllowance>, never>);
                            allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof AllowedMsgAllowance>, never>);
                        allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"], keyof AllowedMsgAllowance>, never>);
                    allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"], keyof AllowedMsgAllowance>, never>);
                allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
            } & Record<Exclude<keyof I["allowance"]["allowance"], keyof AllowedMsgAllowance>, never>);
            allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowedMessages"], keyof string[]>, never>;
        } & Record<Exclude<keyof I["allowance"], keyof AllowedMsgAllowance>, never>);
    } & Record<Exclude<keyof I, keyof MsgGrantAllowance>, never>>(object: I): MsgGrantAllowance;
    fromSDK(object: MsgGrantAllowanceSDKType): MsgGrantAllowance;
    toSDK(message: MsgGrantAllowance): MsgGrantAllowanceSDKType;
    fromAmino(object: MsgGrantAllowanceAmino): MsgGrantAllowance;
    toAmino(message: MsgGrantAllowance): MsgGrantAllowanceAmino;
    fromAminoMsg(object: MsgGrantAllowanceAminoMsg): MsgGrantAllowance;
    toAminoMsg(message: MsgGrantAllowance): MsgGrantAllowanceAminoMsg;
    fromProtoMsg(message: MsgGrantAllowanceProtoMsg): MsgGrantAllowance;
    toProto(message: MsgGrantAllowance): Uint8Array;
    toProtoMsg(message: MsgGrantAllowance): MsgGrantAllowanceProtoMsg;
};
export declare const MsgGrantAllowanceResponse: {
    typeUrl: string;
    encode(_: MsgGrantAllowanceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgGrantAllowanceResponse;
    fromJSON(_: any): MsgGrantAllowanceResponse;
    toJSON(_: MsgGrantAllowanceResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgGrantAllowanceResponse;
    fromSDK(_: MsgGrantAllowanceResponseSDKType): MsgGrantAllowanceResponse;
    toSDK(_: MsgGrantAllowanceResponse): MsgGrantAllowanceResponseSDKType;
    fromAmino(_: MsgGrantAllowanceResponseAmino): MsgGrantAllowanceResponse;
    toAmino(_: MsgGrantAllowanceResponse): MsgGrantAllowanceResponseAmino;
    fromAminoMsg(object: MsgGrantAllowanceResponseAminoMsg): MsgGrantAllowanceResponse;
    toAminoMsg(message: MsgGrantAllowanceResponse): MsgGrantAllowanceResponseAminoMsg;
    fromProtoMsg(message: MsgGrantAllowanceResponseProtoMsg): MsgGrantAllowanceResponse;
    toProto(message: MsgGrantAllowanceResponse): Uint8Array;
    toProtoMsg(message: MsgGrantAllowanceResponse): MsgGrantAllowanceResponseProtoMsg;
};
export declare const MsgRevokeAllowance: {
    typeUrl: string;
    encode(message: MsgRevokeAllowance, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRevokeAllowance;
    fromJSON(object: any): MsgRevokeAllowance;
    toJSON(message: MsgRevokeAllowance): unknown;
    fromPartial<I extends {
        granter?: string;
        grantee?: string;
    } & {
        granter?: string;
        grantee?: string;
    } & Record<Exclude<keyof I, keyof MsgRevokeAllowance>, never>>(object: I): MsgRevokeAllowance;
    fromSDK(object: MsgRevokeAllowanceSDKType): MsgRevokeAllowance;
    toSDK(message: MsgRevokeAllowance): MsgRevokeAllowanceSDKType;
    fromAmino(object: MsgRevokeAllowanceAmino): MsgRevokeAllowance;
    toAmino(message: MsgRevokeAllowance): MsgRevokeAllowanceAmino;
    fromAminoMsg(object: MsgRevokeAllowanceAminoMsg): MsgRevokeAllowance;
    toAminoMsg(message: MsgRevokeAllowance): MsgRevokeAllowanceAminoMsg;
    fromProtoMsg(message: MsgRevokeAllowanceProtoMsg): MsgRevokeAllowance;
    toProto(message: MsgRevokeAllowance): Uint8Array;
    toProtoMsg(message: MsgRevokeAllowance): MsgRevokeAllowanceProtoMsg;
};
export declare const MsgRevokeAllowanceResponse: {
    typeUrl: string;
    encode(_: MsgRevokeAllowanceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRevokeAllowanceResponse;
    fromJSON(_: any): MsgRevokeAllowanceResponse;
    toJSON(_: MsgRevokeAllowanceResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgRevokeAllowanceResponse;
    fromSDK(_: MsgRevokeAllowanceResponseSDKType): MsgRevokeAllowanceResponse;
    toSDK(_: MsgRevokeAllowanceResponse): MsgRevokeAllowanceResponseSDKType;
    fromAmino(_: MsgRevokeAllowanceResponseAmino): MsgRevokeAllowanceResponse;
    toAmino(_: MsgRevokeAllowanceResponse): MsgRevokeAllowanceResponseAmino;
    fromAminoMsg(object: MsgRevokeAllowanceResponseAminoMsg): MsgRevokeAllowanceResponse;
    toAminoMsg(message: MsgRevokeAllowanceResponse): MsgRevokeAllowanceResponseAminoMsg;
    fromProtoMsg(message: MsgRevokeAllowanceResponseProtoMsg): MsgRevokeAllowanceResponse;
    toProto(message: MsgRevokeAllowanceResponse): Uint8Array;
    toProtoMsg(message: MsgRevokeAllowanceResponse): MsgRevokeAllowanceResponseProtoMsg;
};
export declare const Cosmos_feegrantv1beta1FeeAllowanceI_InterfaceDecoder: (input: _m0.Reader | Uint8Array) => BasicAllowance | PeriodicAllowance | AllowedMsgAllowance | Any;
export declare const Cosmos_feegrantv1beta1FeeAllowanceI_FromAmino: (content: AnyAmino) => Any;
export declare const Cosmos_feegrantv1beta1FeeAllowanceI_ToAmino: (content: Any) => AnyAmino;
/** Msg defines the feegrant msg service. */
export interface Msg {
    /**
     * GrantAllowance grants fee allowance to the grantee on the granter's
     * account with the provided expiration time.
     */
    GrantAllowance(request: MsgGrantAllowance): Promise<MsgGrantAllowanceResponse>;
    /**
     * RevokeAllowance revokes any fee allowance of granter's account that
     * has been granted to the grantee.
     */
    RevokeAllowance(request: MsgRevokeAllowance): Promise<MsgRevokeAllowanceResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    GrantAllowance(request: MsgGrantAllowance): Promise<MsgGrantAllowanceResponse>;
    RevokeAllowance(request: MsgRevokeAllowance): Promise<MsgRevokeAllowanceResponse>;
}
