import { PageRequest, PageRequestAmino, PageRequestSDKType, PageResponse, PageResponseAmino, PageResponseSDKType } from "../../base/query/v1beta1/pagination";
import { Grant, GrantAmino, GrantSDKType } from "./feegrant";
import * as _m0 from "protobufjs/minimal";
import { Rpc } from "../../../helpers";
export declare const protobufPackage = "cosmos.feegrant.v1beta1";
/** QueryAllowanceRequest is the request type for the Query/Allowance RPC method. */
export interface QueryAllowanceRequest {
    /** granter is the address of the user granting an allowance of their funds. */
    granter: string;
    /** grantee is the address of the user being granted an allowance of another user's funds. */
    grantee: string;
}
export interface QueryAllowanceRequestProtoMsg {
    typeUrl: "/cosmos.feegrant.v1beta1.QueryAllowanceRequest";
    value: Uint8Array;
}
/** QueryAllowanceRequest is the request type for the Query/Allowance RPC method. */
export interface QueryAllowanceRequestAmino {
    /** granter is the address of the user granting an allowance of their funds. */
    granter?: string;
    /** grantee is the address of the user being granted an allowance of another user's funds. */
    grantee?: string;
}
export interface QueryAllowanceRequestAminoMsg {
    type: "cosmos-sdk/QueryAllowanceRequest";
    value: QueryAllowanceRequestAmino;
}
/** QueryAllowanceRequest is the request type for the Query/Allowance RPC method. */
export interface QueryAllowanceRequestSDKType {
    granter: string;
    grantee: string;
}
/** QueryAllowanceResponse is the response type for the Query/Allowance RPC method. */
export interface QueryAllowanceResponse {
    /** allowance is a allowance granted for grantee by granter. */
    allowance?: Grant;
}
export interface QueryAllowanceResponseProtoMsg {
    typeUrl: "/cosmos.feegrant.v1beta1.QueryAllowanceResponse";
    value: Uint8Array;
}
/** QueryAllowanceResponse is the response type for the Query/Allowance RPC method. */
export interface QueryAllowanceResponseAmino {
    /** allowance is a allowance granted for grantee by granter. */
    allowance?: GrantAmino;
}
export interface QueryAllowanceResponseAminoMsg {
    type: "cosmos-sdk/QueryAllowanceResponse";
    value: QueryAllowanceResponseAmino;
}
/** QueryAllowanceResponse is the response type for the Query/Allowance RPC method. */
export interface QueryAllowanceResponseSDKType {
    allowance?: GrantSDKType;
}
/** QueryAllowancesRequest is the request type for the Query/Allowances RPC method. */
export interface QueryAllowancesRequest {
    grantee: string;
    /** pagination defines an pagination for the request. */
    pagination?: PageRequest;
}
export interface QueryAllowancesRequestProtoMsg {
    typeUrl: "/cosmos.feegrant.v1beta1.QueryAllowancesRequest";
    value: Uint8Array;
}
/** QueryAllowancesRequest is the request type for the Query/Allowances RPC method. */
export interface QueryAllowancesRequestAmino {
    grantee?: string;
    /** pagination defines an pagination for the request. */
    pagination?: PageRequestAmino;
}
export interface QueryAllowancesRequestAminoMsg {
    type: "cosmos-sdk/QueryAllowancesRequest";
    value: QueryAllowancesRequestAmino;
}
/** QueryAllowancesRequest is the request type for the Query/Allowances RPC method. */
export interface QueryAllowancesRequestSDKType {
    grantee: string;
    pagination?: PageRequestSDKType;
}
/** QueryAllowancesResponse is the response type for the Query/Allowances RPC method. */
export interface QueryAllowancesResponse {
    /** allowances are allowance's granted for grantee by granter. */
    allowances: Grant[];
    /** pagination defines an pagination for the response. */
    pagination?: PageResponse;
}
export interface QueryAllowancesResponseProtoMsg {
    typeUrl: "/cosmos.feegrant.v1beta1.QueryAllowancesResponse";
    value: Uint8Array;
}
/** QueryAllowancesResponse is the response type for the Query/Allowances RPC method. */
export interface QueryAllowancesResponseAmino {
    /** allowances are allowance's granted for grantee by granter. */
    allowances?: GrantAmino[];
    /** pagination defines an pagination for the response. */
    pagination?: PageResponseAmino;
}
export interface QueryAllowancesResponseAminoMsg {
    type: "cosmos-sdk/QueryAllowancesResponse";
    value: QueryAllowancesResponseAmino;
}
/** QueryAllowancesResponse is the response type for the Query/Allowances RPC method. */
export interface QueryAllowancesResponseSDKType {
    allowances: GrantSDKType[];
    pagination?: PageResponseSDKType;
}
/**
 * QueryAllowancesByGranterRequest is the request type for the Query/AllowancesByGranter RPC method.
 *
 * Since: cosmos-sdk 0.46
 */
export interface QueryAllowancesByGranterRequest {
    granter: string;
    /** pagination defines an pagination for the request. */
    pagination?: PageRequest;
}
export interface QueryAllowancesByGranterRequestProtoMsg {
    typeUrl: "/cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest";
    value: Uint8Array;
}
/**
 * QueryAllowancesByGranterRequest is the request type for the Query/AllowancesByGranter RPC method.
 *
 * Since: cosmos-sdk 0.46
 */
export interface QueryAllowancesByGranterRequestAmino {
    granter?: string;
    /** pagination defines an pagination for the request. */
    pagination?: PageRequestAmino;
}
export interface QueryAllowancesByGranterRequestAminoMsg {
    type: "cosmos-sdk/QueryAllowancesByGranterRequest";
    value: QueryAllowancesByGranterRequestAmino;
}
/**
 * QueryAllowancesByGranterRequest is the request type for the Query/AllowancesByGranter RPC method.
 *
 * Since: cosmos-sdk 0.46
 */
export interface QueryAllowancesByGranterRequestSDKType {
    granter: string;
    pagination?: PageRequestSDKType;
}
/**
 * QueryAllowancesByGranterResponse is the response type for the Query/AllowancesByGranter RPC method.
 *
 * Since: cosmos-sdk 0.46
 */
export interface QueryAllowancesByGranterResponse {
    /** allowances that have been issued by the granter. */
    allowances: Grant[];
    /** pagination defines an pagination for the response. */
    pagination?: PageResponse;
}
export interface QueryAllowancesByGranterResponseProtoMsg {
    typeUrl: "/cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse";
    value: Uint8Array;
}
/**
 * QueryAllowancesByGranterResponse is the response type for the Query/AllowancesByGranter RPC method.
 *
 * Since: cosmos-sdk 0.46
 */
export interface QueryAllowancesByGranterResponseAmino {
    /** allowances that have been issued by the granter. */
    allowances?: GrantAmino[];
    /** pagination defines an pagination for the response. */
    pagination?: PageResponseAmino;
}
export interface QueryAllowancesByGranterResponseAminoMsg {
    type: "cosmos-sdk/QueryAllowancesByGranterResponse";
    value: QueryAllowancesByGranterResponseAmino;
}
/**
 * QueryAllowancesByGranterResponse is the response type for the Query/AllowancesByGranter RPC method.
 *
 * Since: cosmos-sdk 0.46
 */
export interface QueryAllowancesByGranterResponseSDKType {
    allowances: GrantSDKType[];
    pagination?: PageResponseSDKType;
}
export declare const QueryAllowanceRequest: {
    typeUrl: string;
    encode(message: QueryAllowanceRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllowanceRequest;
    fromJSON(object: any): QueryAllowanceRequest;
    toJSON(message: QueryAllowanceRequest): unknown;
    fromPartial<I extends {
        granter?: string;
        grantee?: string;
    } & {
        granter?: string;
        grantee?: string;
    } & Record<Exclude<keyof I, keyof QueryAllowanceRequest>, never>>(object: I): QueryAllowanceRequest;
    fromSDK(object: QueryAllowanceRequestSDKType): QueryAllowanceRequest;
    toSDK(message: QueryAllowanceRequest): QueryAllowanceRequestSDKType;
    fromAmino(object: QueryAllowanceRequestAmino): QueryAllowanceRequest;
    toAmino(message: QueryAllowanceRequest): QueryAllowanceRequestAmino;
    fromAminoMsg(object: QueryAllowanceRequestAminoMsg): QueryAllowanceRequest;
    toAminoMsg(message: QueryAllowanceRequest): QueryAllowanceRequestAminoMsg;
    fromProtoMsg(message: QueryAllowanceRequestProtoMsg): QueryAllowanceRequest;
    toProto(message: QueryAllowanceRequest): Uint8Array;
    toProtoMsg(message: QueryAllowanceRequest): QueryAllowanceRequestProtoMsg;
};
export declare const QueryAllowanceResponse: {
    typeUrl: string;
    encode(message: QueryAllowanceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllowanceResponse;
    fromJSON(object: any): QueryAllowanceResponse;
    toJSON(message: QueryAllowanceResponse): unknown;
    fromPartial<I extends {
        allowance?: {
            granter?: string;
            grantee?: string;
            allowance?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                };
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | any;
                allowedMessages?: string[];
            };
        };
    } & {
        allowance?: {
            granter?: string;
            grantee?: string;
            allowance?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                };
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | any;
                allowedMessages?: string[];
            };
        } & {
            granter?: string;
            grantee?: string;
            allowance?: ({
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } & {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } & Record<Exclude<keyof I["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } & {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[] & ({
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["spendLimit"], keyof {
                    denom?: string;
                    amount?: string;
                }[]>, never>;
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                } & {
                    seconds?: string | number | (import("long").Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | import("long").Long) => import("long").Long;
                        and: (other: string | number | import("long").Long) => import("long").Long;
                        compare: (other: string | number | import("long").Long) => number;
                        comp: (other: string | number | import("long").Long) => number;
                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                        equals: (other: string | number | import("long").Long) => boolean;
                        eq: (other: string | number | import("long").Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | import("long").Long) => boolean;
                        gt: (other: string | number | import("long").Long) => boolean;
                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        gte: (other: string | number | import("long").Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | import("long").Long) => boolean;
                        lt: (other: string | number | import("long").Long) => boolean;
                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        lte: (other: string | number | import("long").Long) => boolean;
                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                        mod: (other: string | number | import("long").Long) => import("long").Long;
                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                        negate: () => import("long").Long;
                        neg: () => import("long").Long;
                        not: () => import("long").Long;
                        notEquals: (other: string | number | import("long").Long) => boolean;
                        neq: (other: string | number | import("long").Long) => boolean;
                        or: (other: string | number | import("long").Long) => import("long").Long;
                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                        shl: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                        shr: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                        shru: (numBits: number | import("long").Long) => import("long").Long;
                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => import("long").Long;
                        toString: (radix?: number) => string;
                        toUnsigned: () => import("long").Long;
                        xor: (other: string | number | import("long").Long) => import("long").Long;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                    nanos?: number;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
            } & Record<Exclude<keyof I["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                };
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } & {
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } & {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    } & {
                        seconds?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                        nanos?: number;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                } & {
                    seconds?: string | number | (import("long").Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | import("long").Long) => import("long").Long;
                        and: (other: string | number | import("long").Long) => import("long").Long;
                        compare: (other: string | number | import("long").Long) => number;
                        comp: (other: string | number | import("long").Long) => number;
                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                        equals: (other: string | number | import("long").Long) => boolean;
                        eq: (other: string | number | import("long").Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | import("long").Long) => boolean;
                        gt: (other: string | number | import("long").Long) => boolean;
                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        gte: (other: string | number | import("long").Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | import("long").Long) => boolean;
                        lt: (other: string | number | import("long").Long) => boolean;
                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        lte: (other: string | number | import("long").Long) => boolean;
                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                        mod: (other: string | number | import("long").Long) => import("long").Long;
                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                        negate: () => import("long").Long;
                        neg: () => import("long").Long;
                        not: () => import("long").Long;
                        notEquals: (other: string | number | import("long").Long) => boolean;
                        neq: (other: string | number | import("long").Long) => boolean;
                        or: (other: string | number | import("long").Long) => import("long").Long;
                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                        shl: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                        shr: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                        shru: (numBits: number | import("long").Long) => import("long").Long;
                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => import("long").Long;
                        toString: (radix?: number) => string;
                        toUnsigned: () => import("long").Long;
                        xor: (other: string | number | import("long").Long) => import("long").Long;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                    nanos?: number;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[] & ({
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["periodSpendLimit"], keyof {
                    denom?: string;
                    amount?: string;
                }[]>, never>;
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[] & ({
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["periodCanSpend"], keyof {
                    denom?: string;
                    amount?: string;
                }[]>, never>;
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                } & {
                    seconds?: string | number | (import("long").Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | import("long").Long) => import("long").Long;
                        and: (other: string | number | import("long").Long) => import("long").Long;
                        compare: (other: string | number | import("long").Long) => number;
                        comp: (other: string | number | import("long").Long) => number;
                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                        equals: (other: string | number | import("long").Long) => boolean;
                        eq: (other: string | number | import("long").Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | import("long").Long) => boolean;
                        gt: (other: string | number | import("long").Long) => boolean;
                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        gte: (other: string | number | import("long").Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | import("long").Long) => boolean;
                        lt: (other: string | number | import("long").Long) => boolean;
                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        lte: (other: string | number | import("long").Long) => boolean;
                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                        mod: (other: string | number | import("long").Long) => import("long").Long;
                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                        negate: () => import("long").Long;
                        neg: () => import("long").Long;
                        not: () => import("long").Long;
                        notEquals: (other: string | number | import("long").Long) => boolean;
                        neq: (other: string | number | import("long").Long) => boolean;
                        or: (other: string | number | import("long").Long) => import("long").Long;
                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                        shl: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                        shr: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                        shru: (numBits: number | import("long").Long) => import("long").Long;
                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => import("long").Long;
                        toString: (radix?: number) => string;
                        toUnsigned: () => import("long").Long;
                        xor: (other: string | number | import("long").Long) => import("long").Long;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                    nanos?: number;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
            } & Record<Exclude<keyof I["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | any;
                allowedMessages?: string[];
            } & {
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: ({
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } & {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } & {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    } & {
                        seconds?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                        nanos?: number;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } & {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } & {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        } & {
                            seconds?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                            nanos?: number;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    } & {
                        seconds?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                        nanos?: number;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    } & {
                        seconds?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                        nanos?: number;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                    allowance?: {
                        $typeUrl?: "/google.protobuf.Any";
                        typeUrl?: string;
                        value?: Uint8Array;
                    } | {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } | {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                        basic?: {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        };
                        period?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                        periodSpendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        periodCanSpend?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        periodReset?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } | any;
                    allowedMessages?: string[];
                } & {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                    allowance?: ({
                        $typeUrl?: "/google.protobuf.Any";
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        $typeUrl?: "/google.protobuf.Any";
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } & {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        } & {
                            seconds?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                            nanos?: number;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                        basic?: {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        };
                        period?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                        periodSpendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        periodCanSpend?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        periodReset?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } & {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                        basic?: {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } & {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            } & {
                                seconds?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                nanos?: number;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                        period?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        } & {
                            seconds?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                            nanos?: number;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                        periodSpendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        periodCanSpend?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        periodReset?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        } & {
                            seconds?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                            nanos?: number;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                        $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                        allowance?: {
                            $typeUrl?: "/google.protobuf.Any";
                            typeUrl?: string;
                            value?: Uint8Array;
                        } | {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } | {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                            basic?: {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            };
                            period?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                            periodSpendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            periodCanSpend?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            periodReset?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } | any;
                        allowedMessages?: string[];
                    } & {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                        allowance?: ({
                            $typeUrl?: "/google.protobuf.Any";
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            $typeUrl?: "/google.protobuf.Any";
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } & {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            } & {
                                seconds?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                nanos?: number;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                            basic?: {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            };
                            period?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                            periodSpendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            periodCanSpend?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            periodReset?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } & {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                            basic?: {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } & {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                } & {
                                    seconds?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                    nanos?: number;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                            period?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            } & {
                                seconds?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                nanos?: number;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                            periodSpendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            periodCanSpend?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            periodReset?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            } & {
                                seconds?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                nanos?: number;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                            allowance?: {
                                $typeUrl?: "/google.protobuf.Any";
                                typeUrl?: string;
                                value?: Uint8Array;
                            } | {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } | {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                basic?: {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                };
                                period?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                                periodSpendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                periodCanSpend?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                periodReset?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } | any;
                            allowedMessages?: string[];
                        } & {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                            allowance?: ({
                                $typeUrl?: "/google.protobuf.Any";
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                $typeUrl?: "/google.protobuf.Any";
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } & {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                } & {
                                    seconds?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                    nanos?: number;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                basic?: {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                };
                                period?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                                periodSpendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                periodCanSpend?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                periodReset?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } & {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                basic?: {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } & {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[] & ({
                                        denom?: string;
                                        amount?: string;
                                    } & {
                                        denom?: string;
                                        amount?: string;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                        denom?: string;
                                        amount?: string;
                                    }[]>, never>;
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    } & {
                                        seconds?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                        nanos?: number;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                                period?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                } & {
                                    seconds?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                    nanos?: number;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                periodSpendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                periodCanSpend?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                periodReset?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                } & {
                                    seconds?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                    nanos?: number;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                allowance?: {
                                    $typeUrl?: "/google.protobuf.Any";
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } | {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } | {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                    basic?: {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    };
                                    period?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                    periodSpendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    periodCanSpend?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    periodReset?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } | any;
                                allowedMessages?: string[];
                            } & {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                allowance?: ({
                                    $typeUrl?: "/google.protobuf.Any";
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } & {
                                    $typeUrl?: "/google.protobuf.Any";
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } & {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[] & ({
                                        denom?: string;
                                        amount?: string;
                                    } & {
                                        denom?: string;
                                        amount?: string;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                        denom?: string;
                                        amount?: string;
                                    }[]>, never>;
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    } & {
                                        seconds?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                        nanos?: number;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                    basic?: {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    };
                                    period?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                    periodSpendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    periodCanSpend?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    periodReset?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } & {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                    basic?: {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } & {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[] & ({
                                            denom?: string;
                                            amount?: string;
                                        } & {
                                            denom?: string;
                                            amount?: string;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                            denom?: string;
                                            amount?: string;
                                        }[]>, never>;
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        } & {
                                            seconds?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                            nanos?: number;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                                    period?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    } & {
                                        seconds?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                        nanos?: number;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                    periodSpendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[] & ({
                                        denom?: string;
                                        amount?: string;
                                    } & {
                                        denom?: string;
                                        amount?: string;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                        denom?: string;
                                        amount?: string;
                                    }[]>, never>;
                                    periodCanSpend?: {
                                        denom?: string;
                                        amount?: string;
                                    }[] & ({
                                        denom?: string;
                                        amount?: string;
                                    } & {
                                        denom?: string;
                                        amount?: string;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                        denom?: string;
                                        amount?: string;
                                    }[]>, never>;
                                    periodReset?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    } & {
                                        seconds?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                        nanos?: number;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                    allowance?: {
                                        $typeUrl?: "/google.protobuf.Any";
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    } | {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } | {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                        basic?: {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        };
                                        period?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                        periodSpendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        periodCanSpend?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        periodReset?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } | any;
                                    allowedMessages?: string[];
                                } & {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                    allowance?: ({
                                        $typeUrl?: "/google.protobuf.Any";
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    } & {
                                        $typeUrl?: "/google.protobuf.Any";
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } & {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[] & ({
                                            denom?: string;
                                            amount?: string;
                                        } & {
                                            denom?: string;
                                            amount?: string;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                            denom?: string;
                                            amount?: string;
                                        }[]>, never>;
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        } & {
                                            seconds?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                            nanos?: number;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                        basic?: {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        };
                                        period?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                        periodSpendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        periodCanSpend?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        periodReset?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } & {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                        basic?: {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } & {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[] & ({
                                                denom?: string;
                                                amount?: string;
                                            } & {
                                                denom?: string;
                                                amount?: string;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                                denom?: string;
                                                amount?: string;
                                            }[]>, never>;
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            } & {
                                                seconds?: string | number | (import("long").Long & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                                nanos?: number;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                                        period?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        } & {
                                            seconds?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                            nanos?: number;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                        periodSpendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[] & ({
                                            denom?: string;
                                            amount?: string;
                                        } & {
                                            denom?: string;
                                            amount?: string;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                            denom?: string;
                                            amount?: string;
                                        }[]>, never>;
                                        periodCanSpend?: {
                                            denom?: string;
                                            amount?: string;
                                        }[] & ({
                                            denom?: string;
                                            amount?: string;
                                        } & {
                                            denom?: string;
                                            amount?: string;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                            denom?: string;
                                            amount?: string;
                                        }[]>, never>;
                                        periodReset?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        } & {
                                            seconds?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                            nanos?: number;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                        allowance?: {
                                            $typeUrl?: "/google.protobuf.Any";
                                            typeUrl?: string;
                                            value?: Uint8Array;
                                        } | {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } | {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                            basic?: {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            };
                                            period?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                            periodSpendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            periodCanSpend?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            periodReset?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } | any;
                                        allowedMessages?: string[];
                                    } & {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                        allowance?: ({
                                            $typeUrl?: "/google.protobuf.Any";
                                            typeUrl?: string;
                                            value?: Uint8Array;
                                        } & {
                                            $typeUrl?: "/google.protobuf.Any";
                                            typeUrl?: string;
                                            value?: Uint8Array;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } & {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[] & ({
                                                denom?: string;
                                                amount?: string;
                                            } & {
                                                denom?: string;
                                                amount?: string;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                                denom?: string;
                                                amount?: string;
                                            }[]>, never>;
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            } & {
                                                seconds?: string | number | (import("long").Long & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                                nanos?: number;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                            basic?: {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            };
                                            period?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                            periodSpendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            periodCanSpend?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            periodReset?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } & {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                            basic?: {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } & {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[] & ({
                                                    denom?: string;
                                                    amount?: string;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                                    denom?: string;
                                                    amount?: string;
                                                }[]>, never>;
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                                            period?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            } & {
                                                seconds?: string | number | (import("long").Long & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                                nanos?: number;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                            periodSpendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[] & ({
                                                denom?: string;
                                                amount?: string;
                                            } & {
                                                denom?: string;
                                                amount?: string;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                                denom?: string;
                                                amount?: string;
                                            }[]>, never>;
                                            periodCanSpend?: {
                                                denom?: string;
                                                amount?: string;
                                            }[] & ({
                                                denom?: string;
                                                amount?: string;
                                            } & {
                                                denom?: string;
                                                amount?: string;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                                denom?: string;
                                                amount?: string;
                                            }[]>, never>;
                                            periodReset?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            } & {
                                                seconds?: string | number | (import("long").Long & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                                nanos?: number;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                            allowance?: {
                                                $typeUrl?: "/google.protobuf.Any";
                                                typeUrl?: string;
                                                value?: Uint8Array;
                                            } | {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } | {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                basic?: {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                };
                                                period?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                                periodSpendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                periodCanSpend?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                periodReset?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } | any;
                                            allowedMessages?: string[];
                                        } & {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                            allowance?: ({
                                                $typeUrl?: "/google.protobuf.Any";
                                                typeUrl?: string;
                                                value?: Uint8Array;
                                            } & {
                                                $typeUrl?: "/google.protobuf.Any";
                                                typeUrl?: string;
                                                value?: Uint8Array;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } & {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[] & ({
                                                    denom?: string;
                                                    amount?: string;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                                    denom?: string;
                                                    amount?: string;
                                                }[]>, never>;
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                basic?: {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                };
                                                period?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                                periodSpendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                periodCanSpend?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                periodReset?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } & {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                basic?: {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                                                period?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                                periodSpendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[] & ({
                                                    denom?: string;
                                                    amount?: string;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                                    denom?: string;
                                                    amount?: string;
                                                }[]>, never>;
                                                periodCanSpend?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[] & ({
                                                    denom?: string;
                                                    amount?: string;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                                    denom?: string;
                                                    amount?: string;
                                                }[]>, never>;
                                                periodReset?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                                allowance?: {
                                                    $typeUrl?: "/google.protobuf.Any";
                                                    typeUrl?: string;
                                                    value?: Uint8Array;
                                                } | {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } | {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                    basic?: {
                                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                        spendLimit?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        expiration?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                    };
                                                    period?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                    periodSpendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    periodCanSpend?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    periodReset?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } | any;
                                                allowedMessages?: string[];
                                            } & {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                                allowance?: ({
                                                    $typeUrl?: "/google.protobuf.Any";
                                                    typeUrl?: string;
                                                    value?: Uint8Array;
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                    basic?: {
                                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                        spendLimit?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        expiration?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                    };
                                                    period?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                    periodSpendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    periodCanSpend?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    periodReset?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                                    allowance?: {
                                                        $typeUrl?: "/google.protobuf.Any";
                                                        typeUrl?: string;
                                                        value?: Uint8Array;
                                                    } | {
                                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                        spendLimit?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        expiration?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                    } | {
                                                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                        basic?: {
                                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                            spendLimit?: {
                                                                denom?: string;
                                                                amount?: string;
                                                            }[];
                                                            expiration?: {
                                                                seconds?: string | number | import("long").Long;
                                                                nanos?: number;
                                                            };
                                                        };
                                                        period?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                        periodSpendLimit?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        periodCanSpend?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        periodReset?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                    } | any;
                                                    allowedMessages?: string[];
                                                } & any & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                                                allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                                            allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                                        allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                                    allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                                allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                            } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                            allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                        } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                        allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                    } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                    allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                } & Record<Exclude<keyof I["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
            } & Record<Exclude<keyof I["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
        } & Record<Exclude<keyof I["allowance"], keyof Grant>, never>;
    } & Record<Exclude<keyof I, "allowance">, never>>(object: I): QueryAllowanceResponse;
    fromSDK(object: QueryAllowanceResponseSDKType): QueryAllowanceResponse;
    toSDK(message: QueryAllowanceResponse): QueryAllowanceResponseSDKType;
    fromAmino(object: QueryAllowanceResponseAmino): QueryAllowanceResponse;
    toAmino(message: QueryAllowanceResponse): QueryAllowanceResponseAmino;
    fromAminoMsg(object: QueryAllowanceResponseAminoMsg): QueryAllowanceResponse;
    toAminoMsg(message: QueryAllowanceResponse): QueryAllowanceResponseAminoMsg;
    fromProtoMsg(message: QueryAllowanceResponseProtoMsg): QueryAllowanceResponse;
    toProto(message: QueryAllowanceResponse): Uint8Array;
    toProtoMsg(message: QueryAllowanceResponse): QueryAllowanceResponseProtoMsg;
};
export declare const QueryAllowancesRequest: {
    typeUrl: string;
    encode(message: QueryAllowancesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllowancesRequest;
    fromJSON(object: any): QueryAllowancesRequest;
    toJSON(message: QueryAllowancesRequest): unknown;
    fromPartial<I extends {
        grantee?: string;
        pagination?: {
            key?: Uint8Array;
            offset?: string | number | import("long").Long;
            limit?: string | number | import("long").Long;
            countTotal?: boolean;
            reverse?: boolean;
        };
    } & {
        grantee?: string;
        pagination?: {
            key?: Uint8Array;
            offset?: string | number | import("long").Long;
            limit?: string | number | import("long").Long;
            countTotal?: boolean;
            reverse?: boolean;
        } & {
            key?: Uint8Array;
            offset?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["pagination"]["offset"], keyof import("long").Long>, never>);
            limit?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["pagination"]["limit"], keyof import("long").Long>, never>);
            countTotal?: boolean;
            reverse?: boolean;
        } & Record<Exclude<keyof I["pagination"], keyof PageRequest>, never>;
    } & Record<Exclude<keyof I, keyof QueryAllowancesRequest>, never>>(object: I): QueryAllowancesRequest;
    fromSDK(object: QueryAllowancesRequestSDKType): QueryAllowancesRequest;
    toSDK(message: QueryAllowancesRequest): QueryAllowancesRequestSDKType;
    fromAmino(object: QueryAllowancesRequestAmino): QueryAllowancesRequest;
    toAmino(message: QueryAllowancesRequest): QueryAllowancesRequestAmino;
    fromAminoMsg(object: QueryAllowancesRequestAminoMsg): QueryAllowancesRequest;
    toAminoMsg(message: QueryAllowancesRequest): QueryAllowancesRequestAminoMsg;
    fromProtoMsg(message: QueryAllowancesRequestProtoMsg): QueryAllowancesRequest;
    toProto(message: QueryAllowancesRequest): Uint8Array;
    toProtoMsg(message: QueryAllowancesRequest): QueryAllowancesRequestProtoMsg;
};
export declare const QueryAllowancesResponse: {
    typeUrl: string;
    encode(message: QueryAllowancesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllowancesResponse;
    fromJSON(object: any): QueryAllowancesResponse;
    toJSON(message: QueryAllowancesResponse): unknown;
    fromPartial<I extends {
        allowances?: {
            granter?: string;
            grantee?: string;
            allowance?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                };
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | any;
                allowedMessages?: string[];
            };
        }[];
        pagination?: {
            nextKey?: Uint8Array;
            total?: string | number | import("long").Long;
        };
    } & {
        allowances?: {
            granter?: string;
            grantee?: string;
            allowance?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                };
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | any;
                allowedMessages?: string[];
            };
        }[] & ({
            granter?: string;
            grantee?: string;
            allowance?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                };
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | any;
                allowedMessages?: string[];
            };
        } & {
            granter?: string;
            grantee?: string;
            allowance?: ({
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } & {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } & Record<Exclude<keyof I["allowances"][number]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } & {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[] & ({
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["spendLimit"], keyof {
                    denom?: string;
                    amount?: string;
                }[]>, never>;
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                } & {
                    seconds?: string | number | (import("long").Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | import("long").Long) => import("long").Long;
                        and: (other: string | number | import("long").Long) => import("long").Long;
                        compare: (other: string | number | import("long").Long) => number;
                        comp: (other: string | number | import("long").Long) => number;
                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                        equals: (other: string | number | import("long").Long) => boolean;
                        eq: (other: string | number | import("long").Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | import("long").Long) => boolean;
                        gt: (other: string | number | import("long").Long) => boolean;
                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        gte: (other: string | number | import("long").Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | import("long").Long) => boolean;
                        lt: (other: string | number | import("long").Long) => boolean;
                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        lte: (other: string | number | import("long").Long) => boolean;
                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                        mod: (other: string | number | import("long").Long) => import("long").Long;
                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                        negate: () => import("long").Long;
                        neg: () => import("long").Long;
                        not: () => import("long").Long;
                        notEquals: (other: string | number | import("long").Long) => boolean;
                        neq: (other: string | number | import("long").Long) => boolean;
                        or: (other: string | number | import("long").Long) => import("long").Long;
                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                        shl: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                        shr: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                        shru: (numBits: number | import("long").Long) => import("long").Long;
                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => import("long").Long;
                        toString: (radix?: number) => string;
                        toUnsigned: () => import("long").Long;
                        xor: (other: string | number | import("long").Long) => import("long").Long;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                    nanos?: number;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
            } & Record<Exclude<keyof I["allowances"][number]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                };
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } & {
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } & {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["basic"]["spendLimit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    } & {
                        seconds?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                        nanos?: number;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                } & {
                    seconds?: string | number | (import("long").Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | import("long").Long) => import("long").Long;
                        and: (other: string | number | import("long").Long) => import("long").Long;
                        compare: (other: string | number | import("long").Long) => number;
                        comp: (other: string | number | import("long").Long) => number;
                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                        equals: (other: string | number | import("long").Long) => boolean;
                        eq: (other: string | number | import("long").Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | import("long").Long) => boolean;
                        gt: (other: string | number | import("long").Long) => boolean;
                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        gte: (other: string | number | import("long").Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | import("long").Long) => boolean;
                        lt: (other: string | number | import("long").Long) => boolean;
                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        lte: (other: string | number | import("long").Long) => boolean;
                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                        mod: (other: string | number | import("long").Long) => import("long").Long;
                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                        negate: () => import("long").Long;
                        neg: () => import("long").Long;
                        not: () => import("long").Long;
                        notEquals: (other: string | number | import("long").Long) => boolean;
                        neq: (other: string | number | import("long").Long) => boolean;
                        or: (other: string | number | import("long").Long) => import("long").Long;
                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                        shl: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                        shr: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                        shru: (numBits: number | import("long").Long) => import("long").Long;
                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => import("long").Long;
                        toString: (radix?: number) => string;
                        toUnsigned: () => import("long").Long;
                        xor: (other: string | number | import("long").Long) => import("long").Long;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                    nanos?: number;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[] & ({
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["periodSpendLimit"], keyof {
                    denom?: string;
                    amount?: string;
                }[]>, never>;
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[] & ({
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["periodCanSpend"], keyof {
                    denom?: string;
                    amount?: string;
                }[]>, never>;
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                } & {
                    seconds?: string | number | (import("long").Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | import("long").Long) => import("long").Long;
                        and: (other: string | number | import("long").Long) => import("long").Long;
                        compare: (other: string | number | import("long").Long) => number;
                        comp: (other: string | number | import("long").Long) => number;
                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                        equals: (other: string | number | import("long").Long) => boolean;
                        eq: (other: string | number | import("long").Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | import("long").Long) => boolean;
                        gt: (other: string | number | import("long").Long) => boolean;
                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        gte: (other: string | number | import("long").Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | import("long").Long) => boolean;
                        lt: (other: string | number | import("long").Long) => boolean;
                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        lte: (other: string | number | import("long").Long) => boolean;
                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                        mod: (other: string | number | import("long").Long) => import("long").Long;
                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                        negate: () => import("long").Long;
                        neg: () => import("long").Long;
                        not: () => import("long").Long;
                        notEquals: (other: string | number | import("long").Long) => boolean;
                        neq: (other: string | number | import("long").Long) => boolean;
                        or: (other: string | number | import("long").Long) => import("long").Long;
                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                        shl: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                        shr: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                        shru: (numBits: number | import("long").Long) => import("long").Long;
                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => import("long").Long;
                        toString: (radix?: number) => string;
                        toUnsigned: () => import("long").Long;
                        xor: (other: string | number | import("long").Long) => import("long").Long;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                    nanos?: number;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
            } & Record<Exclude<keyof I["allowances"][number]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | any;
                allowedMessages?: string[];
            } & {
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: ({
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } & {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } & {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["spendLimit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    } & {
                        seconds?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                        nanos?: number;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } & {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } & {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        } & {
                            seconds?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                            nanos?: number;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    } & {
                        seconds?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                        nanos?: number;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["periodCanSpend"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    } & {
                        seconds?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                        nanos?: number;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                    allowance?: {
                        $typeUrl?: "/google.protobuf.Any";
                        typeUrl?: string;
                        value?: Uint8Array;
                    } | {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } | {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                        basic?: {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        };
                        period?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                        periodSpendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        periodCanSpend?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        periodReset?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } | any;
                    allowedMessages?: string[];
                } & {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                    allowance?: ({
                        $typeUrl?: "/google.protobuf.Any";
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        $typeUrl?: "/google.protobuf.Any";
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } & {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        } & {
                            seconds?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                            nanos?: number;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                        basic?: {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        };
                        period?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                        periodSpendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        periodCanSpend?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        periodReset?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } & {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                        basic?: {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } & {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            } & {
                                seconds?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                nanos?: number;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                        period?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        } & {
                            seconds?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                            nanos?: number;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                        periodSpendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        periodCanSpend?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        periodReset?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        } & {
                            seconds?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                            nanos?: number;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                        $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                        allowance?: {
                            $typeUrl?: "/google.protobuf.Any";
                            typeUrl?: string;
                            value?: Uint8Array;
                        } | {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } | {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                            basic?: {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            };
                            period?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                            periodSpendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            periodCanSpend?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            periodReset?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } | any;
                        allowedMessages?: string[];
                    } & {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                        allowance?: ({
                            $typeUrl?: "/google.protobuf.Any";
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            $typeUrl?: "/google.protobuf.Any";
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } & {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            } & {
                                seconds?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                nanos?: number;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                            basic?: {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            };
                            period?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                            periodSpendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            periodCanSpend?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            periodReset?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } & {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                            basic?: {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } & {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                } & {
                                    seconds?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                    nanos?: number;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                            period?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            } & {
                                seconds?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                nanos?: number;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                            periodSpendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            periodCanSpend?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            periodReset?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            } & {
                                seconds?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                nanos?: number;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                            allowance?: {
                                $typeUrl?: "/google.protobuf.Any";
                                typeUrl?: string;
                                value?: Uint8Array;
                            } | {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } | {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                basic?: {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                };
                                period?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                                periodSpendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                periodCanSpend?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                periodReset?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } | any;
                            allowedMessages?: string[];
                        } & {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                            allowance?: ({
                                $typeUrl?: "/google.protobuf.Any";
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                $typeUrl?: "/google.protobuf.Any";
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } & {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                } & {
                                    seconds?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                    nanos?: number;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                basic?: {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                };
                                period?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                                periodSpendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                periodCanSpend?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                periodReset?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } & {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                basic?: {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } & {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[] & ({
                                        denom?: string;
                                        amount?: string;
                                    } & {
                                        denom?: string;
                                        amount?: string;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                        denom?: string;
                                        amount?: string;
                                    }[]>, never>;
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    } & {
                                        seconds?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                        nanos?: number;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                                period?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                } & {
                                    seconds?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                    nanos?: number;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                periodSpendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                periodCanSpend?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                periodReset?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                } & {
                                    seconds?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                    nanos?: number;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                allowance?: {
                                    $typeUrl?: "/google.protobuf.Any";
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } | {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } | {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                    basic?: {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    };
                                    period?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                    periodSpendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    periodCanSpend?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    periodReset?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } | any;
                                allowedMessages?: string[];
                            } & {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                allowance?: ({
                                    $typeUrl?: "/google.protobuf.Any";
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } & {
                                    $typeUrl?: "/google.protobuf.Any";
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } & {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[] & ({
                                        denom?: string;
                                        amount?: string;
                                    } & {
                                        denom?: string;
                                        amount?: string;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                        denom?: string;
                                        amount?: string;
                                    }[]>, never>;
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    } & {
                                        seconds?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                        nanos?: number;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                    basic?: {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    };
                                    period?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                    periodSpendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    periodCanSpend?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    periodReset?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } & {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                    basic?: {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } & {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[] & ({
                                            denom?: string;
                                            amount?: string;
                                        } & {
                                            denom?: string;
                                            amount?: string;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                            denom?: string;
                                            amount?: string;
                                        }[]>, never>;
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        } & {
                                            seconds?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                            nanos?: number;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                                    period?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    } & {
                                        seconds?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                        nanos?: number;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                    periodSpendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[] & ({
                                        denom?: string;
                                        amount?: string;
                                    } & {
                                        denom?: string;
                                        amount?: string;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                        denom?: string;
                                        amount?: string;
                                    }[]>, never>;
                                    periodCanSpend?: {
                                        denom?: string;
                                        amount?: string;
                                    }[] & ({
                                        denom?: string;
                                        amount?: string;
                                    } & {
                                        denom?: string;
                                        amount?: string;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                        denom?: string;
                                        amount?: string;
                                    }[]>, never>;
                                    periodReset?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    } & {
                                        seconds?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                        nanos?: number;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                    allowance?: {
                                        $typeUrl?: "/google.protobuf.Any";
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    } | {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } | {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                        basic?: {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        };
                                        period?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                        periodSpendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        periodCanSpend?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        periodReset?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } | any;
                                    allowedMessages?: string[];
                                } & {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                    allowance?: ({
                                        $typeUrl?: "/google.protobuf.Any";
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    } & {
                                        $typeUrl?: "/google.protobuf.Any";
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } & {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[] & ({
                                            denom?: string;
                                            amount?: string;
                                        } & {
                                            denom?: string;
                                            amount?: string;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                            denom?: string;
                                            amount?: string;
                                        }[]>, never>;
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        } & {
                                            seconds?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                            nanos?: number;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                        basic?: {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        };
                                        period?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                        periodSpendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        periodCanSpend?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        periodReset?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } & {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                        basic?: {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } & {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[] & ({
                                                denom?: string;
                                                amount?: string;
                                            } & {
                                                denom?: string;
                                                amount?: string;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                                denom?: string;
                                                amount?: string;
                                            }[]>, never>;
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            } & {
                                                seconds?: string | number | (import("long").Long & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                                nanos?: number;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                                        period?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        } & {
                                            seconds?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                            nanos?: number;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                        periodSpendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[] & ({
                                            denom?: string;
                                            amount?: string;
                                        } & {
                                            denom?: string;
                                            amount?: string;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                            denom?: string;
                                            amount?: string;
                                        }[]>, never>;
                                        periodCanSpend?: {
                                            denom?: string;
                                            amount?: string;
                                        }[] & ({
                                            denom?: string;
                                            amount?: string;
                                        } & {
                                            denom?: string;
                                            amount?: string;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                            denom?: string;
                                            amount?: string;
                                        }[]>, never>;
                                        periodReset?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        } & {
                                            seconds?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                            nanos?: number;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                        allowance?: {
                                            $typeUrl?: "/google.protobuf.Any";
                                            typeUrl?: string;
                                            value?: Uint8Array;
                                        } | {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } | {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                            basic?: {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            };
                                            period?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                            periodSpendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            periodCanSpend?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            periodReset?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } | any;
                                        allowedMessages?: string[];
                                    } & {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                        allowance?: ({
                                            $typeUrl?: "/google.protobuf.Any";
                                            typeUrl?: string;
                                            value?: Uint8Array;
                                        } & {
                                            $typeUrl?: "/google.protobuf.Any";
                                            typeUrl?: string;
                                            value?: Uint8Array;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } & {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[] & ({
                                                denom?: string;
                                                amount?: string;
                                            } & {
                                                denom?: string;
                                                amount?: string;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                                denom?: string;
                                                amount?: string;
                                            }[]>, never>;
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            } & {
                                                seconds?: string | number | (import("long").Long & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                                nanos?: number;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                            basic?: {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            };
                                            period?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                            periodSpendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            periodCanSpend?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            periodReset?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } & {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                            basic?: {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } & {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[] & ({
                                                    denom?: string;
                                                    amount?: string;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                                    denom?: string;
                                                    amount?: string;
                                                }[]>, never>;
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                                            period?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            } & {
                                                seconds?: string | number | (import("long").Long & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                                nanos?: number;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                            periodSpendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[] & ({
                                                denom?: string;
                                                amount?: string;
                                            } & {
                                                denom?: string;
                                                amount?: string;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                                denom?: string;
                                                amount?: string;
                                            }[]>, never>;
                                            periodCanSpend?: {
                                                denom?: string;
                                                amount?: string;
                                            }[] & ({
                                                denom?: string;
                                                amount?: string;
                                            } & {
                                                denom?: string;
                                                amount?: string;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                                denom?: string;
                                                amount?: string;
                                            }[]>, never>;
                                            periodReset?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            } & {
                                                seconds?: string | number | (import("long").Long & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                                nanos?: number;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                            allowance?: {
                                                $typeUrl?: "/google.protobuf.Any";
                                                typeUrl?: string;
                                                value?: Uint8Array;
                                            } | {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } | {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                basic?: {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                };
                                                period?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                                periodSpendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                periodCanSpend?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                periodReset?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } | any;
                                            allowedMessages?: string[];
                                        } & {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                            allowance?: ({
                                                $typeUrl?: "/google.protobuf.Any";
                                                typeUrl?: string;
                                                value?: Uint8Array;
                                            } & {
                                                $typeUrl?: "/google.protobuf.Any";
                                                typeUrl?: string;
                                                value?: Uint8Array;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } & {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[] & ({
                                                    denom?: string;
                                                    amount?: string;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                                    denom?: string;
                                                    amount?: string;
                                                }[]>, never>;
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                basic?: {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                };
                                                period?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                                periodSpendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                periodCanSpend?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                periodReset?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } & {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                basic?: {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                                                period?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                                periodSpendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[] & ({
                                                    denom?: string;
                                                    amount?: string;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                                    denom?: string;
                                                    amount?: string;
                                                }[]>, never>;
                                                periodCanSpend?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[] & ({
                                                    denom?: string;
                                                    amount?: string;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                                    denom?: string;
                                                    amount?: string;
                                                }[]>, never>;
                                                periodReset?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                                allowance?: {
                                                    $typeUrl?: "/google.protobuf.Any";
                                                    typeUrl?: string;
                                                    value?: Uint8Array;
                                                } | {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } | {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                    basic?: {
                                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                        spendLimit?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        expiration?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                    };
                                                    period?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                    periodSpendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    periodCanSpend?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    periodReset?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } | any;
                                                allowedMessages?: string[];
                                            } & {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                                allowance?: ({
                                                    $typeUrl?: "/google.protobuf.Any";
                                                    typeUrl?: string;
                                                    value?: Uint8Array;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                    basic?: {
                                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                        spendLimit?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        expiration?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                    };
                                                    period?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                    periodSpendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    periodCanSpend?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    periodReset?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                                    allowance?: {
                                                        $typeUrl?: "/google.protobuf.Any";
                                                        typeUrl?: string;
                                                        value?: Uint8Array;
                                                    } | {
                                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                        spendLimit?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        expiration?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                    } | {
                                                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                        basic?: {
                                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                            spendLimit?: {
                                                                denom?: string;
                                                                amount?: string;
                                                            }[];
                                                            expiration?: {
                                                                seconds?: string | number | import("long").Long;
                                                                nanos?: number;
                                                            };
                                                        };
                                                        period?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                        periodSpendLimit?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        periodCanSpend?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        periodReset?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                    } | any;
                                                    allowedMessages?: string[];
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                                                allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                                            allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                                        allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                                    allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                                allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                            allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                        allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                    allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowedMessages"], keyof string[]>, never>;
            } & Record<Exclude<keyof I["allowances"][number]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
        } & Record<Exclude<keyof I["allowances"][number], keyof Grant>, never>)[] & Record<Exclude<keyof I["allowances"], keyof {
            granter?: string;
            grantee?: string;
            allowance?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                };
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | any;
                allowedMessages?: string[];
            };
        }[]>, never>;
        pagination?: {
            nextKey?: Uint8Array;
            total?: string | number | import("long").Long;
        } & {
            nextKey?: Uint8Array;
            total?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["pagination"]["total"], keyof import("long").Long>, never>);
        } & Record<Exclude<keyof I["pagination"], keyof PageResponse>, never>;
    } & Record<Exclude<keyof I, keyof QueryAllowancesResponse>, never>>(object: I): QueryAllowancesResponse;
    fromSDK(object: QueryAllowancesResponseSDKType): QueryAllowancesResponse;
    toSDK(message: QueryAllowancesResponse): QueryAllowancesResponseSDKType;
    fromAmino(object: QueryAllowancesResponseAmino): QueryAllowancesResponse;
    toAmino(message: QueryAllowancesResponse): QueryAllowancesResponseAmino;
    fromAminoMsg(object: QueryAllowancesResponseAminoMsg): QueryAllowancesResponse;
    toAminoMsg(message: QueryAllowancesResponse): QueryAllowancesResponseAminoMsg;
    fromProtoMsg(message: QueryAllowancesResponseProtoMsg): QueryAllowancesResponse;
    toProto(message: QueryAllowancesResponse): Uint8Array;
    toProtoMsg(message: QueryAllowancesResponse): QueryAllowancesResponseProtoMsg;
};
export declare const QueryAllowancesByGranterRequest: {
    typeUrl: string;
    encode(message: QueryAllowancesByGranterRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllowancesByGranterRequest;
    fromJSON(object: any): QueryAllowancesByGranterRequest;
    toJSON(message: QueryAllowancesByGranterRequest): unknown;
    fromPartial<I extends {
        granter?: string;
        pagination?: {
            key?: Uint8Array;
            offset?: string | number | import("long").Long;
            limit?: string | number | import("long").Long;
            countTotal?: boolean;
            reverse?: boolean;
        };
    } & {
        granter?: string;
        pagination?: {
            key?: Uint8Array;
            offset?: string | number | import("long").Long;
            limit?: string | number | import("long").Long;
            countTotal?: boolean;
            reverse?: boolean;
        } & {
            key?: Uint8Array;
            offset?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["pagination"]["offset"], keyof import("long").Long>, never>);
            limit?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["pagination"]["limit"], keyof import("long").Long>, never>);
            countTotal?: boolean;
            reverse?: boolean;
        } & Record<Exclude<keyof I["pagination"], keyof PageRequest>, never>;
    } & Record<Exclude<keyof I, keyof QueryAllowancesByGranterRequest>, never>>(object: I): QueryAllowancesByGranterRequest;
    fromSDK(object: QueryAllowancesByGranterRequestSDKType): QueryAllowancesByGranterRequest;
    toSDK(message: QueryAllowancesByGranterRequest): QueryAllowancesByGranterRequestSDKType;
    fromAmino(object: QueryAllowancesByGranterRequestAmino): QueryAllowancesByGranterRequest;
    toAmino(message: QueryAllowancesByGranterRequest): QueryAllowancesByGranterRequestAmino;
    fromAminoMsg(object: QueryAllowancesByGranterRequestAminoMsg): QueryAllowancesByGranterRequest;
    toAminoMsg(message: QueryAllowancesByGranterRequest): QueryAllowancesByGranterRequestAminoMsg;
    fromProtoMsg(message: QueryAllowancesByGranterRequestProtoMsg): QueryAllowancesByGranterRequest;
    toProto(message: QueryAllowancesByGranterRequest): Uint8Array;
    toProtoMsg(message: QueryAllowancesByGranterRequest): QueryAllowancesByGranterRequestProtoMsg;
};
export declare const QueryAllowancesByGranterResponse: {
    typeUrl: string;
    encode(message: QueryAllowancesByGranterResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllowancesByGranterResponse;
    fromJSON(object: any): QueryAllowancesByGranterResponse;
    toJSON(message: QueryAllowancesByGranterResponse): unknown;
    fromPartial<I extends {
        allowances?: {
            granter?: string;
            grantee?: string;
            allowance?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                };
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | any;
                allowedMessages?: string[];
            };
        }[];
        pagination?: {
            nextKey?: Uint8Array;
            total?: string | number | import("long").Long;
        };
    } & {
        allowances?: {
            granter?: string;
            grantee?: string;
            allowance?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                };
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | any;
                allowedMessages?: string[];
            };
        }[] & ({
            granter?: string;
            grantee?: string;
            allowance?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                };
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | any;
                allowedMessages?: string[];
            };
        } & {
            granter?: string;
            grantee?: string;
            allowance?: ({
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } & {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } & Record<Exclude<keyof I["allowances"][number]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } & {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[] & ({
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["spendLimit"], keyof {
                    denom?: string;
                    amount?: string;
                }[]>, never>;
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                } & {
                    seconds?: string | number | (import("long").Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | import("long").Long) => import("long").Long;
                        and: (other: string | number | import("long").Long) => import("long").Long;
                        compare: (other: string | number | import("long").Long) => number;
                        comp: (other: string | number | import("long").Long) => number;
                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                        equals: (other: string | number | import("long").Long) => boolean;
                        eq: (other: string | number | import("long").Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | import("long").Long) => boolean;
                        gt: (other: string | number | import("long").Long) => boolean;
                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        gte: (other: string | number | import("long").Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | import("long").Long) => boolean;
                        lt: (other: string | number | import("long").Long) => boolean;
                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        lte: (other: string | number | import("long").Long) => boolean;
                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                        mod: (other: string | number | import("long").Long) => import("long").Long;
                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                        negate: () => import("long").Long;
                        neg: () => import("long").Long;
                        not: () => import("long").Long;
                        notEquals: (other: string | number | import("long").Long) => boolean;
                        neq: (other: string | number | import("long").Long) => boolean;
                        or: (other: string | number | import("long").Long) => import("long").Long;
                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                        shl: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                        shr: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                        shru: (numBits: number | import("long").Long) => import("long").Long;
                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => import("long").Long;
                        toString: (radix?: number) => string;
                        toUnsigned: () => import("long").Long;
                        xor: (other: string | number | import("long").Long) => import("long").Long;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                    nanos?: number;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
            } & Record<Exclude<keyof I["allowances"][number]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                };
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } & {
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } & {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["basic"]["spendLimit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    } & {
                        seconds?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                        nanos?: number;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                } & {
                    seconds?: string | number | (import("long").Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | import("long").Long) => import("long").Long;
                        and: (other: string | number | import("long").Long) => import("long").Long;
                        compare: (other: string | number | import("long").Long) => number;
                        comp: (other: string | number | import("long").Long) => number;
                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                        equals: (other: string | number | import("long").Long) => boolean;
                        eq: (other: string | number | import("long").Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | import("long").Long) => boolean;
                        gt: (other: string | number | import("long").Long) => boolean;
                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        gte: (other: string | number | import("long").Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | import("long").Long) => boolean;
                        lt: (other: string | number | import("long").Long) => boolean;
                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        lte: (other: string | number | import("long").Long) => boolean;
                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                        mod: (other: string | number | import("long").Long) => import("long").Long;
                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                        negate: () => import("long").Long;
                        neg: () => import("long").Long;
                        not: () => import("long").Long;
                        notEquals: (other: string | number | import("long").Long) => boolean;
                        neq: (other: string | number | import("long").Long) => boolean;
                        or: (other: string | number | import("long").Long) => import("long").Long;
                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                        shl: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                        shr: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                        shru: (numBits: number | import("long").Long) => import("long").Long;
                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => import("long").Long;
                        toString: (radix?: number) => string;
                        toUnsigned: () => import("long").Long;
                        xor: (other: string | number | import("long").Long) => import("long").Long;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                    nanos?: number;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[] & ({
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["periodSpendLimit"], keyof {
                    denom?: string;
                    amount?: string;
                }[]>, never>;
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[] & ({
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["periodCanSpend"], keyof {
                    denom?: string;
                    amount?: string;
                }[]>, never>;
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                } & {
                    seconds?: string | number | (import("long").Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | import("long").Long) => import("long").Long;
                        and: (other: string | number | import("long").Long) => import("long").Long;
                        compare: (other: string | number | import("long").Long) => number;
                        comp: (other: string | number | import("long").Long) => number;
                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                        equals: (other: string | number | import("long").Long) => boolean;
                        eq: (other: string | number | import("long").Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | import("long").Long) => boolean;
                        gt: (other: string | number | import("long").Long) => boolean;
                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        gte: (other: string | number | import("long").Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | import("long").Long) => boolean;
                        lt: (other: string | number | import("long").Long) => boolean;
                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        lte: (other: string | number | import("long").Long) => boolean;
                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                        mod: (other: string | number | import("long").Long) => import("long").Long;
                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                        negate: () => import("long").Long;
                        neg: () => import("long").Long;
                        not: () => import("long").Long;
                        notEquals: (other: string | number | import("long").Long) => boolean;
                        neq: (other: string | number | import("long").Long) => boolean;
                        or: (other: string | number | import("long").Long) => import("long").Long;
                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                        shl: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                        shr: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                        shru: (numBits: number | import("long").Long) => import("long").Long;
                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => import("long").Long;
                        toString: (radix?: number) => string;
                        toUnsigned: () => import("long").Long;
                        xor: (other: string | number | import("long").Long) => import("long").Long;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                    nanos?: number;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
            } & Record<Exclude<keyof I["allowances"][number]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | any;
                allowedMessages?: string[];
            } & {
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: ({
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } & {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } & {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["spendLimit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    } & {
                        seconds?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                        nanos?: number;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } & {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } & {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        } & {
                            seconds?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                            nanos?: number;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    } & {
                        seconds?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                        nanos?: number;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["periodCanSpend"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    } & {
                        seconds?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                        nanos?: number;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                    allowance?: {
                        $typeUrl?: "/google.protobuf.Any";
                        typeUrl?: string;
                        value?: Uint8Array;
                    } | {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } | {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                        basic?: {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        };
                        period?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                        periodSpendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        periodCanSpend?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        periodReset?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } | any;
                    allowedMessages?: string[];
                } & {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                    allowance?: ({
                        $typeUrl?: "/google.protobuf.Any";
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        $typeUrl?: "/google.protobuf.Any";
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } & {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        } & {
                            seconds?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                            nanos?: number;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                        basic?: {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        };
                        period?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                        periodSpendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        periodCanSpend?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        periodReset?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    } & {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                        basic?: {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } & {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            } & {
                                seconds?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                nanos?: number;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                        period?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        } & {
                            seconds?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                            nanos?: number;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                        periodSpendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        periodCanSpend?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        periodReset?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        } & {
                            seconds?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                            nanos?: number;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                        $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                        allowance?: {
                            $typeUrl?: "/google.protobuf.Any";
                            typeUrl?: string;
                            value?: Uint8Array;
                        } | {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } | {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                            basic?: {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            };
                            period?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                            periodSpendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            periodCanSpend?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            periodReset?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } | any;
                        allowedMessages?: string[];
                    } & {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                        allowance?: ({
                            $typeUrl?: "/google.protobuf.Any";
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            $typeUrl?: "/google.protobuf.Any";
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } & {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            expiration?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            } & {
                                seconds?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                nanos?: number;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                            basic?: {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            };
                            period?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                            periodSpendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            periodCanSpend?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            periodReset?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            };
                        } & {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                            basic?: {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } & {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                } & {
                                    seconds?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                    nanos?: number;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                            period?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            } & {
                                seconds?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                nanos?: number;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                            periodSpendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            periodCanSpend?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            periodReset?: {
                                seconds?: string | number | import("long").Long;
                                nanos?: number;
                            } & {
                                seconds?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                nanos?: number;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                            allowance?: {
                                $typeUrl?: "/google.protobuf.Any";
                                typeUrl?: string;
                                value?: Uint8Array;
                            } | {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } | {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                basic?: {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                };
                                period?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                                periodSpendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                periodCanSpend?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                periodReset?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } | any;
                            allowedMessages?: string[];
                        } & {
                            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                            allowance?: ({
                                $typeUrl?: "/google.protobuf.Any";
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                $typeUrl?: "/google.protobuf.Any";
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } & {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                spendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                expiration?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                } & {
                                    seconds?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                    nanos?: number;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                basic?: {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                };
                                period?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                                periodSpendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                periodCanSpend?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                periodReset?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                };
                            } & {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                basic?: {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } & {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[] & ({
                                        denom?: string;
                                        amount?: string;
                                    } & {
                                        denom?: string;
                                        amount?: string;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                        denom?: string;
                                        amount?: string;
                                    }[]>, never>;
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    } & {
                                        seconds?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                        nanos?: number;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                                period?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                } & {
                                    seconds?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                    nanos?: number;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                periodSpendLimit?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                periodCanSpend?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                periodReset?: {
                                    seconds?: string | number | import("long").Long;
                                    nanos?: number;
                                } & {
                                    seconds?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                    nanos?: number;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                allowance?: {
                                    $typeUrl?: "/google.protobuf.Any";
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } | {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } | {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                    basic?: {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    };
                                    period?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                    periodSpendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    periodCanSpend?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    periodReset?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } | any;
                                allowedMessages?: string[];
                            } & {
                                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                allowance?: ({
                                    $typeUrl?: "/google.protobuf.Any";
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } & {
                                    $typeUrl?: "/google.protobuf.Any";
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } & {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                    spendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[] & ({
                                        denom?: string;
                                        amount?: string;
                                    } & {
                                        denom?: string;
                                        amount?: string;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                        denom?: string;
                                        amount?: string;
                                    }[]>, never>;
                                    expiration?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    } & {
                                        seconds?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                        nanos?: number;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                    basic?: {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    };
                                    period?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                    periodSpendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    periodCanSpend?: {
                                        denom?: string;
                                        amount?: string;
                                    }[];
                                    periodReset?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    };
                                } & {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                    basic?: {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } & {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[] & ({
                                            denom?: string;
                                            amount?: string;
                                        } & {
                                            denom?: string;
                                            amount?: string;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                            denom?: string;
                                            amount?: string;
                                        }[]>, never>;
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        } & {
                                            seconds?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                            nanos?: number;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                                    period?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    } & {
                                        seconds?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                        nanos?: number;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                    periodSpendLimit?: {
                                        denom?: string;
                                        amount?: string;
                                    }[] & ({
                                        denom?: string;
                                        amount?: string;
                                    } & {
                                        denom?: string;
                                        amount?: string;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                        denom?: string;
                                        amount?: string;
                                    }[]>, never>;
                                    periodCanSpend?: {
                                        denom?: string;
                                        amount?: string;
                                    }[] & ({
                                        denom?: string;
                                        amount?: string;
                                    } & {
                                        denom?: string;
                                        amount?: string;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                        denom?: string;
                                        amount?: string;
                                    }[]>, never>;
                                    periodReset?: {
                                        seconds?: string | number | import("long").Long;
                                        nanos?: number;
                                    } & {
                                        seconds?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                        nanos?: number;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                    allowance?: {
                                        $typeUrl?: "/google.protobuf.Any";
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    } | {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } | {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                        basic?: {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        };
                                        period?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                        periodSpendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        periodCanSpend?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        periodReset?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } | any;
                                    allowedMessages?: string[];
                                } & {
                                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                    allowance?: ({
                                        $typeUrl?: "/google.protobuf.Any";
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    } & {
                                        $typeUrl?: "/google.protobuf.Any";
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } & {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                        spendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[] & ({
                                            denom?: string;
                                            amount?: string;
                                        } & {
                                            denom?: string;
                                            amount?: string;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                            denom?: string;
                                            amount?: string;
                                        }[]>, never>;
                                        expiration?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        } & {
                                            seconds?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                            nanos?: number;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                        basic?: {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        };
                                        period?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                        periodSpendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        periodCanSpend?: {
                                            denom?: string;
                                            amount?: string;
                                        }[];
                                        periodReset?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        };
                                    } & {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                        basic?: {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } & {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[] & ({
                                                denom?: string;
                                                amount?: string;
                                            } & {
                                                denom?: string;
                                                amount?: string;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                                denom?: string;
                                                amount?: string;
                                            }[]>, never>;
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            } & {
                                                seconds?: string | number | (import("long").Long & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                                nanos?: number;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                                        period?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        } & {
                                            seconds?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                            nanos?: number;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                        periodSpendLimit?: {
                                            denom?: string;
                                            amount?: string;
                                        }[] & ({
                                            denom?: string;
                                            amount?: string;
                                        } & {
                                            denom?: string;
                                            amount?: string;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                            denom?: string;
                                            amount?: string;
                                        }[]>, never>;
                                        periodCanSpend?: {
                                            denom?: string;
                                            amount?: string;
                                        }[] & ({
                                            denom?: string;
                                            amount?: string;
                                        } & {
                                            denom?: string;
                                            amount?: string;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                            denom?: string;
                                            amount?: string;
                                        }[]>, never>;
                                        periodReset?: {
                                            seconds?: string | number | import("long").Long;
                                            nanos?: number;
                                        } & {
                                            seconds?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                            nanos?: number;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                        allowance?: {
                                            $typeUrl?: "/google.protobuf.Any";
                                            typeUrl?: string;
                                            value?: Uint8Array;
                                        } | {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } | {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                            basic?: {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            };
                                            period?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                            periodSpendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            periodCanSpend?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            periodReset?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } | any;
                                        allowedMessages?: string[];
                                    } & {
                                        $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                        allowance?: ({
                                            $typeUrl?: "/google.protobuf.Any";
                                            typeUrl?: string;
                                            value?: Uint8Array;
                                        } & {
                                            $typeUrl?: "/google.protobuf.Any";
                                            typeUrl?: string;
                                            value?: Uint8Array;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } & {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                            spendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[] & ({
                                                denom?: string;
                                                amount?: string;
                                            } & {
                                                denom?: string;
                                                amount?: string;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                                denom?: string;
                                                amount?: string;
                                            }[]>, never>;
                                            expiration?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            } & {
                                                seconds?: string | number | (import("long").Long & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                                                nanos?: number;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                            basic?: {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            };
                                            period?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                            periodSpendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            periodCanSpend?: {
                                                denom?: string;
                                                amount?: string;
                                            }[];
                                            periodReset?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            };
                                        } & {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                            basic?: {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } & {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[] & ({
                                                    denom?: string;
                                                    amount?: string;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["spendLimit"], keyof {
                                                    denom?: string;
                                                    amount?: string;
                                                }[]>, never>;
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                                            period?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            } & {
                                                seconds?: string | number | (import("long").Long & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"]["seconds"], keyof import("long").Long>, never>);
                                                nanos?: number;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                            periodSpendLimit?: {
                                                denom?: string;
                                                amount?: string;
                                            }[] & ({
                                                denom?: string;
                                                amount?: string;
                                            } & {
                                                denom?: string;
                                                amount?: string;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                                denom?: string;
                                                amount?: string;
                                            }[]>, never>;
                                            periodCanSpend?: {
                                                denom?: string;
                                                amount?: string;
                                            }[] & ({
                                                denom?: string;
                                                amount?: string;
                                            } & {
                                                denom?: string;
                                                amount?: string;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                                denom?: string;
                                                amount?: string;
                                            }[]>, never>;
                                            periodReset?: {
                                                seconds?: string | number | import("long").Long;
                                                nanos?: number;
                                            } & {
                                                seconds?: string | number | (import("long").Long & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"]["seconds"], keyof import("long").Long>, never>);
                                                nanos?: number;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                            allowance?: {
                                                $typeUrl?: "/google.protobuf.Any";
                                                typeUrl?: string;
                                                value?: Uint8Array;
                                            } | {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } | {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                basic?: {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                };
                                                period?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                                periodSpendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                periodCanSpend?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                periodReset?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } | any;
                                            allowedMessages?: string[];
                                        } & {
                                            $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                            allowance?: ({
                                                $typeUrl?: "/google.protobuf.Any";
                                                typeUrl?: string;
                                                value?: Uint8Array;
                                            } & {
                                                $typeUrl?: "/google.protobuf.Any";
                                                typeUrl?: string;
                                                value?: Uint8Array;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } & {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                spendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[] & ({
                                                    denom?: string;
                                                    amount?: string;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["spendLimit"], keyof {
                                                    denom?: string;
                                                    amount?: string;
                                                }[]>, never>;
                                                expiration?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                basic?: {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                };
                                                period?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                                periodSpendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                periodCanSpend?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[];
                                                periodReset?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                };
                                            } & {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                basic?: {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["basic"], keyof import("./feegrant").BasicAllowance>, never>;
                                                period?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["period"], keyof import("../../../google/protobuf/duration").Duration>, never>;
                                                periodSpendLimit?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[] & ({
                                                    denom?: string;
                                                    amount?: string;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodSpendLimit"], keyof {
                                                    denom?: string;
                                                    amount?: string;
                                                }[]>, never>;
                                                periodCanSpend?: {
                                                    denom?: string;
                                                    amount?: string;
                                                }[] & ({
                                                    denom?: string;
                                                    amount?: string;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodCanSpend"], keyof {
                                                    denom?: string;
                                                    amount?: string;
                                                }[]>, never>;
                                                periodReset?: {
                                                    seconds?: string | number | import("long").Long;
                                                    nanos?: number;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["periodReset"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                                allowance?: {
                                                    $typeUrl?: "/google.protobuf.Any";
                                                    typeUrl?: string;
                                                    value?: Uint8Array;
                                                } | {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } | {
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                    basic?: {
                                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                        spendLimit?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        expiration?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                    };
                                                    period?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                    periodSpendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    periodCanSpend?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    periodReset?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } | any;
                                                allowedMessages?: string[];
                                            } & {
                                                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                                allowance?: ({
                                                    $typeUrl?: "/google.protobuf.Any";
                                                    typeUrl?: string;
                                                    value?: Uint8Array;
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                    spendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    expiration?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").BasicAllowance>, never>) | ({
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                    basic?: {
                                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                        spendLimit?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        expiration?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                    };
                                                    period?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                    periodSpendLimit?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    periodCanSpend?: {
                                                        denom?: string;
                                                        amount?: string;
                                                    }[];
                                                    periodReset?: {
                                                        seconds?: string | number | import("long").Long;
                                                        nanos?: number;
                                                    };
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").PeriodicAllowance>, never>) | ({
                                                    $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                                                    allowance?: {
                                                        $typeUrl?: "/google.protobuf.Any";
                                                        typeUrl?: string;
                                                        value?: Uint8Array;
                                                    } | {
                                                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                        spendLimit?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        expiration?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                    } | {
                                                        $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                                                        basic?: {
                                                            $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                                                            spendLimit?: {
                                                                denom?: string;
                                                                amount?: string;
                                                            }[];
                                                            expiration?: {
                                                                seconds?: string | number | import("long").Long;
                                                                nanos?: number;
                                                            };
                                                        };
                                                        period?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                        periodSpendLimit?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        periodCanSpend?: {
                                                            denom?: string;
                                                            amount?: string;
                                                        }[];
                                                        periodReset?: {
                                                            seconds?: string | number | import("long").Long;
                                                            nanos?: number;
                                                        };
                                                    } | any;
                                                    allowedMessages?: string[];
                                                } & any & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                                                allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                                            allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                                        allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                                    allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                                allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                            } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                            allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                        } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                        allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                    } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                    allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"]["allowedMessages"], keyof string[]>, never>;
                } & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
                allowedMessages?: string[] & string[] & Record<Exclude<keyof I["allowances"][number]["allowance"]["allowedMessages"], keyof string[]>, never>;
            } & Record<Exclude<keyof I["allowances"][number]["allowance"], keyof import("./feegrant").AllowedMsgAllowance>, never>);
        } & Record<Exclude<keyof I["allowances"][number], keyof Grant>, never>)[] & Record<Exclude<keyof I["allowances"], keyof {
            granter?: string;
            grantee?: string;
            allowance?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                expiration?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                basic?: {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                };
                period?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
                periodSpendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodCanSpend?: {
                    denom?: string;
                    amount?: string;
                }[];
                periodReset?: {
                    seconds?: string | number | import("long").Long;
                    nanos?: number;
                };
            } | {
                $typeUrl?: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance";
                allowance?: {
                    $typeUrl?: "/google.protobuf.Any";
                    typeUrl?: string;
                    value?: Uint8Array;
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | {
                    $typeUrl?: "/cosmos.feegrant.v1beta1.PeriodicAllowance";
                    basic?: {
                        $typeUrl?: "/cosmos.feegrant.v1beta1.BasicAllowance";
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: {
                            seconds?: string | number | import("long").Long;
                            nanos?: number;
                        };
                    };
                    period?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: {
                        seconds?: string | number | import("long").Long;
                        nanos?: number;
                    };
                } | any;
                allowedMessages?: string[];
            };
        }[]>, never>;
        pagination?: {
            nextKey?: Uint8Array;
            total?: string | number | import("long").Long;
        } & {
            nextKey?: Uint8Array;
            total?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["pagination"]["total"], keyof import("long").Long>, never>);
        } & Record<Exclude<keyof I["pagination"], keyof PageResponse>, never>;
    } & Record<Exclude<keyof I, keyof QueryAllowancesByGranterResponse>, never>>(object: I): QueryAllowancesByGranterResponse;
    fromSDK(object: QueryAllowancesByGranterResponseSDKType): QueryAllowancesByGranterResponse;
    toSDK(message: QueryAllowancesByGranterResponse): QueryAllowancesByGranterResponseSDKType;
    fromAmino(object: QueryAllowancesByGranterResponseAmino): QueryAllowancesByGranterResponse;
    toAmino(message: QueryAllowancesByGranterResponse): QueryAllowancesByGranterResponseAmino;
    fromAminoMsg(object: QueryAllowancesByGranterResponseAminoMsg): QueryAllowancesByGranterResponse;
    toAminoMsg(message: QueryAllowancesByGranterResponse): QueryAllowancesByGranterResponseAminoMsg;
    fromProtoMsg(message: QueryAllowancesByGranterResponseProtoMsg): QueryAllowancesByGranterResponse;
    toProto(message: QueryAllowancesByGranterResponse): Uint8Array;
    toProtoMsg(message: QueryAllowancesByGranterResponse): QueryAllowancesByGranterResponseProtoMsg;
};
/** Query defines the gRPC querier service. */
export interface Query {
    /** Allowance returns fee granted to the grantee by the granter. */
    Allowance(request: QueryAllowanceRequest): Promise<QueryAllowanceResponse>;
    /** Allowances returns all the grants for address. */
    Allowances(request: QueryAllowancesRequest): Promise<QueryAllowancesResponse>;
    /**
     * AllowancesByGranter returns all the grants given by an address
     *
     * Since: cosmos-sdk 0.46
     */
    AllowancesByGranter(request: QueryAllowancesByGranterRequest): Promise<QueryAllowancesByGranterResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Allowance(request: QueryAllowanceRequest): Promise<QueryAllowanceResponse>;
    Allowances(request: QueryAllowancesRequest): Promise<QueryAllowancesResponse>;
    AllowancesByGranter(request: QueryAllowancesByGranterRequest): Promise<QueryAllowancesByGranterResponse>;
}
