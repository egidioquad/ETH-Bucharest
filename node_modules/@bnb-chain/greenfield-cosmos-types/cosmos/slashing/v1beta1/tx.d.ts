import { Params, ParamsAmino, ParamsSDKType } from "./slashing";
import * as _m0 from "protobufjs/minimal";
import { Rpc } from "../../../helpers";
export declare const protobufPackage = "cosmos.slashing.v1beta1";
/** MsgUnjail defines the Msg/Unjail request type */
export interface MsgUnjail {
    validatorAddr: string;
}
export interface MsgUnjailProtoMsg {
    typeUrl: "/cosmos.slashing.v1beta1.MsgUnjail";
    value: Uint8Array;
}
/** MsgUnjail defines the Msg/Unjail request type */
export interface MsgUnjailAmino {
    validator_addr: string;
}
export interface MsgUnjailAminoMsg {
    type: "cosmos-sdk/MsgUnjail";
    value: MsgUnjailAmino;
}
/** MsgUnjail defines the Msg/Unjail request type */
export interface MsgUnjailSDKType {
    validator_addr: string;
}
/** MsgUnjailResponse defines the Msg/Unjail response type */
export interface MsgUnjailResponse {
}
export interface MsgUnjailResponseProtoMsg {
    typeUrl: "/cosmos.slashing.v1beta1.MsgUnjailResponse";
    value: Uint8Array;
}
/** MsgUnjailResponse defines the Msg/Unjail response type */
export interface MsgUnjailResponseAmino {
}
export interface MsgUnjailResponseAminoMsg {
    type: "cosmos-sdk/MsgUnjailResponse";
    value: MsgUnjailResponseAmino;
}
/** MsgUnjailResponse defines the Msg/Unjail response type */
export interface MsgUnjailResponseSDKType {
}
/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParams {
    /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
    authority: string;
    /**
     * params defines the x/slashing parameters to update.
     *
     * NOTE: All parameters must be supplied.
     */
    params: Params;
}
export interface MsgUpdateParamsProtoMsg {
    typeUrl: "/cosmos.slashing.v1beta1.MsgUpdateParams";
    value: Uint8Array;
}
/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParamsAmino {
    /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
    authority?: string;
    /**
     * params defines the x/slashing parameters to update.
     *
     * NOTE: All parameters must be supplied.
     */
    params: ParamsAmino;
}
export interface MsgUpdateParamsAminoMsg {
    type: "cosmos-sdk/x/slashing/MsgUpdateParams";
    value: MsgUpdateParamsAmino;
}
/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParamsSDKType {
    authority: string;
    params: ParamsSDKType;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParamsResponse {
}
export interface MsgUpdateParamsResponseProtoMsg {
    typeUrl: "/cosmos.slashing.v1beta1.MsgUpdateParamsResponse";
    value: Uint8Array;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParamsResponseAmino {
}
export interface MsgUpdateParamsResponseAminoMsg {
    type: "cosmos-sdk/MsgUpdateParamsResponse";
    value: MsgUpdateParamsResponseAmino;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParamsResponseSDKType {
}
/** MsgImpeach defines the Msg/Impeach request type */
export interface MsgImpeach {
    from: string;
    validatorAddress: string;
}
export interface MsgImpeachProtoMsg {
    typeUrl: "/cosmos.slashing.v1beta1.MsgImpeach";
    value: Uint8Array;
}
/** MsgImpeach defines the Msg/Impeach request type */
export interface MsgImpeachAmino {
    from?: string;
    validator_address?: string;
}
export interface MsgImpeachAminoMsg {
    type: "cosmos-sdk/MsgImpeach";
    value: MsgImpeachAmino;
}
/** MsgImpeach defines the Msg/Impeach request type */
export interface MsgImpeachSDKType {
    from: string;
    validator_address: string;
}
/** MsgImpeachResponse defines the Msg/Impeach response type. */
export interface MsgImpeachResponse {
}
export interface MsgImpeachResponseProtoMsg {
    typeUrl: "/cosmos.slashing.v1beta1.MsgImpeachResponse";
    value: Uint8Array;
}
/** MsgImpeachResponse defines the Msg/Impeach response type. */
export interface MsgImpeachResponseAmino {
}
export interface MsgImpeachResponseAminoMsg {
    type: "cosmos-sdk/MsgImpeachResponse";
    value: MsgImpeachResponseAmino;
}
/** MsgImpeachResponse defines the Msg/Impeach response type. */
export interface MsgImpeachResponseSDKType {
}
export declare const MsgUnjail: {
    typeUrl: string;
    encode(message: MsgUnjail, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUnjail;
    fromJSON(object: any): MsgUnjail;
    toJSON(message: MsgUnjail): unknown;
    fromPartial<I extends {
        validatorAddr?: string;
    } & {
        validatorAddr?: string;
    } & Record<Exclude<keyof I, "validatorAddr">, never>>(object: I): MsgUnjail;
    fromSDK(object: MsgUnjailSDKType): MsgUnjail;
    toSDK(message: MsgUnjail): MsgUnjailSDKType;
    fromAmino(object: MsgUnjailAmino): MsgUnjail;
    toAmino(message: MsgUnjail): MsgUnjailAmino;
    fromAminoMsg(object: MsgUnjailAminoMsg): MsgUnjail;
    toAminoMsg(message: MsgUnjail): MsgUnjailAminoMsg;
    fromProtoMsg(message: MsgUnjailProtoMsg): MsgUnjail;
    toProto(message: MsgUnjail): Uint8Array;
    toProtoMsg(message: MsgUnjail): MsgUnjailProtoMsg;
};
export declare const MsgUnjailResponse: {
    typeUrl: string;
    encode(_: MsgUnjailResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUnjailResponse;
    fromJSON(_: any): MsgUnjailResponse;
    toJSON(_: MsgUnjailResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgUnjailResponse;
    fromSDK(_: MsgUnjailResponseSDKType): MsgUnjailResponse;
    toSDK(_: MsgUnjailResponse): MsgUnjailResponseSDKType;
    fromAmino(_: MsgUnjailResponseAmino): MsgUnjailResponse;
    toAmino(_: MsgUnjailResponse): MsgUnjailResponseAmino;
    fromAminoMsg(object: MsgUnjailResponseAminoMsg): MsgUnjailResponse;
    toAminoMsg(message: MsgUnjailResponse): MsgUnjailResponseAminoMsg;
    fromProtoMsg(message: MsgUnjailResponseProtoMsg): MsgUnjailResponse;
    toProto(message: MsgUnjailResponse): Uint8Array;
    toProtoMsg(message: MsgUnjailResponse): MsgUnjailResponseProtoMsg;
};
export declare const MsgUpdateParams: {
    typeUrl: string;
    encode(message: MsgUpdateParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams;
    fromJSON(object: any): MsgUpdateParams;
    toJSON(message: MsgUpdateParams): unknown;
    fromPartial<I extends {
        authority?: string;
        params?: {
            signedBlocksWindow?: string | number | import("long").Long;
            minSignedPerWindow?: Uint8Array;
            downtimeJailDuration?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            };
            slashFractionDoubleSign?: Uint8Array;
            slashFractionDowntime?: Uint8Array;
        };
    } & {
        authority?: string;
        params?: {
            signedBlocksWindow?: string | number | import("long").Long;
            minSignedPerWindow?: Uint8Array;
            downtimeJailDuration?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            };
            slashFractionDoubleSign?: Uint8Array;
            slashFractionDowntime?: Uint8Array;
        } & {
            signedBlocksWindow?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["params"]["signedBlocksWindow"], keyof import("long").Long>, never>);
            minSignedPerWindow?: Uint8Array;
            downtimeJailDuration?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            } & {
                seconds?: string | number | (import("long").Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | import("long").Long) => import("long").Long;
                    and: (other: string | number | import("long").Long) => import("long").Long;
                    compare: (other: string | number | import("long").Long) => number;
                    comp: (other: string | number | import("long").Long) => number;
                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                    equals: (other: string | number | import("long").Long) => boolean;
                    eq: (other: string | number | import("long").Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | import("long").Long) => boolean;
                    gt: (other: string | number | import("long").Long) => boolean;
                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                    gte: (other: string | number | import("long").Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | import("long").Long) => boolean;
                    lt: (other: string | number | import("long").Long) => boolean;
                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                    lte: (other: string | number | import("long").Long) => boolean;
                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                    mod: (other: string | number | import("long").Long) => import("long").Long;
                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                    negate: () => import("long").Long;
                    neg: () => import("long").Long;
                    not: () => import("long").Long;
                    notEquals: (other: string | number | import("long").Long) => boolean;
                    neq: (other: string | number | import("long").Long) => boolean;
                    or: (other: string | number | import("long").Long) => import("long").Long;
                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                    shl: (numBits: number | import("long").Long) => import("long").Long;
                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                    shr: (numBits: number | import("long").Long) => import("long").Long;
                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                    shru: (numBits: number | import("long").Long) => import("long").Long;
                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => import("long").Long;
                    toString: (radix?: number) => string;
                    toUnsigned: () => import("long").Long;
                    xor: (other: string | number | import("long").Long) => import("long").Long;
                } & Record<Exclude<keyof I["params"]["downtimeJailDuration"]["seconds"], keyof import("long").Long>, never>);
                nanos?: number;
            } & Record<Exclude<keyof I["params"]["downtimeJailDuration"], keyof import("../../../google/protobuf/duration").Duration>, never>;
            slashFractionDoubleSign?: Uint8Array;
            slashFractionDowntime?: Uint8Array;
        } & Record<Exclude<keyof I["params"], keyof Params>, never>;
    } & Record<Exclude<keyof I, keyof MsgUpdateParams>, never>>(object: I): MsgUpdateParams;
    fromSDK(object: MsgUpdateParamsSDKType): MsgUpdateParams;
    toSDK(message: MsgUpdateParams): MsgUpdateParamsSDKType;
    fromAmino(object: MsgUpdateParamsAmino): MsgUpdateParams;
    toAmino(message: MsgUpdateParams): MsgUpdateParamsAmino;
    fromAminoMsg(object: MsgUpdateParamsAminoMsg): MsgUpdateParams;
    toAminoMsg(message: MsgUpdateParams): MsgUpdateParamsAminoMsg;
    fromProtoMsg(message: MsgUpdateParamsProtoMsg): MsgUpdateParams;
    toProto(message: MsgUpdateParams): Uint8Array;
    toProtoMsg(message: MsgUpdateParams): MsgUpdateParamsProtoMsg;
};
export declare const MsgUpdateParamsResponse: {
    typeUrl: string;
    encode(_: MsgUpdateParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse;
    fromJSON(_: any): MsgUpdateParamsResponse;
    toJSON(_: MsgUpdateParamsResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgUpdateParamsResponse;
    fromSDK(_: MsgUpdateParamsResponseSDKType): MsgUpdateParamsResponse;
    toSDK(_: MsgUpdateParamsResponse): MsgUpdateParamsResponseSDKType;
    fromAmino(_: MsgUpdateParamsResponseAmino): MsgUpdateParamsResponse;
    toAmino(_: MsgUpdateParamsResponse): MsgUpdateParamsResponseAmino;
    fromAminoMsg(object: MsgUpdateParamsResponseAminoMsg): MsgUpdateParamsResponse;
    toAminoMsg(message: MsgUpdateParamsResponse): MsgUpdateParamsResponseAminoMsg;
    fromProtoMsg(message: MsgUpdateParamsResponseProtoMsg): MsgUpdateParamsResponse;
    toProto(message: MsgUpdateParamsResponse): Uint8Array;
    toProtoMsg(message: MsgUpdateParamsResponse): MsgUpdateParamsResponseProtoMsg;
};
export declare const MsgImpeach: {
    typeUrl: string;
    encode(message: MsgImpeach, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgImpeach;
    fromJSON(object: any): MsgImpeach;
    toJSON(message: MsgImpeach): unknown;
    fromPartial<I extends {
        from?: string;
        validatorAddress?: string;
    } & {
        from?: string;
        validatorAddress?: string;
    } & Record<Exclude<keyof I, keyof MsgImpeach>, never>>(object: I): MsgImpeach;
    fromSDK(object: MsgImpeachSDKType): MsgImpeach;
    toSDK(message: MsgImpeach): MsgImpeachSDKType;
    fromAmino(object: MsgImpeachAmino): MsgImpeach;
    toAmino(message: MsgImpeach): MsgImpeachAmino;
    fromAminoMsg(object: MsgImpeachAminoMsg): MsgImpeach;
    toAminoMsg(message: MsgImpeach): MsgImpeachAminoMsg;
    fromProtoMsg(message: MsgImpeachProtoMsg): MsgImpeach;
    toProto(message: MsgImpeach): Uint8Array;
    toProtoMsg(message: MsgImpeach): MsgImpeachProtoMsg;
};
export declare const MsgImpeachResponse: {
    typeUrl: string;
    encode(_: MsgImpeachResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgImpeachResponse;
    fromJSON(_: any): MsgImpeachResponse;
    toJSON(_: MsgImpeachResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgImpeachResponse;
    fromSDK(_: MsgImpeachResponseSDKType): MsgImpeachResponse;
    toSDK(_: MsgImpeachResponse): MsgImpeachResponseSDKType;
    fromAmino(_: MsgImpeachResponseAmino): MsgImpeachResponse;
    toAmino(_: MsgImpeachResponse): MsgImpeachResponseAmino;
    fromAminoMsg(object: MsgImpeachResponseAminoMsg): MsgImpeachResponse;
    toAminoMsg(message: MsgImpeachResponse): MsgImpeachResponseAminoMsg;
    fromProtoMsg(message: MsgImpeachResponseProtoMsg): MsgImpeachResponse;
    toProto(message: MsgImpeachResponse): Uint8Array;
    toProtoMsg(message: MsgImpeachResponse): MsgImpeachResponseProtoMsg;
};
/** Msg defines the slashing Msg service. */
export interface Msg {
    /**
     * Unjail defines a method for unjailing a jailed validator, thus returning
     * them into the bonded validator set, so they can begin receiving provisions
     * and rewards again.
     */
    Unjail(request: MsgUnjail): Promise<MsgUnjailResponse>;
    /**
     * UpdateParams defines a governance operation for updating the x/slashing module
     * parameters. The authority defaults to the x/gov module account.
     *
     * Since: cosmos-sdk 0.47
     */
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
    /** Impeach defines a method for removing an existing validator after gov proposal passes. */
    Impeach(request: MsgImpeach): Promise<MsgImpeachResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    Unjail(request: MsgUnjail): Promise<MsgUnjailResponse>;
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
    Impeach(request: MsgImpeach): Promise<MsgImpeachResponse>;
}
