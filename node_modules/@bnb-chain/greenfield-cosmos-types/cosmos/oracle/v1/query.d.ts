import { Params, ParamsAmino, ParamsSDKType, RelayInterval, RelayIntervalAmino, RelayIntervalSDKType } from "./oracle";
import * as _m0 from "protobufjs/minimal";
import { Rpc } from "../../../helpers";
export declare const protobufPackage = "cosmos.oracle.v1";
/** ClaimSrcChain defines the src chain of a claim */
export declare enum ClaimSrcChain {
    /** CLAIM_SRC_CHAIN_UNSPECIFIED - CLAIM_SRC_CHAIN_UNSPECIFIED */
    CLAIM_SRC_CHAIN_UNSPECIFIED = 0,
    /** CLAIM_SRC_CHAIN_BSC - CLAIM_SRC_CHAIN_BSC defines BSC source chain */
    CLAIM_SRC_CHAIN_BSC = 1,
    /** CLAIM_SRC_CHAIN_OP_BNB - CLAIM_SRC_CHAIN_OP_BNB defines OPBNB source chain */
    CLAIM_SRC_CHAIN_OP_BNB = 2,
    UNRECOGNIZED = -1
}
export declare const ClaimSrcChainSDKType: typeof ClaimSrcChain;
export declare const ClaimSrcChainAmino: typeof ClaimSrcChain;
export declare function claimSrcChainFromJSON(object: any): ClaimSrcChain;
export declare function claimSrcChainToJSON(object: ClaimSrcChain): string;
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
export interface QueryParamsRequestProtoMsg {
    typeUrl: "/cosmos.oracle.v1.QueryParamsRequest";
    value: Uint8Array;
}
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequestAmino {
}
export interface QueryParamsRequestAminoMsg {
    type: "cosmos-sdk/QueryParamsRequest";
    value: QueryParamsRequestAmino;
}
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequestSDKType {
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params defines the parameters of the module. */
    params: Params;
}
export interface QueryParamsResponseProtoMsg {
    typeUrl: "/cosmos.oracle.v1.QueryParamsResponse";
    value: Uint8Array;
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponseAmino {
    /** params defines the parameters of the module. */
    params?: ParamsAmino;
}
export interface QueryParamsResponseAminoMsg {
    type: "cosmos-sdk/QueryParamsResponse";
    value: QueryParamsResponseAmino;
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponseSDKType {
    params: ParamsSDKType;
}
/** QueryInturnRelayerRequest is the request type for the Query In-turn relayer RPC method. */
export interface QueryInturnRelayerRequest {
    /** ClaimSrcChain defines the src chain of a claim */
    claimSrcChain: ClaimSrcChain;
}
export interface QueryInturnRelayerRequestProtoMsg {
    typeUrl: "/cosmos.oracle.v1.QueryInturnRelayerRequest";
    value: Uint8Array;
}
/** QueryInturnRelayerRequest is the request type for the Query In-turn relayer RPC method. */
export interface QueryInturnRelayerRequestAmino {
    /** ClaimSrcChain defines the src chain of a claim */
    claim_src_chain?: ClaimSrcChain;
}
export interface QueryInturnRelayerRequestAminoMsg {
    type: "cosmos-sdk/QueryInturnRelayerRequest";
    value: QueryInturnRelayerRequestAmino;
}
/** QueryInturnRelayerRequest is the request type for the Query In-turn relayer RPC method. */
export interface QueryInturnRelayerRequestSDKType {
    claim_src_chain: ClaimSrcChain;
}
/** QueryInturnRelayerResponse is the response type for the Query In-turn relayer RPC method. */
export interface QueryInturnRelayerResponse {
    blsPubKey: string;
    relayInterval?: RelayInterval;
}
export interface QueryInturnRelayerResponseProtoMsg {
    typeUrl: "/cosmos.oracle.v1.QueryInturnRelayerResponse";
    value: Uint8Array;
}
/** QueryInturnRelayerResponse is the response type for the Query In-turn relayer RPC method. */
export interface QueryInturnRelayerResponseAmino {
    bls_pub_key?: string;
    relay_interval?: RelayIntervalAmino;
}
export interface QueryInturnRelayerResponseAminoMsg {
    type: "cosmos-sdk/QueryInturnRelayerResponse";
    value: QueryInturnRelayerResponseAmino;
}
/** QueryInturnRelayerResponse is the response type for the Query In-turn relayer RPC method. */
export interface QueryInturnRelayerResponseSDKType {
    bls_pub_key: string;
    relay_interval?: RelayIntervalSDKType;
}
export declare const QueryParamsRequest: {
    typeUrl: string;
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryParamsRequest;
    fromSDK(_: QueryParamsRequestSDKType): QueryParamsRequest;
    toSDK(_: QueryParamsRequest): QueryParamsRequestSDKType;
    fromAmino(_: QueryParamsRequestAmino): QueryParamsRequest;
    toAmino(_: QueryParamsRequest): QueryParamsRequestAmino;
    fromAminoMsg(object: QueryParamsRequestAminoMsg): QueryParamsRequest;
    toAminoMsg(message: QueryParamsRequest): QueryParamsRequestAminoMsg;
    fromProtoMsg(message: QueryParamsRequestProtoMsg): QueryParamsRequest;
    toProto(message: QueryParamsRequest): Uint8Array;
    toProtoMsg(message: QueryParamsRequest): QueryParamsRequestProtoMsg;
};
export declare const QueryParamsResponse: {
    typeUrl: string;
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    fromPartial<I extends {
        params?: {
            relayerTimeout?: string | number | import("long").Long;
            relayerInterval?: string | number | import("long").Long;
            relayerRewardShare?: number;
        };
    } & {
        params?: {
            relayerTimeout?: string | number | import("long").Long;
            relayerInterval?: string | number | import("long").Long;
            relayerRewardShare?: number;
        } & {
            relayerTimeout?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["params"]["relayerTimeout"], keyof import("long").Long>, never>);
            relayerInterval?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["params"]["relayerInterval"], keyof import("long").Long>, never>);
            relayerRewardShare?: number;
        } & Record<Exclude<keyof I["params"], keyof Params>, never>;
    } & Record<Exclude<keyof I, "params">, never>>(object: I): QueryParamsResponse;
    fromSDK(object: QueryParamsResponseSDKType): QueryParamsResponse;
    toSDK(message: QueryParamsResponse): QueryParamsResponseSDKType;
    fromAmino(object: QueryParamsResponseAmino): QueryParamsResponse;
    toAmino(message: QueryParamsResponse): QueryParamsResponseAmino;
    fromAminoMsg(object: QueryParamsResponseAminoMsg): QueryParamsResponse;
    toAminoMsg(message: QueryParamsResponse): QueryParamsResponseAminoMsg;
    fromProtoMsg(message: QueryParamsResponseProtoMsg): QueryParamsResponse;
    toProto(message: QueryParamsResponse): Uint8Array;
    toProtoMsg(message: QueryParamsResponse): QueryParamsResponseProtoMsg;
};
export declare const QueryInturnRelayerRequest: {
    typeUrl: string;
    encode(message: QueryInturnRelayerRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryInturnRelayerRequest;
    fromJSON(object: any): QueryInturnRelayerRequest;
    toJSON(message: QueryInturnRelayerRequest): unknown;
    fromPartial<I extends {
        claimSrcChain?: ClaimSrcChain;
    } & {
        claimSrcChain?: ClaimSrcChain;
    } & Record<Exclude<keyof I, "claimSrcChain">, never>>(object: I): QueryInturnRelayerRequest;
    fromSDK(object: QueryInturnRelayerRequestSDKType): QueryInturnRelayerRequest;
    toSDK(message: QueryInturnRelayerRequest): QueryInturnRelayerRequestSDKType;
    fromAmino(object: QueryInturnRelayerRequestAmino): QueryInturnRelayerRequest;
    toAmino(message: QueryInturnRelayerRequest): QueryInturnRelayerRequestAmino;
    fromAminoMsg(object: QueryInturnRelayerRequestAminoMsg): QueryInturnRelayerRequest;
    toAminoMsg(message: QueryInturnRelayerRequest): QueryInturnRelayerRequestAminoMsg;
    fromProtoMsg(message: QueryInturnRelayerRequestProtoMsg): QueryInturnRelayerRequest;
    toProto(message: QueryInturnRelayerRequest): Uint8Array;
    toProtoMsg(message: QueryInturnRelayerRequest): QueryInturnRelayerRequestProtoMsg;
};
export declare const QueryInturnRelayerResponse: {
    typeUrl: string;
    encode(message: QueryInturnRelayerResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryInturnRelayerResponse;
    fromJSON(object: any): QueryInturnRelayerResponse;
    toJSON(message: QueryInturnRelayerResponse): unknown;
    fromPartial<I extends {
        blsPubKey?: string;
        relayInterval?: {
            start?: string | number | import("long").Long;
            end?: string | number | import("long").Long;
        };
    } & {
        blsPubKey?: string;
        relayInterval?: {
            start?: string | number | import("long").Long;
            end?: string | number | import("long").Long;
        } & {
            start?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["relayInterval"]["start"], keyof import("long").Long>, never>);
            end?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["relayInterval"]["end"], keyof import("long").Long>, never>);
        } & Record<Exclude<keyof I["relayInterval"], keyof RelayInterval>, never>;
    } & Record<Exclude<keyof I, keyof QueryInturnRelayerResponse>, never>>(object: I): QueryInturnRelayerResponse;
    fromSDK(object: QueryInturnRelayerResponseSDKType): QueryInturnRelayerResponse;
    toSDK(message: QueryInturnRelayerResponse): QueryInturnRelayerResponseSDKType;
    fromAmino(object: QueryInturnRelayerResponseAmino): QueryInturnRelayerResponse;
    toAmino(message: QueryInturnRelayerResponse): QueryInturnRelayerResponseAmino;
    fromAminoMsg(object: QueryInturnRelayerResponseAminoMsg): QueryInturnRelayerResponse;
    toAminoMsg(message: QueryInturnRelayerResponse): QueryInturnRelayerResponseAminoMsg;
    fromProtoMsg(message: QueryInturnRelayerResponseProtoMsg): QueryInturnRelayerResponse;
    toProto(message: QueryInturnRelayerResponse): Uint8Array;
    toProtoMsg(message: QueryInturnRelayerResponse): QueryInturnRelayerResponseProtoMsg;
};
/** Query provides defines the gRPC querier service. */
export interface Query {
    /** Params returns the total set of cross chain parameters. */
    Params(request?: QueryParamsRequest): Promise<QueryParamsResponse>;
    /** InturnRelayer returns the inturn relayer bls pub key and its relay interval */
    InturnRelayer(request: QueryInturnRelayerRequest): Promise<QueryInturnRelayerResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Params(request?: QueryParamsRequest): Promise<QueryParamsResponse>;
    InturnRelayer(request: QueryInturnRelayerRequest): Promise<QueryInturnRelayerResponse>;
}
