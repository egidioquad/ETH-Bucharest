import { FileDescriptorProto, FileDescriptorProtoAmino, FileDescriptorProtoSDKType } from "../../../google/protobuf/descriptor";
import * as _m0 from "protobufjs/minimal";
import { Rpc } from "../../../helpers";
export declare const protobufPackage = "cosmos.reflection.v1";
/** FileDescriptorsRequest is the Query/FileDescriptors request type. */
export interface FileDescriptorsRequest {
}
export interface FileDescriptorsRequestProtoMsg {
    typeUrl: "/cosmos.reflection.v1.FileDescriptorsRequest";
    value: Uint8Array;
}
/** FileDescriptorsRequest is the Query/FileDescriptors request type. */
export interface FileDescriptorsRequestAmino {
}
export interface FileDescriptorsRequestAminoMsg {
    type: "cosmos-sdk/FileDescriptorsRequest";
    value: FileDescriptorsRequestAmino;
}
/** FileDescriptorsRequest is the Query/FileDescriptors request type. */
export interface FileDescriptorsRequestSDKType {
}
/** FileDescriptorsResponse is the Query/FileDescriptors response type. */
export interface FileDescriptorsResponse {
    /** files is the file descriptors. */
    files: FileDescriptorProto[];
}
export interface FileDescriptorsResponseProtoMsg {
    typeUrl: "/cosmos.reflection.v1.FileDescriptorsResponse";
    value: Uint8Array;
}
/** FileDescriptorsResponse is the Query/FileDescriptors response type. */
export interface FileDescriptorsResponseAmino {
    /** files is the file descriptors. */
    files?: FileDescriptorProtoAmino[];
}
export interface FileDescriptorsResponseAminoMsg {
    type: "cosmos-sdk/FileDescriptorsResponse";
    value: FileDescriptorsResponseAmino;
}
/** FileDescriptorsResponse is the Query/FileDescriptors response type. */
export interface FileDescriptorsResponseSDKType {
    files: FileDescriptorProtoSDKType[];
}
export declare const FileDescriptorsRequest: {
    typeUrl: string;
    encode(_: FileDescriptorsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FileDescriptorsRequest;
    fromJSON(_: any): FileDescriptorsRequest;
    toJSON(_: FileDescriptorsRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): FileDescriptorsRequest;
    fromSDK(_: FileDescriptorsRequestSDKType): FileDescriptorsRequest;
    toSDK(_: FileDescriptorsRequest): FileDescriptorsRequestSDKType;
    fromAmino(_: FileDescriptorsRequestAmino): FileDescriptorsRequest;
    toAmino(_: FileDescriptorsRequest): FileDescriptorsRequestAmino;
    fromAminoMsg(object: FileDescriptorsRequestAminoMsg): FileDescriptorsRequest;
    toAminoMsg(message: FileDescriptorsRequest): FileDescriptorsRequestAminoMsg;
    fromProtoMsg(message: FileDescriptorsRequestProtoMsg): FileDescriptorsRequest;
    toProto(message: FileDescriptorsRequest): Uint8Array;
    toProtoMsg(message: FileDescriptorsRequest): FileDescriptorsRequestProtoMsg;
};
export declare const FileDescriptorsResponse: {
    typeUrl: string;
    encode(message: FileDescriptorsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FileDescriptorsResponse;
    fromJSON(object: any): FileDescriptorsResponse;
    toJSON(message: FileDescriptorsResponse): unknown;
    fromPartial<I extends {
        files?: {
            name?: string;
            package?: string;
            dependency?: string[];
            publicDependency?: number[];
            weakDependency?: number[];
            messageType?: {
                name?: string;
                field?: {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                extension?: {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                nestedType?: any[];
                enumType?: {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[];
                extensionRange?: {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                oneofDecl?: {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[];
            enumType?: {
                name?: string;
                value?: {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[];
            service?: {
                name?: string;
                method?: {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../../../google/protobuf/descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                }[];
                options?: {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }[];
            extension?: {
                name?: string;
                number?: number;
                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                typeName?: string;
                extendee?: string;
                defaultValue?: string;
                oneofIndex?: number;
                jsonName?: string;
                options?: {
                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                    packed?: boolean;
                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }[];
            options?: {
                javaPackage?: string;
                javaOuterClassname?: string;
                javaMultipleFiles?: boolean;
                javaGenerateEqualsAndHash?: boolean;
                javaStringCheckUtf8?: boolean;
                optimizeFor?: import("../../../google/protobuf/descriptor").FileOptions_OptimizeMode;
                goPackage?: string;
                ccGenericServices?: boolean;
                javaGenericServices?: boolean;
                pyGenericServices?: boolean;
                phpGenericServices?: boolean;
                deprecated?: boolean;
                ccEnableArenas?: boolean;
                objcClassPrefix?: string;
                csharpNamespace?: string;
                swiftPrefix?: string;
                phpClassPrefix?: string;
                phpNamespace?: string;
                phpMetadataNamespace?: string;
                rubyPackage?: string;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: string | number | import("long").Long;
                    negativeIntValue?: string | number | import("long").Long;
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            };
            sourceCodeInfo?: {
                location?: {
                    path?: number[];
                    span?: number[];
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[];
                }[];
            };
            syntax?: string;
        }[];
    } & {
        files?: {
            name?: string;
            package?: string;
            dependency?: string[];
            publicDependency?: number[];
            weakDependency?: number[];
            messageType?: {
                name?: string;
                field?: {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                extension?: {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                nestedType?: any[];
                enumType?: {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[];
                extensionRange?: {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                oneofDecl?: {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[];
            enumType?: {
                name?: string;
                value?: {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[];
            service?: {
                name?: string;
                method?: {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../../../google/protobuf/descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                }[];
                options?: {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }[];
            extension?: {
                name?: string;
                number?: number;
                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                typeName?: string;
                extendee?: string;
                defaultValue?: string;
                oneofIndex?: number;
                jsonName?: string;
                options?: {
                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                    packed?: boolean;
                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }[];
            options?: {
                javaPackage?: string;
                javaOuterClassname?: string;
                javaMultipleFiles?: boolean;
                javaGenerateEqualsAndHash?: boolean;
                javaStringCheckUtf8?: boolean;
                optimizeFor?: import("../../../google/protobuf/descriptor").FileOptions_OptimizeMode;
                goPackage?: string;
                ccGenericServices?: boolean;
                javaGenericServices?: boolean;
                pyGenericServices?: boolean;
                phpGenericServices?: boolean;
                deprecated?: boolean;
                ccEnableArenas?: boolean;
                objcClassPrefix?: string;
                csharpNamespace?: string;
                swiftPrefix?: string;
                phpClassPrefix?: string;
                phpNamespace?: string;
                phpMetadataNamespace?: string;
                rubyPackage?: string;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: string | number | import("long").Long;
                    negativeIntValue?: string | number | import("long").Long;
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            };
            sourceCodeInfo?: {
                location?: {
                    path?: number[];
                    span?: number[];
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[];
                }[];
            };
            syntax?: string;
        }[] & ({
            name?: string;
            package?: string;
            dependency?: string[];
            publicDependency?: number[];
            weakDependency?: number[];
            messageType?: {
                name?: string;
                field?: {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                extension?: {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                nestedType?: any[];
                enumType?: {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[];
                extensionRange?: {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                oneofDecl?: {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[];
            enumType?: {
                name?: string;
                value?: {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[];
            service?: {
                name?: string;
                method?: {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../../../google/protobuf/descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                }[];
                options?: {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }[];
            extension?: {
                name?: string;
                number?: number;
                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                typeName?: string;
                extendee?: string;
                defaultValue?: string;
                oneofIndex?: number;
                jsonName?: string;
                options?: {
                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                    packed?: boolean;
                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }[];
            options?: {
                javaPackage?: string;
                javaOuterClassname?: string;
                javaMultipleFiles?: boolean;
                javaGenerateEqualsAndHash?: boolean;
                javaStringCheckUtf8?: boolean;
                optimizeFor?: import("../../../google/protobuf/descriptor").FileOptions_OptimizeMode;
                goPackage?: string;
                ccGenericServices?: boolean;
                javaGenericServices?: boolean;
                pyGenericServices?: boolean;
                phpGenericServices?: boolean;
                deprecated?: boolean;
                ccEnableArenas?: boolean;
                objcClassPrefix?: string;
                csharpNamespace?: string;
                swiftPrefix?: string;
                phpClassPrefix?: string;
                phpNamespace?: string;
                phpMetadataNamespace?: string;
                rubyPackage?: string;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: string | number | import("long").Long;
                    negativeIntValue?: string | number | import("long").Long;
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            };
            sourceCodeInfo?: {
                location?: {
                    path?: number[];
                    span?: number[];
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[];
                }[];
            };
            syntax?: string;
        } & {
            name?: string;
            package?: string;
            dependency?: string[] & string[] & Record<Exclude<keyof I["files"][number]["dependency"], keyof string[]>, never>;
            publicDependency?: number[] & number[] & Record<Exclude<keyof I["files"][number]["publicDependency"], keyof number[]>, never>;
            weakDependency?: number[] & number[] & Record<Exclude<keyof I["files"][number]["weakDependency"], keyof number[]>, never>;
            messageType?: {
                name?: string;
                field?: {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                extension?: {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                nestedType?: any[];
                enumType?: {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[];
                extensionRange?: {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                oneofDecl?: {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[] & ({
                name?: string;
                field?: {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                extension?: {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                nestedType?: any[];
                enumType?: {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[];
                extensionRange?: {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                oneofDecl?: {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            } & {
                name?: string;
                field?: {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[] & ({
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                } & {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    } & {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[] & ({
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[] & ({
                                namePart?: string;
                                isExtension?: boolean;
                            } & {
                                namePart?: string;
                                isExtension?: boolean;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                namePart?: string;
                                isExtension?: boolean;
                            }[]>, never>;
                            identifierValue?: string;
                            positiveIntValue?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["field"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                            negativeIntValue?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["field"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["field"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["field"][number]["options"]["uninterpretedOption"], keyof {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["field"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["field"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["field"], keyof {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[]>, never>;
                extension?: {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[] & ({
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                } & {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    } & {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[] & ({
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[] & ({
                                namePart?: string;
                                isExtension?: boolean;
                            } & {
                                namePart?: string;
                                isExtension?: boolean;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                namePart?: string;
                                isExtension?: boolean;
                            }[]>, never>;
                            identifierValue?: string;
                            positiveIntValue?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                            negativeIntValue?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["extension"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["extension"][number]["options"]["uninterpretedOption"], keyof {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["extension"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["extension"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["extension"], keyof {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[]>, never>;
                nestedType?: {
                    name?: string;
                    field?: {
                        name?: string;
                        number?: number;
                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    extension?: {
                        name?: string;
                        number?: number;
                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    nestedType?: any[];
                    enumType?: {
                        name?: string;
                        value?: {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            allowAlias?: boolean;
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    }[];
                    extensionRange?: {
                        start?: number;
                        end?: number;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    oneofDecl?: {
                        name?: string;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        messageSetWireFormat?: boolean;
                        noStandardDescriptorAccessor?: boolean;
                        deprecated?: boolean;
                        mapEntry?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[] & ({
                    name?: string;
                    field?: {
                        name?: string;
                        number?: number;
                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    extension?: {
                        name?: string;
                        number?: number;
                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    nestedType?: any[];
                    enumType?: {
                        name?: string;
                        value?: {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            allowAlias?: boolean;
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    }[];
                    extensionRange?: {
                        start?: number;
                        end?: number;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    oneofDecl?: {
                        name?: string;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        messageSetWireFormat?: boolean;
                        noStandardDescriptorAccessor?: boolean;
                        deprecated?: boolean;
                        mapEntry?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                } & {
                    name?: string;
                    field?: {
                        name?: string;
                        number?: number;
                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[] & ({
                        name?: string;
                        number?: number;
                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    } & {
                        name?: string;
                        number?: number;
                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        } & {
                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[] & ({
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[] & ({
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & {
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[]>, never>;
                                identifierValue?: string;
                                positiveIntValue?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                negativeIntValue?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"], keyof {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["field"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["field"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["field"], keyof {
                        name?: string;
                        number?: number;
                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[]>, never>;
                    extension?: {
                        name?: string;
                        number?: number;
                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[] & ({
                        name?: string;
                        number?: number;
                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    } & {
                        name?: string;
                        number?: number;
                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        } & {
                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[] & ({
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[] & ({
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & {
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[]>, never>;
                                identifierValue?: string;
                                positiveIntValue?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                negativeIntValue?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"], keyof {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extension"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extension"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extension"], keyof {
                        name?: string;
                        number?: number;
                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[]>, never>;
                    nestedType?: {
                        name?: string;
                        field?: {
                            name?: string;
                            number?: number;
                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        extension?: {
                            name?: string;
                            number?: number;
                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        nestedType?: any[];
                        enumType?: {
                            name?: string;
                            value?: {
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            options?: {
                                allowAlias?: boolean;
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[];
                            reservedName?: string[];
                        }[];
                        extensionRange?: {
                            start?: number;
                            end?: number;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        oneofDecl?: {
                            name?: string;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            messageSetWireFormat?: boolean;
                            noStandardDescriptorAccessor?: boolean;
                            deprecated?: boolean;
                            mapEntry?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    }[] & ({
                        name?: string;
                        field?: {
                            name?: string;
                            number?: number;
                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        extension?: {
                            name?: string;
                            number?: number;
                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        nestedType?: any[];
                        enumType?: {
                            name?: string;
                            value?: {
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            options?: {
                                allowAlias?: boolean;
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[];
                            reservedName?: string[];
                        }[];
                        extensionRange?: {
                            start?: number;
                            end?: number;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        oneofDecl?: {
                            name?: string;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            messageSetWireFormat?: boolean;
                            noStandardDescriptorAccessor?: boolean;
                            deprecated?: boolean;
                            mapEntry?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    } & {
                        name?: string;
                        field?: {
                            name?: string;
                            number?: number;
                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[] & ({
                            name?: string;
                            number?: number;
                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        } & {
                            name?: string;
                            number?: number;
                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            } & {
                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[] & ({
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[] & ({
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[]>, never>;
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                    negativeIntValue?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"], keyof {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[]>, never>;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["field"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["field"], keyof {
                            name?: string;
                            number?: number;
                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[]>, never>;
                        extension?: {
                            name?: string;
                            number?: number;
                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[] & ({
                            name?: string;
                            number?: number;
                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        } & {
                            name?: string;
                            number?: number;
                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            } & {
                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[] & ({
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[] & ({
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[]>, never>;
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                    negativeIntValue?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"], keyof {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[]>, never>;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extension"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extension"], keyof {
                            name?: string;
                            number?: number;
                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[]>, never>;
                        nestedType?: {
                            name?: string;
                            field?: {
                                name?: string;
                                number?: number;
                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            extension?: {
                                name?: string;
                                number?: number;
                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            nestedType?: any[];
                            enumType?: {
                                name?: string;
                                value?: {
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                options?: {
                                    allowAlias?: boolean;
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[];
                                reservedName?: string[];
                            }[];
                            extensionRange?: {
                                start?: number;
                                end?: number;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            oneofDecl?: {
                                name?: string;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            options?: {
                                messageSetWireFormat?: boolean;
                                noStandardDescriptorAccessor?: boolean;
                                deprecated?: boolean;
                                mapEntry?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[];
                            reservedName?: string[];
                        }[] & ({
                            name?: string;
                            field?: {
                                name?: string;
                                number?: number;
                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            extension?: {
                                name?: string;
                                number?: number;
                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            nestedType?: any[];
                            enumType?: {
                                name?: string;
                                value?: {
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                options?: {
                                    allowAlias?: boolean;
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[];
                                reservedName?: string[];
                            }[];
                            extensionRange?: {
                                start?: number;
                                end?: number;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            oneofDecl?: {
                                name?: string;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            options?: {
                                messageSetWireFormat?: boolean;
                                noStandardDescriptorAccessor?: boolean;
                                deprecated?: boolean;
                                mapEntry?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[];
                            reservedName?: string[];
                        } & {
                            name?: string;
                            field?: {
                                name?: string;
                                number?: number;
                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[] & ({
                                name?: string;
                                number?: number;
                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            } & {
                                name?: string;
                                number?: number;
                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                } & {
                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[] & ({
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[] & ({
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[]>, never>;
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                        negativeIntValue?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"], keyof {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[]>, never>;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"], keyof {
                                name?: string;
                                number?: number;
                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[]>, never>;
                            extension?: {
                                name?: string;
                                number?: number;
                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[] & ({
                                name?: string;
                                number?: number;
                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            } & {
                                name?: string;
                                number?: number;
                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                } & {
                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[] & ({
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[] & ({
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[]>, never>;
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                        negativeIntValue?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"], keyof {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[]>, never>;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"], keyof {
                                name?: string;
                                number?: number;
                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[]>, never>;
                            nestedType?: {
                                name?: string;
                                field?: {
                                    name?: string;
                                    number?: number;
                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                extension?: {
                                    name?: string;
                                    number?: number;
                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                nestedType?: any[];
                                enumType?: {
                                    name?: string;
                                    value?: {
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    options?: {
                                        allowAlias?: boolean;
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[];
                                    reservedName?: string[];
                                }[];
                                extensionRange?: {
                                    start?: number;
                                    end?: number;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                oneofDecl?: {
                                    name?: string;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                options?: {
                                    messageSetWireFormat?: boolean;
                                    noStandardDescriptorAccessor?: boolean;
                                    deprecated?: boolean;
                                    mapEntry?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[];
                                reservedName?: string[];
                            }[] & ({
                                name?: string;
                                field?: {
                                    name?: string;
                                    number?: number;
                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                extension?: {
                                    name?: string;
                                    number?: number;
                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                nestedType?: any[];
                                enumType?: {
                                    name?: string;
                                    value?: {
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    options?: {
                                        allowAlias?: boolean;
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[];
                                    reservedName?: string[];
                                }[];
                                extensionRange?: {
                                    start?: number;
                                    end?: number;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                oneofDecl?: {
                                    name?: string;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                options?: {
                                    messageSetWireFormat?: boolean;
                                    noStandardDescriptorAccessor?: boolean;
                                    deprecated?: boolean;
                                    mapEntry?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[];
                                reservedName?: string[];
                            } & {
                                name?: string;
                                field?: {
                                    name?: string;
                                    number?: number;
                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[] & ({
                                    name?: string;
                                    number?: number;
                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                } & {
                                    name?: string;
                                    number?: number;
                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    } & {
                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[] & ({
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[] & ({
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[]>, never>;
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                            negativeIntValue?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"], keyof {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[]>, never>;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"], keyof {
                                    name?: string;
                                    number?: number;
                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[]>, never>;
                                extension?: {
                                    name?: string;
                                    number?: number;
                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[] & ({
                                    name?: string;
                                    number?: number;
                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                } & {
                                    name?: string;
                                    number?: number;
                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    } & {
                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[] & ({
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[] & ({
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[]>, never>;
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                            negativeIntValue?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"], keyof {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[]>, never>;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"], keyof {
                                    name?: string;
                                    number?: number;
                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[]>, never>;
                                nestedType?: {
                                    name?: string;
                                    field?: {
                                        name?: string;
                                        number?: number;
                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    extension?: {
                                        name?: string;
                                        number?: number;
                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    nestedType?: any[];
                                    enumType?: {
                                        name?: string;
                                        value?: {
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        options?: {
                                            allowAlias?: boolean;
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[];
                                        reservedName?: string[];
                                    }[];
                                    extensionRange?: {
                                        start?: number;
                                        end?: number;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    oneofDecl?: {
                                        name?: string;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    options?: {
                                        messageSetWireFormat?: boolean;
                                        noStandardDescriptorAccessor?: boolean;
                                        deprecated?: boolean;
                                        mapEntry?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[];
                                    reservedName?: string[];
                                }[] & ({
                                    name?: string;
                                    field?: {
                                        name?: string;
                                        number?: number;
                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    extension?: {
                                        name?: string;
                                        number?: number;
                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    nestedType?: any[];
                                    enumType?: {
                                        name?: string;
                                        value?: {
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        options?: {
                                            allowAlias?: boolean;
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[];
                                        reservedName?: string[];
                                    }[];
                                    extensionRange?: {
                                        start?: number;
                                        end?: number;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    oneofDecl?: {
                                        name?: string;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    options?: {
                                        messageSetWireFormat?: boolean;
                                        noStandardDescriptorAccessor?: boolean;
                                        deprecated?: boolean;
                                        mapEntry?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[];
                                    reservedName?: string[];
                                } & {
                                    name?: string;
                                    field?: {
                                        name?: string;
                                        number?: number;
                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[] & ({
                                        name?: string;
                                        number?: number;
                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    } & {
                                        name?: string;
                                        number?: number;
                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        } & {
                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[] & ({
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[] & ({
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[]>, never>;
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | (import("long").Long & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                                negativeIntValue?: string | number | (import("long").Long & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"], keyof {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[]>, never>;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"], keyof {
                                        name?: string;
                                        number?: number;
                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[]>, never>;
                                    extension?: {
                                        name?: string;
                                        number?: number;
                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[] & ({
                                        name?: string;
                                        number?: number;
                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    } & {
                                        name?: string;
                                        number?: number;
                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        } & {
                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[] & ({
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[] & ({
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[]>, never>;
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | (import("long").Long & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                                negativeIntValue?: string | number | (import("long").Long & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"], keyof {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[]>, never>;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"], keyof {
                                        name?: string;
                                        number?: number;
                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[]>, never>;
                                    nestedType?: {
                                        name?: string;
                                        field?: {
                                            name?: string;
                                            number?: number;
                                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        extension?: {
                                            name?: string;
                                            number?: number;
                                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        nestedType?: any[];
                                        enumType?: {
                                            name?: string;
                                            value?: {
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            options?: {
                                                allowAlias?: boolean;
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[];
                                            reservedName?: string[];
                                        }[];
                                        extensionRange?: {
                                            start?: number;
                                            end?: number;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        oneofDecl?: {
                                            name?: string;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        options?: {
                                            messageSetWireFormat?: boolean;
                                            noStandardDescriptorAccessor?: boolean;
                                            deprecated?: boolean;
                                            mapEntry?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[];
                                        reservedName?: string[];
                                    }[] & ({
                                        name?: string;
                                        field?: {
                                            name?: string;
                                            number?: number;
                                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        extension?: {
                                            name?: string;
                                            number?: number;
                                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        nestedType?: any[];
                                        enumType?: {
                                            name?: string;
                                            value?: {
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            options?: {
                                                allowAlias?: boolean;
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[];
                                            reservedName?: string[];
                                        }[];
                                        extensionRange?: {
                                            start?: number;
                                            end?: number;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        oneofDecl?: {
                                            name?: string;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        options?: {
                                            messageSetWireFormat?: boolean;
                                            noStandardDescriptorAccessor?: boolean;
                                            deprecated?: boolean;
                                            mapEntry?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[];
                                        reservedName?: string[];
                                    } & {
                                        name?: string;
                                        field?: {
                                            name?: string;
                                            number?: number;
                                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[] & ({
                                            name?: string;
                                            number?: number;
                                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        } & {
                                            name?: string;
                                            number?: number;
                                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            } & {
                                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[] & ({
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"], keyof {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[]>, never>;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"], keyof {
                                            name?: string;
                                            number?: number;
                                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[]>, never>;
                                        extension?: {
                                            name?: string;
                                            number?: number;
                                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[] & ({
                                            name?: string;
                                            number?: number;
                                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        } & {
                                            name?: string;
                                            number?: number;
                                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            } & {
                                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[] & ({
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"], keyof {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[]>, never>;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"], keyof {
                                            name?: string;
                                            number?: number;
                                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[]>, never>;
                                        nestedType?: {
                                            name?: string;
                                            field?: {
                                                name?: string;
                                                number?: number;
                                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            extension?: {
                                                name?: string;
                                                number?: number;
                                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            nestedType?: any[];
                                            enumType?: {
                                                name?: string;
                                                value?: {
                                                    name?: string;
                                                    number?: number;
                                                    options?: {
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                options?: {
                                                    allowAlias?: boolean;
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[];
                                                reservedName?: string[];
                                            }[];
                                            extensionRange?: {
                                                start?: number;
                                                end?: number;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            oneofDecl?: {
                                                name?: string;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            options?: {
                                                messageSetWireFormat?: boolean;
                                                noStandardDescriptorAccessor?: boolean;
                                                deprecated?: boolean;
                                                mapEntry?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[];
                                            reservedName?: string[];
                                        }[] & ({
                                            name?: string;
                                            field?: {
                                                name?: string;
                                                number?: number;
                                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            extension?: {
                                                name?: string;
                                                number?: number;
                                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            nestedType?: any[];
                                            enumType?: {
                                                name?: string;
                                                value?: {
                                                    name?: string;
                                                    number?: number;
                                                    options?: {
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                options?: {
                                                    allowAlias?: boolean;
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[];
                                                reservedName?: string[];
                                            }[];
                                            extensionRange?: {
                                                start?: number;
                                                end?: number;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            oneofDecl?: {
                                                name?: string;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            options?: {
                                                messageSetWireFormat?: boolean;
                                                noStandardDescriptorAccessor?: boolean;
                                                deprecated?: boolean;
                                                mapEntry?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[];
                                            reservedName?: string[];
                                        } & {
                                            name?: string;
                                            field?: {
                                                name?: string;
                                                number?: number;
                                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[] & ({
                                                name?: string;
                                                number?: number;
                                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            } & {
                                                name?: string;
                                                number?: number;
                                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"], keyof {
                                                name?: string;
                                                number?: number;
                                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[]>, never>;
                                            extension?: {
                                                name?: string;
                                                number?: number;
                                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[] & ({
                                                name?: string;
                                                number?: number;
                                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            } & {
                                                name?: string;
                                                number?: number;
                                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"], keyof {
                                                name?: string;
                                                number?: number;
                                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[]>, never>;
                                            nestedType?: {
                                                name?: string;
                                                field?: {
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                extension?: {
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                nestedType?: any[];
                                                enumType?: {
                                                    name?: string;
                                                    value?: {
                                                        name?: string;
                                                        number?: number;
                                                        options?: {
                                                            deprecated?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    options?: {
                                                        allowAlias?: boolean;
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    reservedRange?: {
                                                        start?: number;
                                                        end?: number;
                                                    }[];
                                                    reservedName?: string[];
                                                }[];
                                                extensionRange?: {
                                                    start?: number;
                                                    end?: number;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                oneofDecl?: {
                                                    name?: string;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                options?: {
                                                    messageSetWireFormat?: boolean;
                                                    noStandardDescriptorAccessor?: boolean;
                                                    deprecated?: boolean;
                                                    mapEntry?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[];
                                                reservedName?: string[];
                                            }[] & ({
                                                name?: string;
                                                field?: {
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                extension?: {
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                nestedType?: any[];
                                                enumType?: {
                                                    name?: string;
                                                    value?: {
                                                        name?: string;
                                                        number?: number;
                                                        options?: {
                                                            deprecated?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    options?: {
                                                        allowAlias?: boolean;
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    reservedRange?: {
                                                        start?: number;
                                                        end?: number;
                                                    }[];
                                                    reservedName?: string[];
                                                }[];
                                                extensionRange?: {
                                                    start?: number;
                                                    end?: number;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                oneofDecl?: {
                                                    name?: string;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                options?: {
                                                    messageSetWireFormat?: boolean;
                                                    noStandardDescriptorAccessor?: boolean;
                                                    deprecated?: boolean;
                                                    mapEntry?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[];
                                                reservedName?: string[];
                                            } & {
                                                name?: string;
                                                field?: {
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[] & ({
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"], keyof {
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[]>, never>;
                                                extension?: {
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[] & ({
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"], keyof {
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[]>, never>;
                                                nestedType?: {
                                                    name?: string;
                                                    field?: {
                                                        name?: string;
                                                        number?: number;
                                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                        typeName?: string;
                                                        extendee?: string;
                                                        defaultValue?: string;
                                                        oneofIndex?: number;
                                                        jsonName?: string;
                                                        options?: {
                                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                            packed?: boolean;
                                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                            lazy?: boolean;
                                                            deprecated?: boolean;
                                                            weak?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    extension?: {
                                                        name?: string;
                                                        number?: number;
                                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                        typeName?: string;
                                                        extendee?: string;
                                                        defaultValue?: string;
                                                        oneofIndex?: number;
                                                        jsonName?: string;
                                                        options?: {
                                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                            packed?: boolean;
                                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                            lazy?: boolean;
                                                            deprecated?: boolean;
                                                            weak?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    nestedType?: any[];
                                                    enumType?: {
                                                        name?: string;
                                                        value?: {
                                                            name?: string;
                                                            number?: number;
                                                            options?: {
                                                                deprecated?: boolean;
                                                                uninterpretedOption?: {
                                                                    name?: {
                                                                        namePart?: string;
                                                                        isExtension?: boolean;
                                                                    }[];
                                                                    identifierValue?: string;
                                                                    positiveIntValue?: string | number | import("long").Long;
                                                                    negativeIntValue?: string | number | import("long").Long;
                                                                    doubleValue?: number;
                                                                    stringValue?: Uint8Array;
                                                                    aggregateValue?: string;
                                                                }[];
                                                            };
                                                        }[];
                                                        options?: {
                                                            allowAlias?: boolean;
                                                            deprecated?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                        reservedRange?: {
                                                            start?: number;
                                                            end?: number;
                                                        }[];
                                                        reservedName?: string[];
                                                    }[];
                                                    extensionRange?: {
                                                        start?: number;
                                                        end?: number;
                                                        options?: {
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    oneofDecl?: {
                                                        name?: string;
                                                        options?: {
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    options?: {
                                                        messageSetWireFormat?: boolean;
                                                        noStandardDescriptorAccessor?: boolean;
                                                        deprecated?: boolean;
                                                        mapEntry?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    reservedRange?: {
                                                        start?: number;
                                                        end?: number;
                                                    }[];
                                                    reservedName?: string[];
                                                }[] & ({
                                                    name?: string;
                                                    field?: {
                                                        name?: string;
                                                        number?: number;
                                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                        typeName?: string;
                                                        extendee?: string;
                                                        defaultValue?: string;
                                                        oneofIndex?: number;
                                                        jsonName?: string;
                                                        options?: {
                                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                            packed?: boolean;
                                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                            lazy?: boolean;
                                                            deprecated?: boolean;
                                                            weak?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    extension?: {
                                                        name?: string;
                                                        number?: number;
                                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                        typeName?: string;
                                                        extendee?: string;
                                                        defaultValue?: string;
                                                        oneofIndex?: number;
                                                        jsonName?: string;
                                                        options?: {
                                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                            packed?: boolean;
                                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                            lazy?: boolean;
                                                            deprecated?: boolean;
                                                            weak?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    nestedType?: any[];
                                                    enumType?: {
                                                        name?: string;
                                                        value?: {
                                                            name?: string;
                                                            number?: number;
                                                            options?: {
                                                                deprecated?: boolean;
                                                                uninterpretedOption?: {
                                                                    name?: {
                                                                        namePart?: string;
                                                                        isExtension?: boolean;
                                                                    }[];
                                                                    identifierValue?: string;
                                                                    positiveIntValue?: string | number | import("long").Long;
                                                                    negativeIntValue?: string | number | import("long").Long;
                                                                    doubleValue?: number;
                                                                    stringValue?: Uint8Array;
                                                                    aggregateValue?: string;
                                                                }[];
                                                            };
                                                        }[];
                                                        options?: {
                                                            allowAlias?: boolean;
                                                            deprecated?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                        reservedRange?: {
                                                            start?: number;
                                                            end?: number;
                                                        }[];
                                                        reservedName?: string[];
                                                    }[];
                                                    extensionRange?: {
                                                        start?: number;
                                                        end?: number;
                                                        options?: {
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    oneofDecl?: {
                                                        name?: string;
                                                        options?: {
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    options?: {
                                                        messageSetWireFormat?: boolean;
                                                        noStandardDescriptorAccessor?: boolean;
                                                        deprecated?: boolean;
                                                        mapEntry?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    reservedRange?: {
                                                        start?: number;
                                                        end?: number;
                                                    }[];
                                                    reservedName?: string[];
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"], keyof {
                                                    name?: string;
                                                    field?: {
                                                        name?: string;
                                                        number?: number;
                                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                        typeName?: string;
                                                        extendee?: string;
                                                        defaultValue?: string;
                                                        oneofIndex?: number;
                                                        jsonName?: string;
                                                        options?: {
                                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                            packed?: boolean;
                                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                            lazy?: boolean;
                                                            deprecated?: boolean;
                                                            weak?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    extension?: {
                                                        name?: string;
                                                        number?: number;
                                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                        typeName?: string;
                                                        extendee?: string;
                                                        defaultValue?: string;
                                                        oneofIndex?: number;
                                                        jsonName?: string;
                                                        options?: {
                                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                            packed?: boolean;
                                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                            lazy?: boolean;
                                                            deprecated?: boolean;
                                                            weak?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    nestedType?: any[];
                                                    enumType?: {
                                                        name?: string;
                                                        value?: {
                                                            name?: string;
                                                            number?: number;
                                                            options?: {
                                                                deprecated?: boolean;
                                                                uninterpretedOption?: {
                                                                    name?: {
                                                                        namePart?: string;
                                                                        isExtension?: boolean;
                                                                    }[];
                                                                    identifierValue?: string;
                                                                    positiveIntValue?: string | number | import("long").Long;
                                                                    negativeIntValue?: string | number | import("long").Long;
                                                                    doubleValue?: number;
                                                                    stringValue?: Uint8Array;
                                                                    aggregateValue?: string;
                                                                }[];
                                                            };
                                                        }[];
                                                        options?: {
                                                            allowAlias?: boolean;
                                                            deprecated?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                        reservedRange?: {
                                                            start?: number;
                                                            end?: number;
                                                        }[];
                                                        reservedName?: string[];
                                                    }[];
                                                    extensionRange?: {
                                                        start?: number;
                                                        end?: number;
                                                        options?: {
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    oneofDecl?: {
                                                        name?: string;
                                                        options?: {
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    options?: {
                                                        messageSetWireFormat?: boolean;
                                                        noStandardDescriptorAccessor?: boolean;
                                                        deprecated?: boolean;
                                                        mapEntry?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    reservedRange?: {
                                                        start?: number;
                                                        end?: number;
                                                    }[];
                                                    reservedName?: string[];
                                                }[]>, never>;
                                                enumType?: {
                                                    name?: string;
                                                    value?: {
                                                        name?: string;
                                                        number?: number;
                                                        options?: {
                                                            deprecated?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    options?: {
                                                        allowAlias?: boolean;
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    reservedRange?: {
                                                        start?: number;
                                                        end?: number;
                                                    }[];
                                                    reservedName?: string[];
                                                }[] & ({
                                                    name?: string;
                                                    value?: {
                                                        name?: string;
                                                        number?: number;
                                                        options?: {
                                                            deprecated?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    options?: {
                                                        allowAlias?: boolean;
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    reservedRange?: {
                                                        start?: number;
                                                        end?: number;
                                                    }[];
                                                    reservedName?: string[];
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"], keyof {
                                                    name?: string;
                                                    value?: {
                                                        name?: string;
                                                        number?: number;
                                                        options?: {
                                                            deprecated?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    options?: {
                                                        allowAlias?: boolean;
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    reservedRange?: {
                                                        start?: number;
                                                        end?: number;
                                                    }[];
                                                    reservedName?: string[];
                                                }[]>, never>;
                                                extensionRange?: {
                                                    start?: number;
                                                    end?: number;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[] & ({
                                                    start?: number;
                                                    end?: number;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ExtensionRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"], keyof {
                                                    start?: number;
                                                    end?: number;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[]>, never>;
                                                oneofDecl?: {
                                                    name?: string;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[] & ({
                                                    name?: string;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number], keyof import("../../../google/protobuf/descriptor").OneofDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"], keyof {
                                                    name?: string;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[]>, never>;
                                                options?: {
                                                    messageSetWireFormat?: boolean;
                                                    noStandardDescriptorAccessor?: boolean;
                                                    deprecated?: boolean;
                                                    mapEntry?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"], keyof import("../../../google/protobuf/descriptor").MessageOptions>, never>;
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[] & ({
                                                    start?: number;
                                                    end?: number;
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"], keyof {
                                                    start?: number;
                                                    end?: number;
                                                }[]>, never>;
                                                reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedName"], keyof string[]>, never>;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"], keyof {
                                                name?: string;
                                                field?: {
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                extension?: {
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                nestedType?: any[];
                                                enumType?: {
                                                    name?: string;
                                                    value?: {
                                                        name?: string;
                                                        number?: number;
                                                        options?: {
                                                            deprecated?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: string | number | import("long").Long;
                                                                negativeIntValue?: string | number | import("long").Long;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    options?: {
                                                        allowAlias?: boolean;
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    reservedRange?: {
                                                        start?: number;
                                                        end?: number;
                                                    }[];
                                                    reservedName?: string[];
                                                }[];
                                                extensionRange?: {
                                                    start?: number;
                                                    end?: number;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                oneofDecl?: {
                                                    name?: string;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                options?: {
                                                    messageSetWireFormat?: boolean;
                                                    noStandardDescriptorAccessor?: boolean;
                                                    deprecated?: boolean;
                                                    mapEntry?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[];
                                                reservedName?: string[];
                                            }[]>, never>;
                                            enumType?: {
                                                name?: string;
                                                value?: {
                                                    name?: string;
                                                    number?: number;
                                                    options?: {
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                options?: {
                                                    allowAlias?: boolean;
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[];
                                                reservedName?: string[];
                                            }[] & ({
                                                name?: string;
                                                value?: {
                                                    name?: string;
                                                    number?: number;
                                                    options?: {
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                options?: {
                                                    allowAlias?: boolean;
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[];
                                                reservedName?: string[];
                                            } & {
                                                name?: string;
                                                value?: {
                                                    name?: string;
                                                    number?: number;
                                                    options?: {
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[] & ({
                                                    name?: string;
                                                    number?: number;
                                                    options?: {
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number], keyof import("../../../google/protobuf/descriptor").EnumValueDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"], keyof {
                                                    name?: string;
                                                    number?: number;
                                                    options?: {
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[]>, never>;
                                                options?: {
                                                    allowAlias?: boolean;
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumOptions>, never>;
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[] & ({
                                                    start?: number;
                                                    end?: number;
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto_EnumReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"], keyof {
                                                    start?: number;
                                                    end?: number;
                                                }[]>, never>;
                                                reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedName"], keyof string[]>, never>;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"], keyof {
                                                name?: string;
                                                value?: {
                                                    name?: string;
                                                    number?: number;
                                                    options?: {
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                options?: {
                                                    allowAlias?: boolean;
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[];
                                                reservedName?: string[];
                                            }[]>, never>;
                                            extensionRange?: {
                                                start?: number;
                                                end?: number;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[] & ({
                                                start?: number;
                                                end?: number;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            } & {
                                                start?: number;
                                                end?: number;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"], "uninterpretedOption">, never>;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ExtensionRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"], keyof {
                                                start?: number;
                                                end?: number;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[]>, never>;
                                            oneofDecl?: {
                                                name?: string;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[] & ({
                                                name?: string;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            } & {
                                                name?: string;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"], "uninterpretedOption">, never>;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number], keyof import("../../../google/protobuf/descriptor").OneofDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"], keyof {
                                                name?: string;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[]>, never>;
                                            options?: {
                                                messageSetWireFormat?: boolean;
                                                noStandardDescriptorAccessor?: boolean;
                                                deprecated?: boolean;
                                                mapEntry?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            } & {
                                                messageSetWireFormat?: boolean;
                                                noStandardDescriptorAccessor?: boolean;
                                                deprecated?: boolean;
                                                mapEntry?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[] & ({
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"], keyof {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[]>, never>;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"], keyof import("../../../google/protobuf/descriptor").MessageOptions>, never>;
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[] & ({
                                                start?: number;
                                                end?: number;
                                            } & {
                                                start?: number;
                                                end?: number;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"], keyof {
                                                start?: number;
                                                end?: number;
                                            }[]>, never>;
                                            reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedName"], keyof string[]>, never>;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"], keyof {
                                            name?: string;
                                            field?: {
                                                name?: string;
                                                number?: number;
                                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            extension?: {
                                                name?: string;
                                                number?: number;
                                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            nestedType?: any[];
                                            enumType?: {
                                                name?: string;
                                                value?: {
                                                    name?: string;
                                                    number?: number;
                                                    options?: {
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: string | number | import("long").Long;
                                                            negativeIntValue?: string | number | import("long").Long;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                options?: {
                                                    allowAlias?: boolean;
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[];
                                                reservedName?: string[];
                                            }[];
                                            extensionRange?: {
                                                start?: number;
                                                end?: number;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            oneofDecl?: {
                                                name?: string;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            options?: {
                                                messageSetWireFormat?: boolean;
                                                noStandardDescriptorAccessor?: boolean;
                                                deprecated?: boolean;
                                                mapEntry?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[];
                                            reservedName?: string[];
                                        }[]>, never>;
                                        enumType?: {
                                            name?: string;
                                            value?: {
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            options?: {
                                                allowAlias?: boolean;
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[];
                                            reservedName?: string[];
                                        }[] & ({
                                            name?: string;
                                            value?: {
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            options?: {
                                                allowAlias?: boolean;
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[];
                                            reservedName?: string[];
                                        } & {
                                            name?: string;
                                            value?: {
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[] & ({
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            } & {
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumValueOptions>, never>;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number], keyof import("../../../google/protobuf/descriptor").EnumValueDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"], keyof {
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[]>, never>;
                                            options?: {
                                                allowAlias?: boolean;
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            } & {
                                                allowAlias?: boolean;
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[] & ({
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"], keyof {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[]>, never>;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumOptions>, never>;
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[] & ({
                                                start?: number;
                                                end?: number;
                                            } & {
                                                start?: number;
                                                end?: number;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto_EnumReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"], keyof {
                                                start?: number;
                                                end?: number;
                                            }[]>, never>;
                                            reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedName"], keyof string[]>, never>;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"], keyof {
                                            name?: string;
                                            value?: {
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            options?: {
                                                allowAlias?: boolean;
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[];
                                            reservedName?: string[];
                                        }[]>, never>;
                                        extensionRange?: {
                                            start?: number;
                                            end?: number;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[] & ({
                                            start?: number;
                                            end?: number;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        } & {
                                            start?: number;
                                            end?: number;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            } & {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[] & ({
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"], keyof {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[]>, never>;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"], "uninterpretedOption">, never>;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ExtensionRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"], keyof {
                                            start?: number;
                                            end?: number;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[]>, never>;
                                        oneofDecl?: {
                                            name?: string;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[] & ({
                                            name?: string;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        } & {
                                            name?: string;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            } & {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[] & ({
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"], keyof {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[]>, never>;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"], "uninterpretedOption">, never>;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number], keyof import("../../../google/protobuf/descriptor").OneofDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"], keyof {
                                            name?: string;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[]>, never>;
                                        options?: {
                                            messageSetWireFormat?: boolean;
                                            noStandardDescriptorAccessor?: boolean;
                                            deprecated?: boolean;
                                            mapEntry?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        } & {
                                            messageSetWireFormat?: boolean;
                                            noStandardDescriptorAccessor?: boolean;
                                            deprecated?: boolean;
                                            mapEntry?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[] & ({
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[] & ({
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[]>, never>;
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | (import("long").Long & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                                negativeIntValue?: string | number | (import("long").Long & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"], keyof {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[]>, never>;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"], keyof import("../../../google/protobuf/descriptor").MessageOptions>, never>;
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[] & ({
                                            start?: number;
                                            end?: number;
                                        } & {
                                            start?: number;
                                            end?: number;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"], keyof {
                                            start?: number;
                                            end?: number;
                                        }[]>, never>;
                                        reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedName"], keyof string[]>, never>;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"], keyof {
                                        name?: string;
                                        field?: {
                                            name?: string;
                                            number?: number;
                                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        extension?: {
                                            name?: string;
                                            number?: number;
                                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        nestedType?: any[];
                                        enumType?: {
                                            name?: string;
                                            value?: {
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: string | number | import("long").Long;
                                                        negativeIntValue?: string | number | import("long").Long;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            options?: {
                                                allowAlias?: boolean;
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[];
                                            reservedName?: string[];
                                        }[];
                                        extensionRange?: {
                                            start?: number;
                                            end?: number;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        oneofDecl?: {
                                            name?: string;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        options?: {
                                            messageSetWireFormat?: boolean;
                                            noStandardDescriptorAccessor?: boolean;
                                            deprecated?: boolean;
                                            mapEntry?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[];
                                        reservedName?: string[];
                                    }[]>, never>;
                                    enumType?: {
                                        name?: string;
                                        value?: {
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        options?: {
                                            allowAlias?: boolean;
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[];
                                        reservedName?: string[];
                                    }[] & ({
                                        name?: string;
                                        value?: {
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        options?: {
                                            allowAlias?: boolean;
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[];
                                        reservedName?: string[];
                                    } & {
                                        name?: string;
                                        value?: {
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[] & ({
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        } & {
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            } & {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[] & ({
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"], keyof {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[]>, never>;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumValueOptions>, never>;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number], keyof import("../../../google/protobuf/descriptor").EnumValueDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"], keyof {
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[]>, never>;
                                        options?: {
                                            allowAlias?: boolean;
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        } & {
                                            allowAlias?: boolean;
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[] & ({
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[] & ({
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[]>, never>;
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | (import("long").Long & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                                negativeIntValue?: string | number | (import("long").Long & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"], keyof {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[]>, never>;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumOptions>, never>;
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[] & ({
                                            start?: number;
                                            end?: number;
                                        } & {
                                            start?: number;
                                            end?: number;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto_EnumReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"], keyof {
                                            start?: number;
                                            end?: number;
                                        }[]>, never>;
                                        reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedName"], keyof string[]>, never>;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"], keyof {
                                        name?: string;
                                        value?: {
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        options?: {
                                            allowAlias?: boolean;
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[];
                                        reservedName?: string[];
                                    }[]>, never>;
                                    extensionRange?: {
                                        start?: number;
                                        end?: number;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[] & ({
                                        start?: number;
                                        end?: number;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    } & {
                                        start?: number;
                                        end?: number;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        } & {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[] & ({
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[] & ({
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[]>, never>;
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | (import("long").Long & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                                negativeIntValue?: string | number | (import("long").Long & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"], keyof {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[]>, never>;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"], "uninterpretedOption">, never>;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ExtensionRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"], keyof {
                                        start?: number;
                                        end?: number;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[]>, never>;
                                    oneofDecl?: {
                                        name?: string;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[] & ({
                                        name?: string;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    } & {
                                        name?: string;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        } & {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[] & ({
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[] & ({
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[]>, never>;
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | (import("long").Long & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                                negativeIntValue?: string | number | (import("long").Long & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"], keyof {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[]>, never>;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"], "uninterpretedOption">, never>;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number], keyof import("../../../google/protobuf/descriptor").OneofDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"], keyof {
                                        name?: string;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[]>, never>;
                                    options?: {
                                        messageSetWireFormat?: boolean;
                                        noStandardDescriptorAccessor?: boolean;
                                        deprecated?: boolean;
                                        mapEntry?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    } & {
                                        messageSetWireFormat?: boolean;
                                        noStandardDescriptorAccessor?: boolean;
                                        deprecated?: boolean;
                                        mapEntry?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[] & ({
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[] & ({
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[]>, never>;
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                            negativeIntValue?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"], keyof {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[]>, never>;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"], keyof import("../../../google/protobuf/descriptor").MessageOptions>, never>;
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[] & ({
                                        start?: number;
                                        end?: number;
                                    } & {
                                        start?: number;
                                        end?: number;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"], keyof {
                                        start?: number;
                                        end?: number;
                                    }[]>, never>;
                                    reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedName"], keyof string[]>, never>;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"], keyof {
                                    name?: string;
                                    field?: {
                                        name?: string;
                                        number?: number;
                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    extension?: {
                                        name?: string;
                                        number?: number;
                                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    nestedType?: any[];
                                    enumType?: {
                                        name?: string;
                                        value?: {
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: string | number | import("long").Long;
                                                    negativeIntValue?: string | number | import("long").Long;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        options?: {
                                            allowAlias?: boolean;
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[];
                                        reservedName?: string[];
                                    }[];
                                    extensionRange?: {
                                        start?: number;
                                        end?: number;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    oneofDecl?: {
                                        name?: string;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    options?: {
                                        messageSetWireFormat?: boolean;
                                        noStandardDescriptorAccessor?: boolean;
                                        deprecated?: boolean;
                                        mapEntry?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[];
                                    reservedName?: string[];
                                }[]>, never>;
                                enumType?: {
                                    name?: string;
                                    value?: {
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    options?: {
                                        allowAlias?: boolean;
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[];
                                    reservedName?: string[];
                                }[] & ({
                                    name?: string;
                                    value?: {
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    options?: {
                                        allowAlias?: boolean;
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[];
                                    reservedName?: string[];
                                } & {
                                    name?: string;
                                    value?: {
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[] & ({
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    } & {
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        } & {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[] & ({
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[] & ({
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                } & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[]>, never>;
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | (import("long").Long & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                                negativeIntValue?: string | number | (import("long").Long & any & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"], keyof {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[]>, never>;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumValueOptions>, never>;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number], keyof import("../../../google/protobuf/descriptor").EnumValueDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"], keyof {
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[]>, never>;
                                    options?: {
                                        allowAlias?: boolean;
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    } & {
                                        allowAlias?: boolean;
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[] & ({
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[] & ({
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[]>, never>;
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                            negativeIntValue?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"], keyof {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[]>, never>;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumOptions>, never>;
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[] & ({
                                        start?: number;
                                        end?: number;
                                    } & {
                                        start?: number;
                                        end?: number;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto_EnumReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"], keyof {
                                        start?: number;
                                        end?: number;
                                    }[]>, never>;
                                    reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedName"], keyof string[]>, never>;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"], keyof {
                                    name?: string;
                                    value?: {
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    options?: {
                                        allowAlias?: boolean;
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[];
                                    reservedName?: string[];
                                }[]>, never>;
                                extensionRange?: {
                                    start?: number;
                                    end?: number;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[] & ({
                                    start?: number;
                                    end?: number;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                } & {
                                    start?: number;
                                    end?: number;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    } & {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[] & ({
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[] & ({
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[]>, never>;
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                            negativeIntValue?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"], keyof {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[]>, never>;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"], "uninterpretedOption">, never>;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ExtensionRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"], keyof {
                                    start?: number;
                                    end?: number;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[]>, never>;
                                oneofDecl?: {
                                    name?: string;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[] & ({
                                    name?: string;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                } & {
                                    name?: string;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    } & {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[] & ({
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[] & ({
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[]>, never>;
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                            negativeIntValue?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"], keyof {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[]>, never>;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"], "uninterpretedOption">, never>;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number], keyof import("../../../google/protobuf/descriptor").OneofDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"], keyof {
                                    name?: string;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[]>, never>;
                                options?: {
                                    messageSetWireFormat?: boolean;
                                    noStandardDescriptorAccessor?: boolean;
                                    deprecated?: boolean;
                                    mapEntry?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                } & {
                                    messageSetWireFormat?: boolean;
                                    noStandardDescriptorAccessor?: boolean;
                                    deprecated?: boolean;
                                    mapEntry?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[] & ({
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[] & ({
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[]>, never>;
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                        negativeIntValue?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"], keyof {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[]>, never>;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"], keyof import("../../../google/protobuf/descriptor").MessageOptions>, never>;
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[] & ({
                                    start?: number;
                                    end?: number;
                                } & {
                                    start?: number;
                                    end?: number;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"], keyof {
                                    start?: number;
                                    end?: number;
                                }[]>, never>;
                                reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedName"], keyof string[]>, never>;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"], keyof {
                                name?: string;
                                field?: {
                                    name?: string;
                                    number?: number;
                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                extension?: {
                                    name?: string;
                                    number?: number;
                                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                nestedType?: any[];
                                enumType?: {
                                    name?: string;
                                    value?: {
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: string | number | import("long").Long;
                                                negativeIntValue?: string | number | import("long").Long;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    options?: {
                                        allowAlias?: boolean;
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[];
                                    reservedName?: string[];
                                }[];
                                extensionRange?: {
                                    start?: number;
                                    end?: number;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                oneofDecl?: {
                                    name?: string;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                options?: {
                                    messageSetWireFormat?: boolean;
                                    noStandardDescriptorAccessor?: boolean;
                                    deprecated?: boolean;
                                    mapEntry?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[];
                                reservedName?: string[];
                            }[]>, never>;
                            enumType?: {
                                name?: string;
                                value?: {
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                options?: {
                                    allowAlias?: boolean;
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[];
                                reservedName?: string[];
                            }[] & ({
                                name?: string;
                                value?: {
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                options?: {
                                    allowAlias?: boolean;
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[];
                                reservedName?: string[];
                            } & {
                                name?: string;
                                value?: {
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[] & ({
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                } & {
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    } & {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[] & ({
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[] & ({
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[]>, never>;
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                            negativeIntValue?: string | number | (import("long").Long & {
                                                high: number;
                                                low: number;
                                                unsigned: boolean;
                                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                                and: (other: string | number | import("long").Long) => import("long").Long;
                                                compare: (other: string | number | import("long").Long) => number;
                                                comp: (other: string | number | import("long").Long) => number;
                                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                                equals: (other: string | number | import("long").Long) => boolean;
                                                eq: (other: string | number | import("long").Long) => boolean;
                                                getHighBits: () => number;
                                                getHighBitsUnsigned: () => number;
                                                getLowBits: () => number;
                                                getLowBitsUnsigned: () => number;
                                                getNumBitsAbs: () => number;
                                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                                gt: (other: string | number | import("long").Long) => boolean;
                                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                gte: (other: string | number | import("long").Long) => boolean;
                                                isEven: () => boolean;
                                                isNegative: () => boolean;
                                                isOdd: () => boolean;
                                                isPositive: () => boolean;
                                                isZero: () => boolean;
                                                lessThan: (other: string | number | import("long").Long) => boolean;
                                                lt: (other: string | number | import("long").Long) => boolean;
                                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                                lte: (other: string | number | import("long").Long) => boolean;
                                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                                negate: () => import("long").Long;
                                                neg: () => import("long").Long;
                                                not: () => import("long").Long;
                                                notEquals: (other: string | number | import("long").Long) => boolean;
                                                neq: (other: string | number | import("long").Long) => boolean;
                                                or: (other: string | number | import("long").Long) => import("long").Long;
                                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                                toInt: () => number;
                                                toNumber: () => number;
                                                toBytes: (le?: boolean) => number[];
                                                toBytesLE: () => number[];
                                                toBytesBE: () => number[];
                                                toSigned: () => import("long").Long;
                                                toString: (radix?: number) => string;
                                                toUnsigned: () => import("long").Long;
                                                xor: (other: string | number | import("long").Long) => import("long").Long;
                                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"], keyof {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[]>, never>;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumValueOptions>, never>;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number], keyof import("../../../google/protobuf/descriptor").EnumValueDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"], keyof {
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[]>, never>;
                                options?: {
                                    allowAlias?: boolean;
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                } & {
                                    allowAlias?: boolean;
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[] & ({
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[] & ({
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[]>, never>;
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                        negativeIntValue?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"], keyof {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[]>, never>;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumOptions>, never>;
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[] & ({
                                    start?: number;
                                    end?: number;
                                } & {
                                    start?: number;
                                    end?: number;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto_EnumReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"], keyof {
                                    start?: number;
                                    end?: number;
                                }[]>, never>;
                                reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedName"], keyof string[]>, never>;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"], keyof {
                                name?: string;
                                value?: {
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                options?: {
                                    allowAlias?: boolean;
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[];
                                reservedName?: string[];
                            }[]>, never>;
                            extensionRange?: {
                                start?: number;
                                end?: number;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[] & ({
                                start?: number;
                                end?: number;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            } & {
                                start?: number;
                                end?: number;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                } & {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[] & ({
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[] & ({
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[]>, never>;
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                        negativeIntValue?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"], keyof {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[]>, never>;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"], "uninterpretedOption">, never>;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ExtensionRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"], keyof {
                                start?: number;
                                end?: number;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[]>, never>;
                            oneofDecl?: {
                                name?: string;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[] & ({
                                name?: string;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            } & {
                                name?: string;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                } & {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[] & ({
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[] & ({
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[]>, never>;
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                        negativeIntValue?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"], keyof {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[]>, never>;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"], "uninterpretedOption">, never>;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number], keyof import("../../../google/protobuf/descriptor").OneofDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"], keyof {
                                name?: string;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[]>, never>;
                            options?: {
                                messageSetWireFormat?: boolean;
                                noStandardDescriptorAccessor?: boolean;
                                deprecated?: boolean;
                                mapEntry?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            } & {
                                messageSetWireFormat?: boolean;
                                noStandardDescriptorAccessor?: boolean;
                                deprecated?: boolean;
                                mapEntry?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[] & ({
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[] & ({
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[]>, never>;
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                    negativeIntValue?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"], keyof {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[]>, never>;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"], keyof import("../../../google/protobuf/descriptor").MessageOptions>, never>;
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[] & ({
                                start?: number;
                                end?: number;
                            } & {
                                start?: number;
                                end?: number;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"], keyof {
                                start?: number;
                                end?: number;
                            }[]>, never>;
                            reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedName"], keyof string[]>, never>;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"], keyof {
                            name?: string;
                            field?: {
                                name?: string;
                                number?: number;
                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            extension?: {
                                name?: string;
                                number?: number;
                                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            nestedType?: any[];
                            enumType?: {
                                name?: string;
                                value?: {
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: string | number | import("long").Long;
                                            negativeIntValue?: string | number | import("long").Long;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                options?: {
                                    allowAlias?: boolean;
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[];
                                reservedName?: string[];
                            }[];
                            extensionRange?: {
                                start?: number;
                                end?: number;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            oneofDecl?: {
                                name?: string;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            options?: {
                                messageSetWireFormat?: boolean;
                                noStandardDescriptorAccessor?: boolean;
                                deprecated?: boolean;
                                mapEntry?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[];
                            reservedName?: string[];
                        }[]>, never>;
                        enumType?: {
                            name?: string;
                            value?: {
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            options?: {
                                allowAlias?: boolean;
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[];
                            reservedName?: string[];
                        }[] & ({
                            name?: string;
                            value?: {
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            options?: {
                                allowAlias?: boolean;
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[];
                            reservedName?: string[];
                        } & {
                            name?: string;
                            value?: {
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[] & ({
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            } & {
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                } & {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[] & ({
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[] & ({
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[]>, never>;
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                        negativeIntValue?: string | number | (import("long").Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | import("long").Long) => import("long").Long;
                                            and: (other: string | number | import("long").Long) => import("long").Long;
                                            compare: (other: string | number | import("long").Long) => number;
                                            comp: (other: string | number | import("long").Long) => number;
                                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                                            equals: (other: string | number | import("long").Long) => boolean;
                                            eq: (other: string | number | import("long").Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | import("long").Long) => boolean;
                                            gt: (other: string | number | import("long").Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            gte: (other: string | number | import("long").Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            lessThan: (other: string | number | import("long").Long) => boolean;
                                            lt: (other: string | number | import("long").Long) => boolean;
                                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                            lte: (other: string | number | import("long").Long) => boolean;
                                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                                            mod: (other: string | number | import("long").Long) => import("long").Long;
                                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                            negate: () => import("long").Long;
                                            neg: () => import("long").Long;
                                            not: () => import("long").Long;
                                            notEquals: (other: string | number | import("long").Long) => boolean;
                                            neq: (other: string | number | import("long").Long) => boolean;
                                            or: (other: string | number | import("long").Long) => import("long").Long;
                                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                            shl: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                            shr: (numBits: number | import("long").Long) => import("long").Long;
                                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                            shru: (numBits: number | import("long").Long) => import("long").Long;
                                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => import("long").Long;
                                            toString: (radix?: number) => string;
                                            toUnsigned: () => import("long").Long;
                                            xor: (other: string | number | import("long").Long) => import("long").Long;
                                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"], keyof {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[]>, never>;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumValueOptions>, never>;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number], keyof import("../../../google/protobuf/descriptor").EnumValueDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"], keyof {
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[]>, never>;
                            options?: {
                                allowAlias?: boolean;
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            } & {
                                allowAlias?: boolean;
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[] & ({
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[] & ({
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[]>, never>;
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                    negativeIntValue?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"], keyof {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[]>, never>;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumOptions>, never>;
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[] & ({
                                start?: number;
                                end?: number;
                            } & {
                                start?: number;
                                end?: number;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto_EnumReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"], keyof {
                                start?: number;
                                end?: number;
                            }[]>, never>;
                            reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedName"], keyof string[]>, never>;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"], keyof {
                            name?: string;
                            value?: {
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            options?: {
                                allowAlias?: boolean;
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[];
                            reservedName?: string[];
                        }[]>, never>;
                        extensionRange?: {
                            start?: number;
                            end?: number;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[] & ({
                            start?: number;
                            end?: number;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        } & {
                            start?: number;
                            end?: number;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            } & {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[] & ({
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[] & ({
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[]>, never>;
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                    negativeIntValue?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"], keyof {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[]>, never>;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"], "uninterpretedOption">, never>;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ExtensionRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"], keyof {
                            start?: number;
                            end?: number;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[]>, never>;
                        oneofDecl?: {
                            name?: string;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[] & ({
                            name?: string;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        } & {
                            name?: string;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            } & {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[] & ({
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[] & ({
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[]>, never>;
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                    negativeIntValue?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"], keyof {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[]>, never>;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"], "uninterpretedOption">, never>;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number], keyof import("../../../google/protobuf/descriptor").OneofDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"], keyof {
                            name?: string;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[]>, never>;
                        options?: {
                            messageSetWireFormat?: boolean;
                            noStandardDescriptorAccessor?: boolean;
                            deprecated?: boolean;
                            mapEntry?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        } & {
                            messageSetWireFormat?: boolean;
                            noStandardDescriptorAccessor?: boolean;
                            deprecated?: boolean;
                            mapEntry?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[] & ({
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[] & ({
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & {
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[]>, never>;
                                identifierValue?: string;
                                positiveIntValue?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                negativeIntValue?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"], keyof {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["options"], keyof import("../../../google/protobuf/descriptor").MessageOptions>, never>;
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[] & ({
                            start?: number;
                            end?: number;
                        } & {
                            start?: number;
                            end?: number;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"], keyof {
                            start?: number;
                            end?: number;
                        }[]>, never>;
                        reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["reservedName"], keyof string[]>, never>;
                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["nestedType"], keyof {
                        name?: string;
                        field?: {
                            name?: string;
                            number?: number;
                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        extension?: {
                            name?: string;
                            number?: number;
                            label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                            type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        nestedType?: any[];
                        enumType?: {
                            name?: string;
                            value?: {
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: string | number | import("long").Long;
                                        negativeIntValue?: string | number | import("long").Long;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            options?: {
                                allowAlias?: boolean;
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[];
                            reservedName?: string[];
                        }[];
                        extensionRange?: {
                            start?: number;
                            end?: number;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        oneofDecl?: {
                            name?: string;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            messageSetWireFormat?: boolean;
                            noStandardDescriptorAccessor?: boolean;
                            deprecated?: boolean;
                            mapEntry?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    }[]>, never>;
                    enumType?: {
                        name?: string;
                        value?: {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            allowAlias?: boolean;
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    }[] & ({
                        name?: string;
                        value?: {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            allowAlias?: boolean;
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    } & {
                        name?: string;
                        value?: {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[] & ({
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        } & {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            } & {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[] & ({
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[] & ({
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[]>, never>;
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                    negativeIntValue?: string | number | (import("long").Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | import("long").Long) => import("long").Long;
                                        and: (other: string | number | import("long").Long) => import("long").Long;
                                        compare: (other: string | number | import("long").Long) => number;
                                        comp: (other: string | number | import("long").Long) => number;
                                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                                        equals: (other: string | number | import("long").Long) => boolean;
                                        eq: (other: string | number | import("long").Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | import("long").Long) => boolean;
                                        gt: (other: string | number | import("long").Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        gte: (other: string | number | import("long").Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        lessThan: (other: string | number | import("long").Long) => boolean;
                                        lt: (other: string | number | import("long").Long) => boolean;
                                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                        lte: (other: string | number | import("long").Long) => boolean;
                                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                                        mod: (other: string | number | import("long").Long) => import("long").Long;
                                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                        negate: () => import("long").Long;
                                        neg: () => import("long").Long;
                                        not: () => import("long").Long;
                                        notEquals: (other: string | number | import("long").Long) => boolean;
                                        neq: (other: string | number | import("long").Long) => boolean;
                                        or: (other: string | number | import("long").Long) => import("long").Long;
                                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                        shl: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                        shr: (numBits: number | import("long").Long) => import("long").Long;
                                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                        shru: (numBits: number | import("long").Long) => import("long").Long;
                                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => import("long").Long;
                                        toString: (radix?: number) => string;
                                        toUnsigned: () => import("long").Long;
                                        xor: (other: string | number | import("long").Long) => import("long").Long;
                                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"], keyof {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[]>, never>;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumValueOptions>, never>;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["value"][number], keyof import("../../../google/protobuf/descriptor").EnumValueDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["value"], keyof {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[]>, never>;
                        options?: {
                            allowAlias?: boolean;
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        } & {
                            allowAlias?: boolean;
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[] & ({
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[] & ({
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & {
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[]>, never>;
                                identifierValue?: string;
                                positiveIntValue?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                negativeIntValue?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"], keyof {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumOptions>, never>;
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[] & ({
                            start?: number;
                            end?: number;
                        } & {
                            start?: number;
                            end?: number;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto_EnumReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["reservedRange"], keyof {
                            start?: number;
                            end?: number;
                        }[]>, never>;
                        reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["reservedName"], keyof string[]>, never>;
                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["enumType"], keyof {
                        name?: string;
                        value?: {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            allowAlias?: boolean;
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    }[]>, never>;
                    extensionRange?: {
                        start?: number;
                        end?: number;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[] & ({
                        start?: number;
                        end?: number;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    } & {
                        start?: number;
                        end?: number;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        } & {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[] & ({
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[] & ({
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & {
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[]>, never>;
                                identifierValue?: string;
                                positiveIntValue?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                negativeIntValue?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"], keyof {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extensionRange"][number]["options"], "uninterpretedOption">, never>;
                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extensionRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ExtensionRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["extensionRange"], keyof {
                        start?: number;
                        end?: number;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[]>, never>;
                    oneofDecl?: {
                        name?: string;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[] & ({
                        name?: string;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    } & {
                        name?: string;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        } & {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[] & ({
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[] & ({
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & {
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[]>, never>;
                                identifierValue?: string;
                                positiveIntValue?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                negativeIntValue?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"], keyof {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["oneofDecl"][number]["options"], "uninterpretedOption">, never>;
                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["oneofDecl"][number], keyof import("../../../google/protobuf/descriptor").OneofDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["oneofDecl"], keyof {
                        name?: string;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[]>, never>;
                    options?: {
                        messageSetWireFormat?: boolean;
                        noStandardDescriptorAccessor?: boolean;
                        deprecated?: boolean;
                        mapEntry?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    } & {
                        messageSetWireFormat?: boolean;
                        noStandardDescriptorAccessor?: boolean;
                        deprecated?: boolean;
                        mapEntry?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[] & ({
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[] & ({
                                namePart?: string;
                                isExtension?: boolean;
                            } & {
                                namePart?: string;
                                isExtension?: boolean;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                namePart?: string;
                                isExtension?: boolean;
                            }[]>, never>;
                            identifierValue?: string;
                            positiveIntValue?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                            negativeIntValue?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["options"]["uninterpretedOption"], keyof {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["options"], keyof import("../../../google/protobuf/descriptor").MessageOptions>, never>;
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[] & ({
                        start?: number;
                        end?: number;
                    } & {
                        start?: number;
                        end?: number;
                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["reservedRange"], keyof {
                        start?: number;
                        end?: number;
                    }[]>, never>;
                    reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number]["reservedName"], keyof string[]>, never>;
                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["nestedType"], keyof {
                    name?: string;
                    field?: {
                        name?: string;
                        number?: number;
                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    extension?: {
                        name?: string;
                        number?: number;
                        label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                        type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    nestedType?: any[];
                    enumType?: {
                        name?: string;
                        value?: {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: string | number | import("long").Long;
                                    negativeIntValue?: string | number | import("long").Long;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            allowAlias?: boolean;
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    }[];
                    extensionRange?: {
                        start?: number;
                        end?: number;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    oneofDecl?: {
                        name?: string;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        messageSetWireFormat?: boolean;
                        noStandardDescriptorAccessor?: boolean;
                        deprecated?: boolean;
                        mapEntry?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[]>, never>;
                enumType?: {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[] & ({
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                } & {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[] & ({
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    } & {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        } & {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[] & ({
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[] & ({
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & {
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[]>, never>;
                                identifierValue?: string;
                                positiveIntValue?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                                negativeIntValue?: string | number | (import("long").Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | import("long").Long) => import("long").Long;
                                    and: (other: string | number | import("long").Long) => import("long").Long;
                                    compare: (other: string | number | import("long").Long) => number;
                                    comp: (other: string | number | import("long").Long) => number;
                                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                                    equals: (other: string | number | import("long").Long) => boolean;
                                    eq: (other: string | number | import("long").Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | import("long").Long) => boolean;
                                    gt: (other: string | number | import("long").Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    gte: (other: string | number | import("long").Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    lessThan: (other: string | number | import("long").Long) => boolean;
                                    lt: (other: string | number | import("long").Long) => boolean;
                                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                    lte: (other: string | number | import("long").Long) => boolean;
                                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                                    mod: (other: string | number | import("long").Long) => import("long").Long;
                                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                    negate: () => import("long").Long;
                                    neg: () => import("long").Long;
                                    not: () => import("long").Long;
                                    notEquals: (other: string | number | import("long").Long) => boolean;
                                    neq: (other: string | number | import("long").Long) => boolean;
                                    or: (other: string | number | import("long").Long) => import("long").Long;
                                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                    shl: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                    shr: (numBits: number | import("long").Long) => import("long").Long;
                                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                    shru: (numBits: number | import("long").Long) => import("long").Long;
                                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => import("long").Long;
                                    toString: (radix?: number) => string;
                                    toUnsigned: () => import("long").Long;
                                    xor: (other: string | number | import("long").Long) => import("long").Long;
                                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"], keyof {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["value"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumValueOptions>, never>;
                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["value"][number], keyof import("../../../google/protobuf/descriptor").EnumValueDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["value"], keyof {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[]>, never>;
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    } & {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[] & ({
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[] & ({
                                namePart?: string;
                                isExtension?: boolean;
                            } & {
                                namePart?: string;
                                isExtension?: boolean;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                namePart?: string;
                                isExtension?: boolean;
                            }[]>, never>;
                            identifierValue?: string;
                            positiveIntValue?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                            negativeIntValue?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["options"]["uninterpretedOption"], keyof {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumOptions>, never>;
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[] & ({
                        start?: number;
                        end?: number;
                    } & {
                        start?: number;
                        end?: number;
                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto_EnumReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["reservedRange"], keyof {
                        start?: number;
                        end?: number;
                    }[]>, never>;
                    reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number]["reservedName"], keyof string[]>, never>;
                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["enumType"], keyof {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[]>, never>;
                extensionRange?: {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[] & ({
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                } & {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    } & {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[] & ({
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[] & ({
                                namePart?: string;
                                isExtension?: boolean;
                            } & {
                                namePart?: string;
                                isExtension?: boolean;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                namePart?: string;
                                isExtension?: boolean;
                            }[]>, never>;
                            identifierValue?: string;
                            positiveIntValue?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                            negativeIntValue?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["extensionRange"][number]["options"]["uninterpretedOption"], keyof {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["extensionRange"][number]["options"], "uninterpretedOption">, never>;
                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["extensionRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ExtensionRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["extensionRange"], keyof {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[]>, never>;
                oneofDecl?: {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[] & ({
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                } & {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    } & {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[] & ({
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[] & ({
                                namePart?: string;
                                isExtension?: boolean;
                            } & {
                                namePart?: string;
                                isExtension?: boolean;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                namePart?: string;
                                isExtension?: boolean;
                            }[]>, never>;
                            identifierValue?: string;
                            positiveIntValue?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                            negativeIntValue?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["files"][number]["messageType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"], keyof {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["oneofDecl"][number]["options"], "uninterpretedOption">, never>;
                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["oneofDecl"][number], keyof import("../../../google/protobuf/descriptor").OneofDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["oneofDecl"], keyof {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[]>, never>;
                options?: {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                } & {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[] & ({
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    } & {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[] & ({
                            namePart?: string;
                            isExtension?: boolean;
                        } & {
                            namePart?: string;
                            isExtension?: boolean;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                            namePart?: string;
                            isExtension?: boolean;
                        }[]>, never>;
                        identifierValue?: string;
                        positiveIntValue?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                        negativeIntValue?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["files"][number]["messageType"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    } & Record<Exclude<keyof I["files"][number]["messageType"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["options"]["uninterpretedOption"], keyof {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["options"], keyof import("../../../google/protobuf/descriptor").MessageOptions>, never>;
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[] & ({
                    start?: number;
                    end?: number;
                } & {
                    start?: number;
                    end?: number;
                } & Record<Exclude<keyof I["files"][number]["messageType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto_ReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["reservedRange"], keyof {
                    start?: number;
                    end?: number;
                }[]>, never>;
                reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["messageType"][number]["reservedName"], keyof string[]>, never>;
            } & Record<Exclude<keyof I["files"][number]["messageType"][number], keyof import("../../../google/protobuf/descriptor").DescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["messageType"], keyof {
                name?: string;
                field?: {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                extension?: {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                nestedType?: any[];
                enumType?: {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[];
                extensionRange?: {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                oneofDecl?: {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[]>, never>;
            enumType?: {
                name?: string;
                value?: {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[] & ({
                name?: string;
                value?: {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            } & {
                name?: string;
                value?: {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[] & ({
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                } & {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    } & {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[] & ({
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[] & ({
                                namePart?: string;
                                isExtension?: boolean;
                            } & {
                                namePart?: string;
                                isExtension?: boolean;
                            } & Record<Exclude<keyof I["files"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                namePart?: string;
                                isExtension?: boolean;
                            }[]>, never>;
                            identifierValue?: string;
                            positiveIntValue?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["files"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                            negativeIntValue?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["files"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & Record<Exclude<keyof I["files"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"], keyof {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["files"][number]["enumType"][number]["value"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumValueOptions>, never>;
                } & Record<Exclude<keyof I["files"][number]["enumType"][number]["value"][number], keyof import("../../../google/protobuf/descriptor").EnumValueDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["enumType"][number]["value"], keyof {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[]>, never>;
                options?: {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                } & {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[] & ({
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    } & {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[] & ({
                            namePart?: string;
                            isExtension?: boolean;
                        } & {
                            namePart?: string;
                            isExtension?: boolean;
                        } & Record<Exclude<keyof I["files"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                            namePart?: string;
                            isExtension?: boolean;
                        }[]>, never>;
                        identifierValue?: string;
                        positiveIntValue?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["files"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                        negativeIntValue?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["files"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    } & Record<Exclude<keyof I["files"][number]["enumType"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["enumType"][number]["options"]["uninterpretedOption"], keyof {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I["files"][number]["enumType"][number]["options"], keyof import("../../../google/protobuf/descriptor").EnumOptions>, never>;
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[] & ({
                    start?: number;
                    end?: number;
                } & {
                    start?: number;
                    end?: number;
                } & Record<Exclude<keyof I["files"][number]["enumType"][number]["reservedRange"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto_EnumReservedRange>, never>)[] & Record<Exclude<keyof I["files"][number]["enumType"][number]["reservedRange"], keyof {
                    start?: number;
                    end?: number;
                }[]>, never>;
                reservedName?: string[] & string[] & Record<Exclude<keyof I["files"][number]["enumType"][number]["reservedName"], keyof string[]>, never>;
            } & Record<Exclude<keyof I["files"][number]["enumType"][number], keyof import("../../../google/protobuf/descriptor").EnumDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["enumType"], keyof {
                name?: string;
                value?: {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[]>, never>;
            service?: {
                name?: string;
                method?: {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../../../google/protobuf/descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                }[];
                options?: {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }[] & ({
                name?: string;
                method?: {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../../../google/protobuf/descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                }[];
                options?: {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            } & {
                name?: string;
                method?: {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../../../google/protobuf/descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                }[] & ({
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../../../google/protobuf/descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                } & {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../../../google/protobuf/descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    } & {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../../../google/protobuf/descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[] & ({
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[] & ({
                                namePart?: string;
                                isExtension?: boolean;
                            } & {
                                namePart?: string;
                                isExtension?: boolean;
                            } & Record<Exclude<keyof I["files"][number]["service"][number]["method"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["service"][number]["method"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                                namePart?: string;
                                isExtension?: boolean;
                            }[]>, never>;
                            identifierValue?: string;
                            positiveIntValue?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["files"][number]["service"][number]["method"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                            negativeIntValue?: string | number | (import("long").Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | import("long").Long) => import("long").Long;
                                and: (other: string | number | import("long").Long) => import("long").Long;
                                compare: (other: string | number | import("long").Long) => number;
                                comp: (other: string | number | import("long").Long) => number;
                                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                                div: (divisor: string | number | import("long").Long) => import("long").Long;
                                equals: (other: string | number | import("long").Long) => boolean;
                                eq: (other: string | number | import("long").Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | import("long").Long) => boolean;
                                gt: (other: string | number | import("long").Long) => boolean;
                                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                gte: (other: string | number | import("long").Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                lessThan: (other: string | number | import("long").Long) => boolean;
                                lt: (other: string | number | import("long").Long) => boolean;
                                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                                lte: (other: string | number | import("long").Long) => boolean;
                                modulo: (other: string | number | import("long").Long) => import("long").Long;
                                mod: (other: string | number | import("long").Long) => import("long").Long;
                                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                                negate: () => import("long").Long;
                                neg: () => import("long").Long;
                                not: () => import("long").Long;
                                notEquals: (other: string | number | import("long").Long) => boolean;
                                neq: (other: string | number | import("long").Long) => boolean;
                                or: (other: string | number | import("long").Long) => import("long").Long;
                                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                                shl: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                                shr: (numBits: number | import("long").Long) => import("long").Long;
                                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                                shru: (numBits: number | import("long").Long) => import("long").Long;
                                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => import("long").Long;
                                toString: (radix?: number) => string;
                                toUnsigned: () => import("long").Long;
                                xor: (other: string | number | import("long").Long) => import("long").Long;
                            } & Record<Exclude<keyof I["files"][number]["service"][number]["method"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & Record<Exclude<keyof I["files"][number]["service"][number]["method"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["service"][number]["method"][number]["options"]["uninterpretedOption"], keyof {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["files"][number]["service"][number]["method"][number]["options"], keyof import("../../../google/protobuf/descriptor").MethodOptions>, never>;
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                } & Record<Exclude<keyof I["files"][number]["service"][number]["method"][number], keyof import("../../../google/protobuf/descriptor").MethodDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["service"][number]["method"], keyof {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../../../google/protobuf/descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                }[]>, never>;
                options?: {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                } & {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[] & ({
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    } & {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[] & ({
                            namePart?: string;
                            isExtension?: boolean;
                        } & {
                            namePart?: string;
                            isExtension?: boolean;
                        } & Record<Exclude<keyof I["files"][number]["service"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["service"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                            namePart?: string;
                            isExtension?: boolean;
                        }[]>, never>;
                        identifierValue?: string;
                        positiveIntValue?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["files"][number]["service"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                        negativeIntValue?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["files"][number]["service"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    } & Record<Exclude<keyof I["files"][number]["service"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["service"][number]["options"]["uninterpretedOption"], keyof {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I["files"][number]["service"][number]["options"], keyof import("../../../google/protobuf/descriptor").ServiceOptions>, never>;
            } & Record<Exclude<keyof I["files"][number]["service"][number], keyof import("../../../google/protobuf/descriptor").ServiceDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["service"], keyof {
                name?: string;
                method?: {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../../../google/protobuf/descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                }[];
                options?: {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }[]>, never>;
            extension?: {
                name?: string;
                number?: number;
                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                typeName?: string;
                extendee?: string;
                defaultValue?: string;
                oneofIndex?: number;
                jsonName?: string;
                options?: {
                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                    packed?: boolean;
                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }[] & ({
                name?: string;
                number?: number;
                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                typeName?: string;
                extendee?: string;
                defaultValue?: string;
                oneofIndex?: number;
                jsonName?: string;
                options?: {
                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                    packed?: boolean;
                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            } & {
                name?: string;
                number?: number;
                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                typeName?: string;
                extendee?: string;
                defaultValue?: string;
                oneofIndex?: number;
                jsonName?: string;
                options?: {
                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                    packed?: boolean;
                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                } & {
                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                    packed?: boolean;
                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[] & ({
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    } & {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[] & ({
                            namePart?: string;
                            isExtension?: boolean;
                        } & {
                            namePart?: string;
                            isExtension?: boolean;
                        } & Record<Exclude<keyof I["files"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                            namePart?: string;
                            isExtension?: boolean;
                        }[]>, never>;
                        identifierValue?: string;
                        positiveIntValue?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["files"][number]["extension"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                        negativeIntValue?: string | number | (import("long").Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | import("long").Long) => import("long").Long;
                            and: (other: string | number | import("long").Long) => import("long").Long;
                            compare: (other: string | number | import("long").Long) => number;
                            comp: (other: string | number | import("long").Long) => number;
                            divide: (divisor: string | number | import("long").Long) => import("long").Long;
                            div: (divisor: string | number | import("long").Long) => import("long").Long;
                            equals: (other: string | number | import("long").Long) => boolean;
                            eq: (other: string | number | import("long").Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | import("long").Long) => boolean;
                            gt: (other: string | number | import("long").Long) => boolean;
                            greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            gte: (other: string | number | import("long").Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | import("long").Long) => boolean;
                            lt: (other: string | number | import("long").Long) => boolean;
                            lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                            lte: (other: string | number | import("long").Long) => boolean;
                            modulo: (other: string | number | import("long").Long) => import("long").Long;
                            mod: (other: string | number | import("long").Long) => import("long").Long;
                            multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                            mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                            negate: () => import("long").Long;
                            neg: () => import("long").Long;
                            not: () => import("long").Long;
                            notEquals: (other: string | number | import("long").Long) => boolean;
                            neq: (other: string | number | import("long").Long) => boolean;
                            or: (other: string | number | import("long").Long) => import("long").Long;
                            shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                            shl: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                            shr: (numBits: number | import("long").Long) => import("long").Long;
                            shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                            shru: (numBits: number | import("long").Long) => import("long").Long;
                            subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => import("long").Long;
                            toString: (radix?: number) => string;
                            toUnsigned: () => import("long").Long;
                            xor: (other: string | number | import("long").Long) => import("long").Long;
                        } & Record<Exclude<keyof I["files"][number]["extension"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    } & Record<Exclude<keyof I["files"][number]["extension"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["extension"][number]["options"]["uninterpretedOption"], keyof {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I["files"][number]["extension"][number]["options"], keyof import("../../../google/protobuf/descriptor").FieldOptions>, never>;
            } & Record<Exclude<keyof I["files"][number]["extension"][number], keyof import("../../../google/protobuf/descriptor").FieldDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"][number]["extension"], keyof {
                name?: string;
                number?: number;
                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                typeName?: string;
                extendee?: string;
                defaultValue?: string;
                oneofIndex?: number;
                jsonName?: string;
                options?: {
                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                    packed?: boolean;
                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }[]>, never>;
            options?: {
                javaPackage?: string;
                javaOuterClassname?: string;
                javaMultipleFiles?: boolean;
                javaGenerateEqualsAndHash?: boolean;
                javaStringCheckUtf8?: boolean;
                optimizeFor?: import("../../../google/protobuf/descriptor").FileOptions_OptimizeMode;
                goPackage?: string;
                ccGenericServices?: boolean;
                javaGenericServices?: boolean;
                pyGenericServices?: boolean;
                phpGenericServices?: boolean;
                deprecated?: boolean;
                ccEnableArenas?: boolean;
                objcClassPrefix?: string;
                csharpNamespace?: string;
                swiftPrefix?: string;
                phpClassPrefix?: string;
                phpNamespace?: string;
                phpMetadataNamespace?: string;
                rubyPackage?: string;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: string | number | import("long").Long;
                    negativeIntValue?: string | number | import("long").Long;
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            } & {
                javaPackage?: string;
                javaOuterClassname?: string;
                javaMultipleFiles?: boolean;
                javaGenerateEqualsAndHash?: boolean;
                javaStringCheckUtf8?: boolean;
                optimizeFor?: import("../../../google/protobuf/descriptor").FileOptions_OptimizeMode;
                goPackage?: string;
                ccGenericServices?: boolean;
                javaGenericServices?: boolean;
                pyGenericServices?: boolean;
                phpGenericServices?: boolean;
                deprecated?: boolean;
                ccEnableArenas?: boolean;
                objcClassPrefix?: string;
                csharpNamespace?: string;
                swiftPrefix?: string;
                phpClassPrefix?: string;
                phpNamespace?: string;
                phpMetadataNamespace?: string;
                rubyPackage?: string;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: string | number | import("long").Long;
                    negativeIntValue?: string | number | import("long").Long;
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[] & ({
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: string | number | import("long").Long;
                    negativeIntValue?: string | number | import("long").Long;
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                } & {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[] & ({
                        namePart?: string;
                        isExtension?: boolean;
                    } & {
                        namePart?: string;
                        isExtension?: boolean;
                    } & Record<Exclude<keyof I["files"][number]["options"]["uninterpretedOption"][number]["name"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption_NamePart>, never>)[] & Record<Exclude<keyof I["files"][number]["options"]["uninterpretedOption"][number]["name"], keyof {
                        namePart?: string;
                        isExtension?: boolean;
                    }[]>, never>;
                    identifierValue?: string;
                    positiveIntValue?: string | number | (import("long").Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | import("long").Long) => import("long").Long;
                        and: (other: string | number | import("long").Long) => import("long").Long;
                        compare: (other: string | number | import("long").Long) => number;
                        comp: (other: string | number | import("long").Long) => number;
                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                        equals: (other: string | number | import("long").Long) => boolean;
                        eq: (other: string | number | import("long").Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | import("long").Long) => boolean;
                        gt: (other: string | number | import("long").Long) => boolean;
                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        gte: (other: string | number | import("long").Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | import("long").Long) => boolean;
                        lt: (other: string | number | import("long").Long) => boolean;
                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        lte: (other: string | number | import("long").Long) => boolean;
                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                        mod: (other: string | number | import("long").Long) => import("long").Long;
                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                        negate: () => import("long").Long;
                        neg: () => import("long").Long;
                        not: () => import("long").Long;
                        notEquals: (other: string | number | import("long").Long) => boolean;
                        neq: (other: string | number | import("long").Long) => boolean;
                        or: (other: string | number | import("long").Long) => import("long").Long;
                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                        shl: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                        shr: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                        shru: (numBits: number | import("long").Long) => import("long").Long;
                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => import("long").Long;
                        toString: (radix?: number) => string;
                        toUnsigned: () => import("long").Long;
                        xor: (other: string | number | import("long").Long) => import("long").Long;
                    } & Record<Exclude<keyof I["files"][number]["options"]["uninterpretedOption"][number]["positiveIntValue"], keyof import("long").Long>, never>);
                    negativeIntValue?: string | number | (import("long").Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | import("long").Long) => import("long").Long;
                        and: (other: string | number | import("long").Long) => import("long").Long;
                        compare: (other: string | number | import("long").Long) => number;
                        comp: (other: string | number | import("long").Long) => number;
                        divide: (divisor: string | number | import("long").Long) => import("long").Long;
                        div: (divisor: string | number | import("long").Long) => import("long").Long;
                        equals: (other: string | number | import("long").Long) => boolean;
                        eq: (other: string | number | import("long").Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | import("long").Long) => boolean;
                        gt: (other: string | number | import("long").Long) => boolean;
                        greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        gte: (other: string | number | import("long").Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | import("long").Long) => boolean;
                        lt: (other: string | number | import("long").Long) => boolean;
                        lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                        lte: (other: string | number | import("long").Long) => boolean;
                        modulo: (other: string | number | import("long").Long) => import("long").Long;
                        mod: (other: string | number | import("long").Long) => import("long").Long;
                        multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                        mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                        negate: () => import("long").Long;
                        neg: () => import("long").Long;
                        not: () => import("long").Long;
                        notEquals: (other: string | number | import("long").Long) => boolean;
                        neq: (other: string | number | import("long").Long) => boolean;
                        or: (other: string | number | import("long").Long) => import("long").Long;
                        shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                        shl: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                        shr: (numBits: number | import("long").Long) => import("long").Long;
                        shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                        shru: (numBits: number | import("long").Long) => import("long").Long;
                        subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => import("long").Long;
                        toString: (radix?: number) => string;
                        toUnsigned: () => import("long").Long;
                        xor: (other: string | number | import("long").Long) => import("long").Long;
                    } & Record<Exclude<keyof I["files"][number]["options"]["uninterpretedOption"][number]["negativeIntValue"], keyof import("long").Long>, never>);
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                } & Record<Exclude<keyof I["files"][number]["options"]["uninterpretedOption"][number], keyof import("../../../google/protobuf/descriptor").UninterpretedOption>, never>)[] & Record<Exclude<keyof I["files"][number]["options"]["uninterpretedOption"], keyof {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: string | number | import("long").Long;
                    negativeIntValue?: string | number | import("long").Long;
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[]>, never>;
            } & Record<Exclude<keyof I["files"][number]["options"], keyof import("../../../google/protobuf/descriptor").FileOptions>, never>;
            sourceCodeInfo?: {
                location?: {
                    path?: number[];
                    span?: number[];
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[];
                }[];
            } & {
                location?: {
                    path?: number[];
                    span?: number[];
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[];
                }[] & ({
                    path?: number[];
                    span?: number[];
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[];
                } & {
                    path?: number[] & number[] & Record<Exclude<keyof I["files"][number]["sourceCodeInfo"]["location"][number]["path"], keyof number[]>, never>;
                    span?: number[] & number[] & Record<Exclude<keyof I["files"][number]["sourceCodeInfo"]["location"][number]["span"], keyof number[]>, never>;
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[] & string[] & Record<Exclude<keyof I["files"][number]["sourceCodeInfo"]["location"][number]["leadingDetachedComments"], keyof string[]>, never>;
                } & Record<Exclude<keyof I["files"][number]["sourceCodeInfo"]["location"][number], keyof import("../../../google/protobuf/descriptor").SourceCodeInfo_Location>, never>)[] & Record<Exclude<keyof I["files"][number]["sourceCodeInfo"]["location"], keyof {
                    path?: number[];
                    span?: number[];
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[];
                }[]>, never>;
            } & Record<Exclude<keyof I["files"][number]["sourceCodeInfo"], "location">, never>;
            syntax?: string;
        } & Record<Exclude<keyof I["files"][number], keyof FileDescriptorProto>, never>)[] & Record<Exclude<keyof I["files"], keyof {
            name?: string;
            package?: string;
            dependency?: string[];
            publicDependency?: number[];
            weakDependency?: number[];
            messageType?: {
                name?: string;
                field?: {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                extension?: {
                    name?: string;
                    number?: number;
                    label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                    type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                nestedType?: any[];
                enumType?: {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: string | number | import("long").Long;
                                negativeIntValue?: string | number | import("long").Long;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[];
                extensionRange?: {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                oneofDecl?: {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[];
            enumType?: {
                name?: string;
                value?: {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[];
            service?: {
                name?: string;
                method?: {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../../../google/protobuf/descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: string | number | import("long").Long;
                            negativeIntValue?: string | number | import("long").Long;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                }[];
                options?: {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }[];
            extension?: {
                name?: string;
                number?: number;
                label?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Label;
                type?: import("../../../google/protobuf/descriptor").FieldDescriptorProto_Type;
                typeName?: string;
                extendee?: string;
                defaultValue?: string;
                oneofIndex?: number;
                jsonName?: string;
                options?: {
                    ctype?: import("../../../google/protobuf/descriptor").FieldOptions_CType;
                    packed?: boolean;
                    jstype?: import("../../../google/protobuf/descriptor").FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: string | number | import("long").Long;
                        negativeIntValue?: string | number | import("long").Long;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }[];
            options?: {
                javaPackage?: string;
                javaOuterClassname?: string;
                javaMultipleFiles?: boolean;
                javaGenerateEqualsAndHash?: boolean;
                javaStringCheckUtf8?: boolean;
                optimizeFor?: import("../../../google/protobuf/descriptor").FileOptions_OptimizeMode;
                goPackage?: string;
                ccGenericServices?: boolean;
                javaGenericServices?: boolean;
                pyGenericServices?: boolean;
                phpGenericServices?: boolean;
                deprecated?: boolean;
                ccEnableArenas?: boolean;
                objcClassPrefix?: string;
                csharpNamespace?: string;
                swiftPrefix?: string;
                phpClassPrefix?: string;
                phpNamespace?: string;
                phpMetadataNamespace?: string;
                rubyPackage?: string;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: string | number | import("long").Long;
                    negativeIntValue?: string | number | import("long").Long;
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            };
            sourceCodeInfo?: {
                location?: {
                    path?: number[];
                    span?: number[];
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[];
                }[];
            };
            syntax?: string;
        }[]>, never>;
    } & Record<Exclude<keyof I, "files">, never>>(object: I): FileDescriptorsResponse;
    fromSDK(object: FileDescriptorsResponseSDKType): FileDescriptorsResponse;
    toSDK(message: FileDescriptorsResponse): FileDescriptorsResponseSDKType;
    fromAmino(object: FileDescriptorsResponseAmino): FileDescriptorsResponse;
    toAmino(message: FileDescriptorsResponse): FileDescriptorsResponseAmino;
    fromAminoMsg(object: FileDescriptorsResponseAminoMsg): FileDescriptorsResponse;
    toAminoMsg(message: FileDescriptorsResponse): FileDescriptorsResponseAminoMsg;
    fromProtoMsg(message: FileDescriptorsResponseProtoMsg): FileDescriptorsResponse;
    toProto(message: FileDescriptorsResponse): Uint8Array;
    toProtoMsg(message: FileDescriptorsResponse): FileDescriptorsResponseProtoMsg;
};
/** Package cosmos.reflection.v1 provides support for inspecting protobuf
 file descriptors. */
export interface ReflectionService {
    /**
     * FileDescriptors queries all the file descriptors in the app in order
     * to enable easier generation of dynamic clients.
     */
    FileDescriptors(request?: FileDescriptorsRequest): Promise<FileDescriptorsResponse>;
}
export declare class ReflectionServiceClientImpl implements ReflectionService {
    private readonly rpc;
    constructor(rpc: Rpc);
    FileDescriptors(request?: FileDescriptorsRequest): Promise<FileDescriptorsResponse>;
}
