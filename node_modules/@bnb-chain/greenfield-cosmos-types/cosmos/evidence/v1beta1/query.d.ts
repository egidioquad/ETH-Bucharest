import { PageRequest, PageRequestAmino, PageRequestSDKType, PageResponse, PageResponseAmino, PageResponseSDKType } from "../../base/query/v1beta1/pagination";
import { Any, AnyAmino, AnySDKType } from "../../../google/protobuf/any";
import * as _m0 from "protobufjs/minimal";
import { Rpc } from "../../../helpers";
export declare const protobufPackage = "cosmos.evidence.v1beta1";
/** QueryEvidenceRequest is the request type for the Query/Evidence RPC method. */
export interface QueryEvidenceRequest {
    /**
     * evidence_hash defines the hash of the requested evidence.
     * Deprecated: Use hash, a HEX encoded string, instead.
     */
    /** @deprecated */
    evidenceHash: Uint8Array;
    /**
     * hash defines the evidence hash of the requested evidence.
     *
     * Since: cosmos-sdk 0.47
     */
    hash: string;
}
export interface QueryEvidenceRequestProtoMsg {
    typeUrl: "/cosmos.evidence.v1beta1.QueryEvidenceRequest";
    value: Uint8Array;
}
/** QueryEvidenceRequest is the request type for the Query/Evidence RPC method. */
export interface QueryEvidenceRequestAmino {
    /**
     * evidence_hash defines the hash of the requested evidence.
     * Deprecated: Use hash, a HEX encoded string, instead.
     */
    /** @deprecated */
    evidence_hash?: string;
    /**
     * hash defines the evidence hash of the requested evidence.
     *
     * Since: cosmos-sdk 0.47
     */
    hash?: string;
}
export interface QueryEvidenceRequestAminoMsg {
    type: "cosmos-sdk/QueryEvidenceRequest";
    value: QueryEvidenceRequestAmino;
}
/** QueryEvidenceRequest is the request type for the Query/Evidence RPC method. */
export interface QueryEvidenceRequestSDKType {
    /** @deprecated */
    evidence_hash: Uint8Array;
    hash: string;
}
/** QueryEvidenceResponse is the response type for the Query/Evidence RPC method. */
export interface QueryEvidenceResponse {
    /** evidence returns the requested evidence. */
    evidence?: Any;
}
export interface QueryEvidenceResponseProtoMsg {
    typeUrl: "/cosmos.evidence.v1beta1.QueryEvidenceResponse";
    value: Uint8Array;
}
/** QueryEvidenceResponse is the response type for the Query/Evidence RPC method. */
export interface QueryEvidenceResponseAmino {
    /** evidence returns the requested evidence. */
    evidence?: AnyAmino;
}
export interface QueryEvidenceResponseAminoMsg {
    type: "cosmos-sdk/QueryEvidenceResponse";
    value: QueryEvidenceResponseAmino;
}
/** QueryEvidenceResponse is the response type for the Query/Evidence RPC method. */
export interface QueryEvidenceResponseSDKType {
    evidence?: AnySDKType;
}
/**
 * QueryEvidenceRequest is the request type for the Query/AllEvidence RPC
 * method.
 */
export interface QueryAllEvidenceRequest {
    /** pagination defines an optional pagination for the request. */
    pagination?: PageRequest;
}
export interface QueryAllEvidenceRequestProtoMsg {
    typeUrl: "/cosmos.evidence.v1beta1.QueryAllEvidenceRequest";
    value: Uint8Array;
}
/**
 * QueryEvidenceRequest is the request type for the Query/AllEvidence RPC
 * method.
 */
export interface QueryAllEvidenceRequestAmino {
    /** pagination defines an optional pagination for the request. */
    pagination?: PageRequestAmino;
}
export interface QueryAllEvidenceRequestAminoMsg {
    type: "cosmos-sdk/QueryAllEvidenceRequest";
    value: QueryAllEvidenceRequestAmino;
}
/**
 * QueryEvidenceRequest is the request type for the Query/AllEvidence RPC
 * method.
 */
export interface QueryAllEvidenceRequestSDKType {
    pagination?: PageRequestSDKType;
}
/**
 * QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC
 * method.
 */
export interface QueryAllEvidenceResponse {
    /** evidence returns all evidences. */
    evidence: Any[];
    /** pagination defines the pagination in the response. */
    pagination?: PageResponse;
}
export interface QueryAllEvidenceResponseProtoMsg {
    typeUrl: "/cosmos.evidence.v1beta1.QueryAllEvidenceResponse";
    value: Uint8Array;
}
/**
 * QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC
 * method.
 */
export interface QueryAllEvidenceResponseAmino {
    /** evidence returns all evidences. */
    evidence?: AnyAmino[];
    /** pagination defines the pagination in the response. */
    pagination?: PageResponseAmino;
}
export interface QueryAllEvidenceResponseAminoMsg {
    type: "cosmos-sdk/QueryAllEvidenceResponse";
    value: QueryAllEvidenceResponseAmino;
}
/**
 * QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC
 * method.
 */
export interface QueryAllEvidenceResponseSDKType {
    evidence: AnySDKType[];
    pagination?: PageResponseSDKType;
}
export declare const QueryEvidenceRequest: {
    typeUrl: string;
    encode(message: QueryEvidenceRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryEvidenceRequest;
    fromJSON(object: any): QueryEvidenceRequest;
    toJSON(message: QueryEvidenceRequest): unknown;
    fromPartial<I extends {
        evidenceHash?: Uint8Array;
        hash?: string;
    } & {
        evidenceHash?: Uint8Array;
        hash?: string;
    } & Record<Exclude<keyof I, keyof QueryEvidenceRequest>, never>>(object: I): QueryEvidenceRequest;
    fromSDK(object: QueryEvidenceRequestSDKType): QueryEvidenceRequest;
    toSDK(message: QueryEvidenceRequest): QueryEvidenceRequestSDKType;
    fromAmino(object: QueryEvidenceRequestAmino): QueryEvidenceRequest;
    toAmino(message: QueryEvidenceRequest): QueryEvidenceRequestAmino;
    fromAminoMsg(object: QueryEvidenceRequestAminoMsg): QueryEvidenceRequest;
    toAminoMsg(message: QueryEvidenceRequest): QueryEvidenceRequestAminoMsg;
    fromProtoMsg(message: QueryEvidenceRequestProtoMsg): QueryEvidenceRequest;
    toProto(message: QueryEvidenceRequest): Uint8Array;
    toProtoMsg(message: QueryEvidenceRequest): QueryEvidenceRequestProtoMsg;
};
export declare const QueryEvidenceResponse: {
    typeUrl: string;
    encode(message: QueryEvidenceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryEvidenceResponse;
    fromJSON(object: any): QueryEvidenceResponse;
    toJSON(message: QueryEvidenceResponse): unknown;
    fromPartial<I extends {
        evidence?: {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        };
    } & {
        evidence?: {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        } & {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        } & Record<Exclude<keyof I["evidence"], keyof Any>, never>;
    } & Record<Exclude<keyof I, "evidence">, never>>(object: I): QueryEvidenceResponse;
    fromSDK(object: QueryEvidenceResponseSDKType): QueryEvidenceResponse;
    toSDK(message: QueryEvidenceResponse): QueryEvidenceResponseSDKType;
    fromAmino(object: QueryEvidenceResponseAmino): QueryEvidenceResponse;
    toAmino(message: QueryEvidenceResponse): QueryEvidenceResponseAmino;
    fromAminoMsg(object: QueryEvidenceResponseAminoMsg): QueryEvidenceResponse;
    toAminoMsg(message: QueryEvidenceResponse): QueryEvidenceResponseAminoMsg;
    fromProtoMsg(message: QueryEvidenceResponseProtoMsg): QueryEvidenceResponse;
    toProto(message: QueryEvidenceResponse): Uint8Array;
    toProtoMsg(message: QueryEvidenceResponse): QueryEvidenceResponseProtoMsg;
};
export declare const QueryAllEvidenceRequest: {
    typeUrl: string;
    encode(message: QueryAllEvidenceRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllEvidenceRequest;
    fromJSON(object: any): QueryAllEvidenceRequest;
    toJSON(message: QueryAllEvidenceRequest): unknown;
    fromPartial<I extends {
        pagination?: {
            key?: Uint8Array;
            offset?: string | number | import("long").Long;
            limit?: string | number | import("long").Long;
            countTotal?: boolean;
            reverse?: boolean;
        };
    } & {
        pagination?: {
            key?: Uint8Array;
            offset?: string | number | import("long").Long;
            limit?: string | number | import("long").Long;
            countTotal?: boolean;
            reverse?: boolean;
        } & {
            key?: Uint8Array;
            offset?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["pagination"]["offset"], keyof import("long").Long>, never>);
            limit?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["pagination"]["limit"], keyof import("long").Long>, never>);
            countTotal?: boolean;
            reverse?: boolean;
        } & Record<Exclude<keyof I["pagination"], keyof PageRequest>, never>;
    } & Record<Exclude<keyof I, "pagination">, never>>(object: I): QueryAllEvidenceRequest;
    fromSDK(object: QueryAllEvidenceRequestSDKType): QueryAllEvidenceRequest;
    toSDK(message: QueryAllEvidenceRequest): QueryAllEvidenceRequestSDKType;
    fromAmino(object: QueryAllEvidenceRequestAmino): QueryAllEvidenceRequest;
    toAmino(message: QueryAllEvidenceRequest): QueryAllEvidenceRequestAmino;
    fromAminoMsg(object: QueryAllEvidenceRequestAminoMsg): QueryAllEvidenceRequest;
    toAminoMsg(message: QueryAllEvidenceRequest): QueryAllEvidenceRequestAminoMsg;
    fromProtoMsg(message: QueryAllEvidenceRequestProtoMsg): QueryAllEvidenceRequest;
    toProto(message: QueryAllEvidenceRequest): Uint8Array;
    toProtoMsg(message: QueryAllEvidenceRequest): QueryAllEvidenceRequestProtoMsg;
};
export declare const QueryAllEvidenceResponse: {
    typeUrl: string;
    encode(message: QueryAllEvidenceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllEvidenceResponse;
    fromJSON(object: any): QueryAllEvidenceResponse;
    toJSON(message: QueryAllEvidenceResponse): unknown;
    fromPartial<I extends {
        evidence?: {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        }[];
        pagination?: {
            nextKey?: Uint8Array;
            total?: string | number | import("long").Long;
        };
    } & {
        evidence?: {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        }[] & ({
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        } & {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        } & Record<Exclude<keyof I["evidence"][number], keyof Any>, never>)[] & Record<Exclude<keyof I["evidence"], keyof {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        }[]>, never>;
        pagination?: {
            nextKey?: Uint8Array;
            total?: string | number | import("long").Long;
        } & {
            nextKey?: Uint8Array;
            total?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["pagination"]["total"], keyof import("long").Long>, never>);
        } & Record<Exclude<keyof I["pagination"], keyof PageResponse>, never>;
    } & Record<Exclude<keyof I, keyof QueryAllEvidenceResponse>, never>>(object: I): QueryAllEvidenceResponse;
    fromSDK(object: QueryAllEvidenceResponseSDKType): QueryAllEvidenceResponse;
    toSDK(message: QueryAllEvidenceResponse): QueryAllEvidenceResponseSDKType;
    fromAmino(object: QueryAllEvidenceResponseAmino): QueryAllEvidenceResponse;
    toAmino(message: QueryAllEvidenceResponse): QueryAllEvidenceResponseAmino;
    fromAminoMsg(object: QueryAllEvidenceResponseAminoMsg): QueryAllEvidenceResponse;
    toAminoMsg(message: QueryAllEvidenceResponse): QueryAllEvidenceResponseAminoMsg;
    fromProtoMsg(message: QueryAllEvidenceResponseProtoMsg): QueryAllEvidenceResponse;
    toProto(message: QueryAllEvidenceResponse): Uint8Array;
    toProtoMsg(message: QueryAllEvidenceResponse): QueryAllEvidenceResponseProtoMsg;
};
/** Query defines the gRPC querier service. */
export interface Query {
    /** Evidence queries evidence based on evidence hash. */
    Evidence(request: QueryEvidenceRequest): Promise<QueryEvidenceResponse>;
    /** AllEvidence queries all evidence. */
    AllEvidence(request?: QueryAllEvidenceRequest): Promise<QueryAllEvidenceResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Evidence(request: QueryEvidenceRequest): Promise<QueryEvidenceResponse>;
    AllEvidence(request?: QueryAllEvidenceRequest): Promise<QueryAllEvidenceResponse>;
}
