"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelPermission = exports.Params = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
const helpers_1 = require("../../../helpers");
exports.protobufPackage = "cosmos.crosschain.v1";
function createBaseParams() {
    return {
        initModuleBalance: ""
    };
}
exports.Params = {
    typeUrl: "/cosmos.crosschain.v1.Params",
    encode(message, writer = _m0.Writer.create()) {
        if (message.initModuleBalance !== "") {
            writer.uint32(10).string(message.initModuleBalance);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.initModuleBalance = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            initModuleBalance: (0, helpers_1.isSet)(object.initModuleBalance) ? String(object.initModuleBalance) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.initModuleBalance !== undefined && (obj.initModuleBalance = message.initModuleBalance);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.initModuleBalance = object.initModuleBalance ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            initModuleBalance: object?.init_module_balance
        };
    },
    toSDK(message) {
        const obj = {};
        obj.init_module_balance = message.initModuleBalance;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseParams();
        if (object.init_module_balance !== undefined && object.init_module_balance !== null) {
            message.initModuleBalance = object.init_module_balance;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.init_module_balance = message.initModuleBalance;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.Params.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/x/crosschain/Params",
            value: exports.Params.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.Params.decode(message.value);
    },
    toProto(message) {
        return exports.Params.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.crosschain.v1.Params",
            value: exports.Params.encode(message).finish()
        };
    }
};
function createBaseChannelPermission() {
    return {
        destChainId: 0,
        channelId: 0,
        permission: 0
    };
}
exports.ChannelPermission = {
    typeUrl: "/cosmos.crosschain.v1.ChannelPermission",
    encode(message, writer = _m0.Writer.create()) {
        if (message.destChainId !== 0) {
            writer.uint32(8).uint32(message.destChainId);
        }
        if (message.channelId !== 0) {
            writer.uint32(16).uint32(message.channelId);
        }
        if (message.permission !== 0) {
            writer.uint32(24).uint32(message.permission);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelPermission();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.destChainId = reader.uint32();
                    break;
                case 2:
                    message.channelId = reader.uint32();
                    break;
                case 3:
                    message.permission = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            destChainId: (0, helpers_1.isSet)(object.destChainId) ? Number(object.destChainId) : 0,
            channelId: (0, helpers_1.isSet)(object.channelId) ? Number(object.channelId) : 0,
            permission: (0, helpers_1.isSet)(object.permission) ? Number(object.permission) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.destChainId !== undefined && (obj.destChainId = Math.round(message.destChainId));
        message.channelId !== undefined && (obj.channelId = Math.round(message.channelId));
        message.permission !== undefined && (obj.permission = Math.round(message.permission));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseChannelPermission();
        message.destChainId = object.destChainId ?? 0;
        message.channelId = object.channelId ?? 0;
        message.permission = object.permission ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            destChainId: object?.dest_chain_id,
            channelId: object?.channel_id,
            permission: object?.permission
        };
    },
    toSDK(message) {
        const obj = {};
        obj.dest_chain_id = message.destChainId;
        obj.channel_id = message.channelId;
        obj.permission = message.permission;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseChannelPermission();
        if (object.dest_chain_id !== undefined && object.dest_chain_id !== null) {
            message.destChainId = object.dest_chain_id;
        }
        if (object.channel_id !== undefined && object.channel_id !== null) {
            message.channelId = object.channel_id;
        }
        if (object.permission !== undefined && object.permission !== null) {
            message.permission = object.permission;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.dest_chain_id = message.destChainId;
        obj.channel_id = message.channelId;
        obj.permission = message.permission;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.ChannelPermission.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/ChannelPermission",
            value: exports.ChannelPermission.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.ChannelPermission.decode(message.value);
    },
    toProto(message) {
        return exports.ChannelPermission.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.crosschain.v1.ChannelPermission",
            value: exports.ChannelPermission.encode(message).finish()
        };
    }
};
//# sourceMappingURL=crosschain.js.map