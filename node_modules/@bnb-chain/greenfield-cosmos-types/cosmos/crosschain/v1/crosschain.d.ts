import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "cosmos.crosschain.v1";
/** Params holds parameters for the cross chain module. */
export interface Params {
    /** initial balance to mint for crosschain module when the chain starts */
    initModuleBalance: string;
}
export interface ParamsProtoMsg {
    typeUrl: "/cosmos.crosschain.v1.Params";
    value: Uint8Array;
}
/** Params holds parameters for the cross chain module. */
export interface ParamsAmino {
    /** initial balance to mint for crosschain module when the chain starts */
    init_module_balance?: string;
}
export interface ParamsAminoMsg {
    type: "cosmos-sdk/x/crosschain/Params";
    value: ParamsAmino;
}
/** Params holds parameters for the cross chain module. */
export interface ParamsSDKType {
    init_module_balance: string;
}
/** ChannelPermission defines the fields of the channel permission */
export interface ChannelPermission {
    /** destination chain id */
    destChainId: number;
    /** channel id */
    channelId: number;
    /** permission status, 1 for allow, 0 for forbidden */
    permission: number;
}
export interface ChannelPermissionProtoMsg {
    typeUrl: "/cosmos.crosschain.v1.ChannelPermission";
    value: Uint8Array;
}
/** ChannelPermission defines the fields of the channel permission */
export interface ChannelPermissionAmino {
    /** destination chain id */
    dest_chain_id?: number;
    /** channel id */
    channel_id?: number;
    /** permission status, 1 for allow, 0 for forbidden */
    permission?: number;
}
export interface ChannelPermissionAminoMsg {
    type: "cosmos-sdk/ChannelPermission";
    value: ChannelPermissionAmino;
}
/** ChannelPermission defines the fields of the channel permission */
export interface ChannelPermissionSDKType {
    dest_chain_id: number;
    channel_id: number;
    permission: number;
}
export declare const Params: {
    typeUrl: string;
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial<I extends {
        initModuleBalance?: string;
    } & {
        initModuleBalance?: string;
    } & Record<Exclude<keyof I, "initModuleBalance">, never>>(object: I): Params;
    fromSDK(object: ParamsSDKType): Params;
    toSDK(message: Params): ParamsSDKType;
    fromAmino(object: ParamsAmino): Params;
    toAmino(message: Params): ParamsAmino;
    fromAminoMsg(object: ParamsAminoMsg): Params;
    toAminoMsg(message: Params): ParamsAminoMsg;
    fromProtoMsg(message: ParamsProtoMsg): Params;
    toProto(message: Params): Uint8Array;
    toProtoMsg(message: Params): ParamsProtoMsg;
};
export declare const ChannelPermission: {
    typeUrl: string;
    encode(message: ChannelPermission, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ChannelPermission;
    fromJSON(object: any): ChannelPermission;
    toJSON(message: ChannelPermission): unknown;
    fromPartial<I extends {
        destChainId?: number;
        channelId?: number;
        permission?: number;
    } & {
        destChainId?: number;
        channelId?: number;
        permission?: number;
    } & Record<Exclude<keyof I, keyof ChannelPermission>, never>>(object: I): ChannelPermission;
    fromSDK(object: ChannelPermissionSDKType): ChannelPermission;
    toSDK(message: ChannelPermission): ChannelPermissionSDKType;
    fromAmino(object: ChannelPermissionAmino): ChannelPermission;
    toAmino(message: ChannelPermission): ChannelPermissionAmino;
    fromAminoMsg(object: ChannelPermissionAminoMsg): ChannelPermission;
    toAminoMsg(message: ChannelPermission): ChannelPermissionAminoMsg;
    fromProtoMsg(message: ChannelPermissionProtoMsg): ChannelPermission;
    toProto(message: ChannelPermission): Uint8Array;
    toProtoMsg(message: ChannelPermission): ChannelPermissionProtoMsg;
};
