"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryReceiveSequenceResponse = exports.QueryReceiveSequenceRequest = exports.QuerySendSequenceResponse = exports.QuerySendSequenceRequest = exports.QueryCrossChainPackageResponse = exports.QueryCrossChainPackageRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const crosschain_1 = require("./crosschain");
const helpers_1 = require("../../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "cosmos.crosschain.v1";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    typeUrl: "/cosmos.crosschain.v1.QueryParamsRequest",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    },
    fromAmino(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryParamsRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/QueryParamsRequest",
            value: exports.QueryParamsRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryParamsRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryParamsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.crosschain.v1.QueryParamsRequest",
            value: exports.QueryParamsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryParamsResponse() {
    return {
        params: crosschain_1.Params.fromPartial({})
    };
}
exports.QueryParamsResponse = {
    typeUrl: "/cosmos.crosschain.v1.QueryParamsResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            crosschain_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = crosschain_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: (0, helpers_1.isSet)(object.params) ? crosschain_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? crosschain_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? crosschain_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            params: object.params ? crosschain_1.Params.fromSDK(object.params) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? crosschain_1.Params.toSDK(message.params) : undefined);
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryParamsResponse();
        if (object.params !== undefined && object.params !== null) {
            message.params = crosschain_1.Params.fromAmino(object.params);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.params = message.params ? crosschain_1.Params.toAmino(message.params) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryParamsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/QueryParamsResponse",
            value: exports.QueryParamsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryParamsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryParamsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.crosschain.v1.QueryParamsResponse",
            value: exports.QueryParamsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryCrossChainPackageRequest() {
    return {
        destChainId: 0,
        channelId: 0,
        sequence: helpers_1.Long.UZERO
    };
}
exports.QueryCrossChainPackageRequest = {
    typeUrl: "/cosmos.crosschain.v1.QueryCrossChainPackageRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.destChainId !== 0) {
            writer.uint32(8).uint32(message.destChainId);
        }
        if (message.channelId !== 0) {
            writer.uint32(16).uint32(message.channelId);
        }
        if (!message.sequence.isZero()) {
            writer.uint32(24).uint64(message.sequence);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCrossChainPackageRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.destChainId = reader.uint32();
                    break;
                case 2:
                    message.channelId = reader.uint32();
                    break;
                case 3:
                    message.sequence = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            destChainId: (0, helpers_1.isSet)(object.destChainId) ? Number(object.destChainId) : 0,
            channelId: (0, helpers_1.isSet)(object.channelId) ? Number(object.channelId) : 0,
            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.destChainId !== undefined && (obj.destChainId = Math.round(message.destChainId));
        message.channelId !== undefined && (obj.channelId = Math.round(message.channelId));
        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryCrossChainPackageRequest();
        message.destChainId = object.destChainId ?? 0;
        message.channelId = object.channelId ?? 0;
        message.sequence = object.sequence !== undefined && object.sequence !== null ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            destChainId: object?.dest_chain_id,
            channelId: object?.channel_id,
            sequence: object?.sequence
        };
    },
    toSDK(message) {
        const obj = {};
        obj.dest_chain_id = message.destChainId;
        obj.channel_id = message.channelId;
        obj.sequence = message.sequence;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryCrossChainPackageRequest();
        if (object.dest_chain_id !== undefined && object.dest_chain_id !== null) {
            message.destChainId = object.dest_chain_id;
        }
        if (object.channel_id !== undefined && object.channel_id !== null) {
            message.channelId = object.channel_id;
        }
        if (object.sequence !== undefined && object.sequence !== null) {
            message.sequence = helpers_1.Long.fromString(object.sequence);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.dest_chain_id = message.destChainId;
        obj.channel_id = message.channelId;
        obj.sequence = message.sequence ? message.sequence.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryCrossChainPackageRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/QueryCrossChainPackageRequest",
            value: exports.QueryCrossChainPackageRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryCrossChainPackageRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryCrossChainPackageRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.crosschain.v1.QueryCrossChainPackageRequest",
            value: exports.QueryCrossChainPackageRequest.encode(message).finish()
        };
    }
};
function createBaseQueryCrossChainPackageResponse() {
    return {
        package: new Uint8Array()
    };
}
exports.QueryCrossChainPackageResponse = {
    typeUrl: "/cosmos.crosschain.v1.QueryCrossChainPackageResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.package.length !== 0) {
            writer.uint32(10).bytes(message.package);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCrossChainPackageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.package = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            package: (0, helpers_1.isSet)(object.package) ? (0, helpers_1.bytesFromBase64)(object.package) : new Uint8Array()
        };
    },
    toJSON(message) {
        const obj = {};
        message.package !== undefined && (obj.package = (0, helpers_1.base64FromBytes)(message.package !== undefined ? message.package : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryCrossChainPackageResponse();
        message.package = object.package ?? new Uint8Array();
        return message;
    },
    fromSDK(object) {
        return {
            package: object?.package
        };
    },
    toSDK(message) {
        const obj = {};
        obj.package = message.package;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryCrossChainPackageResponse();
        if (object.package !== undefined && object.package !== null) {
            message.package = (0, helpers_1.bytesFromBase64)(object.package);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.package = message.package ? (0, helpers_1.base64FromBytes)(message.package) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryCrossChainPackageResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/QueryCrossChainPackageResponse",
            value: exports.QueryCrossChainPackageResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryCrossChainPackageResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryCrossChainPackageResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.crosschain.v1.QueryCrossChainPackageResponse",
            value: exports.QueryCrossChainPackageResponse.encode(message).finish()
        };
    }
};
function createBaseQuerySendSequenceRequest() {
    return {
        destChainId: 0,
        channelId: 0
    };
}
exports.QuerySendSequenceRequest = {
    typeUrl: "/cosmos.crosschain.v1.QuerySendSequenceRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.destChainId !== 0) {
            writer.uint32(8).uint32(message.destChainId);
        }
        if (message.channelId !== 0) {
            writer.uint32(16).uint32(message.channelId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuerySendSequenceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.destChainId = reader.uint32();
                    break;
                case 2:
                    message.channelId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            destChainId: (0, helpers_1.isSet)(object.destChainId) ? Number(object.destChainId) : 0,
            channelId: (0, helpers_1.isSet)(object.channelId) ? Number(object.channelId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.destChainId !== undefined && (obj.destChainId = Math.round(message.destChainId));
        message.channelId !== undefined && (obj.channelId = Math.round(message.channelId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQuerySendSequenceRequest();
        message.destChainId = object.destChainId ?? 0;
        message.channelId = object.channelId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            destChainId: object?.dest_chain_id,
            channelId: object?.channel_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.dest_chain_id = message.destChainId;
        obj.channel_id = message.channelId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQuerySendSequenceRequest();
        if (object.dest_chain_id !== undefined && object.dest_chain_id !== null) {
            message.destChainId = object.dest_chain_id;
        }
        if (object.channel_id !== undefined && object.channel_id !== null) {
            message.channelId = object.channel_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.dest_chain_id = message.destChainId;
        obj.channel_id = message.channelId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QuerySendSequenceRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/QuerySendSequenceRequest",
            value: exports.QuerySendSequenceRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QuerySendSequenceRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QuerySendSequenceRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.crosschain.v1.QuerySendSequenceRequest",
            value: exports.QuerySendSequenceRequest.encode(message).finish()
        };
    }
};
function createBaseQuerySendSequenceResponse() {
    return {
        sequence: helpers_1.Long.UZERO
    };
}
exports.QuerySendSequenceResponse = {
    typeUrl: "/cosmos.crosschain.v1.QuerySendSequenceResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (!message.sequence.isZero()) {
            writer.uint32(8).uint64(message.sequence);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuerySendSequenceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sequence = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQuerySendSequenceResponse();
        message.sequence = object.sequence !== undefined && object.sequence !== null ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            sequence: object?.sequence
        };
    },
    toSDK(message) {
        const obj = {};
        obj.sequence = message.sequence;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQuerySendSequenceResponse();
        if (object.sequence !== undefined && object.sequence !== null) {
            message.sequence = helpers_1.Long.fromString(object.sequence);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.sequence = message.sequence ? message.sequence.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QuerySendSequenceResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/QuerySendSequenceResponse",
            value: exports.QuerySendSequenceResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QuerySendSequenceResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QuerySendSequenceResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.crosschain.v1.QuerySendSequenceResponse",
            value: exports.QuerySendSequenceResponse.encode(message).finish()
        };
    }
};
function createBaseQueryReceiveSequenceRequest() {
    return {
        destChainId: 0,
        channelId: 0
    };
}
exports.QueryReceiveSequenceRequest = {
    typeUrl: "/cosmos.crosschain.v1.QueryReceiveSequenceRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.destChainId !== 0) {
            writer.uint32(8).uint32(message.destChainId);
        }
        if (message.channelId !== 0) {
            writer.uint32(16).uint32(message.channelId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryReceiveSequenceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.destChainId = reader.uint32();
                    break;
                case 2:
                    message.channelId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            destChainId: (0, helpers_1.isSet)(object.destChainId) ? Number(object.destChainId) : 0,
            channelId: (0, helpers_1.isSet)(object.channelId) ? Number(object.channelId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.destChainId !== undefined && (obj.destChainId = Math.round(message.destChainId));
        message.channelId !== undefined && (obj.channelId = Math.round(message.channelId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryReceiveSequenceRequest();
        message.destChainId = object.destChainId ?? 0;
        message.channelId = object.channelId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            destChainId: object?.dest_chain_id,
            channelId: object?.channel_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.dest_chain_id = message.destChainId;
        obj.channel_id = message.channelId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryReceiveSequenceRequest();
        if (object.dest_chain_id !== undefined && object.dest_chain_id !== null) {
            message.destChainId = object.dest_chain_id;
        }
        if (object.channel_id !== undefined && object.channel_id !== null) {
            message.channelId = object.channel_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.dest_chain_id = message.destChainId;
        obj.channel_id = message.channelId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryReceiveSequenceRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/QueryReceiveSequenceRequest",
            value: exports.QueryReceiveSequenceRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryReceiveSequenceRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryReceiveSequenceRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.crosschain.v1.QueryReceiveSequenceRequest",
            value: exports.QueryReceiveSequenceRequest.encode(message).finish()
        };
    }
};
function createBaseQueryReceiveSequenceResponse() {
    return {
        sequence: helpers_1.Long.UZERO
    };
}
exports.QueryReceiveSequenceResponse = {
    typeUrl: "/cosmos.crosschain.v1.QueryReceiveSequenceResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (!message.sequence.isZero()) {
            writer.uint32(8).uint64(message.sequence);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryReceiveSequenceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sequence = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryReceiveSequenceResponse();
        message.sequence = object.sequence !== undefined && object.sequence !== null ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            sequence: object?.sequence
        };
    },
    toSDK(message) {
        const obj = {};
        obj.sequence = message.sequence;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseQueryReceiveSequenceResponse();
        if (object.sequence !== undefined && object.sequence !== null) {
            message.sequence = helpers_1.Long.fromString(object.sequence);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.sequence = message.sequence ? message.sequence.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryReceiveSequenceResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/QueryReceiveSequenceResponse",
            value: exports.QueryReceiveSequenceResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryReceiveSequenceResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryReceiveSequenceResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.crosschain.v1.QueryReceiveSequenceResponse",
            value: exports.QueryReceiveSequenceResponse.encode(message).finish()
        };
    }
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.CrossChainPackage = this.CrossChainPackage.bind(this);
        this.SendSequence = this.SendSequence.bind(this);
        this.ReceiveSequence = this.ReceiveSequence.bind(this);
    }
    Params(request = {}) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.crosschain.v1.Query", "Params", data);
        return promise.then(data => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
    }
    CrossChainPackage(request) {
        const data = exports.QueryCrossChainPackageRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.crosschain.v1.Query", "CrossChainPackage", data);
        return promise.then(data => exports.QueryCrossChainPackageResponse.decode(new _m0.Reader(data)));
    }
    SendSequence(request) {
        const data = exports.QuerySendSequenceRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.crosschain.v1.Query", "SendSequence", data);
        return promise.then(data => exports.QuerySendSequenceResponse.decode(new _m0.Reader(data)));
    }
    ReceiveSequence(request) {
        const data = exports.QueryReceiveSequenceRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.crosschain.v1.Query", "ReceiveSequence", data);
        return promise.then(data => exports.QueryReceiveSequenceResponse.decode(new _m0.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
//# sourceMappingURL=query.js.map