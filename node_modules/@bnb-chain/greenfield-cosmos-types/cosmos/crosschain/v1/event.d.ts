/// <reference types="long" />
import { Long } from "../../../helpers";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "cosmos.crosschain.v1";
/** EventCrossChain is emitted when there is a cross chain package created */
export interface EventCrossChain {
    /** Source chain id of the cross chain package */
    srcChainId: number;
    /** Destination chain id of the cross chainpackage */
    destChainId: number;
    /** Channel id of the cross chain package */
    channelId: number;
    /** Sequence of the cross chain package */
    sequence: Long;
    /** Package type of the cross chain package, like SYN, ACK and FAIL_ACK */
    packageType: number;
    /** Timestamp of the cross chain package */
    timestamp: Long;
    /** Payload of the cross chain package */
    packageLoad: string;
    /** Relayer fee for the cross chain package */
    relayerFee: string;
    /** Relayer fee for the ACK or FAIL_ACK package of this cross chain package */
    ackRelayerFee: string;
}
export interface EventCrossChainProtoMsg {
    typeUrl: "/cosmos.crosschain.v1.EventCrossChain";
    value: Uint8Array;
}
/** EventCrossChain is emitted when there is a cross chain package created */
export interface EventCrossChainAmino {
    /** Source chain id of the cross chain package */
    src_chain_id?: number;
    /** Destination chain id of the cross chainpackage */
    dest_chain_id?: number;
    /** Channel id of the cross chain package */
    channel_id?: number;
    /** Sequence of the cross chain package */
    sequence?: string;
    /** Package type of the cross chain package, like SYN, ACK and FAIL_ACK */
    package_type?: number;
    /** Timestamp of the cross chain package */
    timestamp?: string;
    /** Payload of the cross chain package */
    package_load?: string;
    /** Relayer fee for the cross chain package */
    relayer_fee?: string;
    /** Relayer fee for the ACK or FAIL_ACK package of this cross chain package */
    ack_relayer_fee?: string;
}
export interface EventCrossChainAminoMsg {
    type: "cosmos-sdk/EventCrossChain";
    value: EventCrossChainAmino;
}
/** EventCrossChain is emitted when there is a cross chain package created */
export interface EventCrossChainSDKType {
    src_chain_id: number;
    dest_chain_id: number;
    channel_id: number;
    sequence: Long;
    package_type: number;
    timestamp: Long;
    package_load: string;
    relayer_fee: string;
    ack_relayer_fee: string;
}
export declare const EventCrossChain: {
    typeUrl: string;
    encode(message: EventCrossChain, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventCrossChain;
    fromJSON(object: any): EventCrossChain;
    toJSON(message: EventCrossChain): unknown;
    fromPartial<I extends {
        srcChainId?: number;
        destChainId?: number;
        channelId?: number;
        sequence?: string | number | Long.Long;
        packageType?: number;
        timestamp?: string | number | Long.Long;
        packageLoad?: string;
        relayerFee?: string;
        ackRelayerFee?: string;
    } & {
        srcChainId?: number;
        destChainId?: number;
        channelId?: number;
        sequence?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["sequence"], keyof Long.Long>, never>);
        packageType?: number;
        timestamp?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["timestamp"], keyof Long.Long>, never>);
        packageLoad?: string;
        relayerFee?: string;
        ackRelayerFee?: string;
    } & Record<Exclude<keyof I, keyof EventCrossChain>, never>>(object: I): EventCrossChain;
    fromSDK(object: EventCrossChainSDKType): EventCrossChain;
    toSDK(message: EventCrossChain): EventCrossChainSDKType;
    fromAmino(object: EventCrossChainAmino): EventCrossChain;
    toAmino(message: EventCrossChain): EventCrossChainAmino;
    fromAminoMsg(object: EventCrossChainAminoMsg): EventCrossChain;
    toAminoMsg(message: EventCrossChain): EventCrossChainAminoMsg;
    fromProtoMsg(message: EventCrossChainProtoMsg): EventCrossChain;
    toProto(message: EventCrossChain): Uint8Array;
    toProtoMsg(message: EventCrossChain): EventCrossChainProtoMsg;
};
