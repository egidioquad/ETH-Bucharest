import { Params, ParamsAmino, ParamsSDKType, ChannelPermission, ChannelPermissionAmino, ChannelPermissionSDKType } from "./crosschain";
import * as _m0 from "protobufjs/minimal";
import { Rpc } from "../../../helpers";
export declare const protobufPackage = "cosmos.crosschain.v1";
/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
    /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
    authority: string;
    /**
     * params defines the x/crosschain parameters to update.
     *
     * NOTE: All parameters must be supplied.
     */
    params: Params;
}
export interface MsgUpdateParamsProtoMsg {
    typeUrl: "/cosmos.crosschain.v1.MsgUpdateParams";
    value: Uint8Array;
}
/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParamsAmino {
    /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
    authority?: string;
    /**
     * params defines the x/crosschain parameters to update.
     *
     * NOTE: All parameters must be supplied.
     */
    params: ParamsAmino;
}
export interface MsgUpdateParamsAminoMsg {
    type: "cosmos-sdk/MsgUpdateParams";
    value: MsgUpdateParamsAmino;
}
/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParamsSDKType {
    authority: string;
    params: ParamsSDKType;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}
export interface MsgUpdateParamsResponseProtoMsg {
    typeUrl: "/cosmos.crosschain.v1.MsgUpdateParamsResponse";
    value: Uint8Array;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponseAmino {
}
export interface MsgUpdateParamsResponseAminoMsg {
    type: "cosmos-sdk/MsgUpdateParamsResponse";
    value: MsgUpdateParamsResponseAmino;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponseSDKType {
}
/** MsgUpdateChannelPermissions is the Msg/MsgUpdateChannelPermissions request type. */
export interface MsgUpdateChannelPermissions {
    /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
    authority: string;
    /** channel_permissions defines the channel permissions to update */
    channelPermissions: ChannelPermission[];
}
export interface MsgUpdateChannelPermissionsProtoMsg {
    typeUrl: "/cosmos.crosschain.v1.MsgUpdateChannelPermissions";
    value: Uint8Array;
}
/** MsgUpdateChannelPermissions is the Msg/MsgUpdateChannelPermissions request type. */
export interface MsgUpdateChannelPermissionsAmino {
    /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
    authority?: string;
    /** channel_permissions defines the channel permissions to update */
    channel_permissions?: ChannelPermissionAmino[];
}
export interface MsgUpdateChannelPermissionsAminoMsg {
    type: "cosmos-sdk/MsgUpdateChannelPermissions";
    value: MsgUpdateChannelPermissionsAmino;
}
/** MsgUpdateChannelPermissions is the Msg/MsgUpdateChannelPermissions request type. */
export interface MsgUpdateChannelPermissionsSDKType {
    authority: string;
    channel_permissions: ChannelPermissionSDKType[];
}
/**
 * MsgUpdateChannelPermissionsResponse defines the response structure for executing a
 * MsgUpdateChannelPermissions message.
 */
export interface MsgUpdateChannelPermissionsResponse {
}
export interface MsgUpdateChannelPermissionsResponseProtoMsg {
    typeUrl: "/cosmos.crosschain.v1.MsgUpdateChannelPermissionsResponse";
    value: Uint8Array;
}
/**
 * MsgUpdateChannelPermissionsResponse defines the response structure for executing a
 * MsgUpdateChannelPermissions message.
 */
export interface MsgUpdateChannelPermissionsResponseAmino {
}
export interface MsgUpdateChannelPermissionsResponseAminoMsg {
    type: "cosmos-sdk/MsgUpdateChannelPermissionsResponse";
    value: MsgUpdateChannelPermissionsResponseAmino;
}
/**
 * MsgUpdateChannelPermissionsResponse defines the response structure for executing a
 * MsgUpdateChannelPermissions message.
 */
export interface MsgUpdateChannelPermissionsResponseSDKType {
}
/**
 * MsgMintModuleTokens is the Msg/MintModuleTokens request type.
 * The Msg is used to mint tokens for the crosschain module.
 * This Only permitted to be called by the authority(gov).
 */
export interface MsgMintModuleTokens {
    /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
    authority: string;
    /** initial balance to mint for crosschain module when the chain starts */
    amount: string;
}
export interface MsgMintModuleTokensProtoMsg {
    typeUrl: "/cosmos.crosschain.v1.MsgMintModuleTokens";
    value: Uint8Array;
}
/**
 * MsgMintModuleTokens is the Msg/MintModuleTokens request type.
 * The Msg is used to mint tokens for the crosschain module.
 * This Only permitted to be called by the authority(gov).
 */
export interface MsgMintModuleTokensAmino {
    /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
    authority?: string;
    /** initial balance to mint for crosschain module when the chain starts */
    amount?: string;
}
export interface MsgMintModuleTokensAminoMsg {
    type: "cosmos-sdk/MsgMintModuleTokens";
    value: MsgMintModuleTokensAmino;
}
/**
 * MsgMintModuleTokens is the Msg/MintModuleTokens request type.
 * The Msg is used to mint tokens for the crosschain module.
 * This Only permitted to be called by the authority(gov).
 */
export interface MsgMintModuleTokensSDKType {
    authority: string;
    amount: string;
}
/**
 * MsgMintModuleTokensResponse defines the response structure for executing a
 * MsgMintModuleTokens message.
 */
export interface MsgMintModuleTokensResponse {
}
export interface MsgMintModuleTokensResponseProtoMsg {
    typeUrl: "/cosmos.crosschain.v1.MsgMintModuleTokensResponse";
    value: Uint8Array;
}
/**
 * MsgMintModuleTokensResponse defines the response structure for executing a
 * MsgMintModuleTokens message.
 */
export interface MsgMintModuleTokensResponseAmino {
}
export interface MsgMintModuleTokensResponseAminoMsg {
    type: "cosmos-sdk/MsgMintModuleTokensResponse";
    value: MsgMintModuleTokensResponseAmino;
}
/**
 * MsgMintModuleTokensResponse defines the response structure for executing a
 * MsgMintModuleTokens message.
 */
export interface MsgMintModuleTokensResponseSDKType {
}
export declare const MsgUpdateParams: {
    typeUrl: string;
    encode(message: MsgUpdateParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams;
    fromJSON(object: any): MsgUpdateParams;
    toJSON(message: MsgUpdateParams): unknown;
    fromPartial<I extends {
        authority?: string;
        params?: {
            initModuleBalance?: string;
        };
    } & {
        authority?: string;
        params?: {
            initModuleBalance?: string;
        } & {
            initModuleBalance?: string;
        } & Record<Exclude<keyof I["params"], "initModuleBalance">, never>;
    } & Record<Exclude<keyof I, keyof MsgUpdateParams>, never>>(object: I): MsgUpdateParams;
    fromSDK(object: MsgUpdateParamsSDKType): MsgUpdateParams;
    toSDK(message: MsgUpdateParams): MsgUpdateParamsSDKType;
    fromAmino(object: MsgUpdateParamsAmino): MsgUpdateParams;
    toAmino(message: MsgUpdateParams): MsgUpdateParamsAmino;
    fromAminoMsg(object: MsgUpdateParamsAminoMsg): MsgUpdateParams;
    toAminoMsg(message: MsgUpdateParams): MsgUpdateParamsAminoMsg;
    fromProtoMsg(message: MsgUpdateParamsProtoMsg): MsgUpdateParams;
    toProto(message: MsgUpdateParams): Uint8Array;
    toProtoMsg(message: MsgUpdateParams): MsgUpdateParamsProtoMsg;
};
export declare const MsgUpdateParamsResponse: {
    typeUrl: string;
    encode(_: MsgUpdateParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse;
    fromJSON(_: any): MsgUpdateParamsResponse;
    toJSON(_: MsgUpdateParamsResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgUpdateParamsResponse;
    fromSDK(_: MsgUpdateParamsResponseSDKType): MsgUpdateParamsResponse;
    toSDK(_: MsgUpdateParamsResponse): MsgUpdateParamsResponseSDKType;
    fromAmino(_: MsgUpdateParamsResponseAmino): MsgUpdateParamsResponse;
    toAmino(_: MsgUpdateParamsResponse): MsgUpdateParamsResponseAmino;
    fromAminoMsg(object: MsgUpdateParamsResponseAminoMsg): MsgUpdateParamsResponse;
    toAminoMsg(message: MsgUpdateParamsResponse): MsgUpdateParamsResponseAminoMsg;
    fromProtoMsg(message: MsgUpdateParamsResponseProtoMsg): MsgUpdateParamsResponse;
    toProto(message: MsgUpdateParamsResponse): Uint8Array;
    toProtoMsg(message: MsgUpdateParamsResponse): MsgUpdateParamsResponseProtoMsg;
};
export declare const MsgUpdateChannelPermissions: {
    typeUrl: string;
    encode(message: MsgUpdateChannelPermissions, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateChannelPermissions;
    fromJSON(object: any): MsgUpdateChannelPermissions;
    toJSON(message: MsgUpdateChannelPermissions): unknown;
    fromPartial<I extends {
        authority?: string;
        channelPermissions?: {
            destChainId?: number;
            channelId?: number;
            permission?: number;
        }[];
    } & {
        authority?: string;
        channelPermissions?: {
            destChainId?: number;
            channelId?: number;
            permission?: number;
        }[] & ({
            destChainId?: number;
            channelId?: number;
            permission?: number;
        } & {
            destChainId?: number;
            channelId?: number;
            permission?: number;
        } & Record<Exclude<keyof I["channelPermissions"][number], keyof ChannelPermission>, never>)[] & Record<Exclude<keyof I["channelPermissions"], keyof {
            destChainId?: number;
            channelId?: number;
            permission?: number;
        }[]>, never>;
    } & Record<Exclude<keyof I, keyof MsgUpdateChannelPermissions>, never>>(object: I): MsgUpdateChannelPermissions;
    fromSDK(object: MsgUpdateChannelPermissionsSDKType): MsgUpdateChannelPermissions;
    toSDK(message: MsgUpdateChannelPermissions): MsgUpdateChannelPermissionsSDKType;
    fromAmino(object: MsgUpdateChannelPermissionsAmino): MsgUpdateChannelPermissions;
    toAmino(message: MsgUpdateChannelPermissions): MsgUpdateChannelPermissionsAmino;
    fromAminoMsg(object: MsgUpdateChannelPermissionsAminoMsg): MsgUpdateChannelPermissions;
    toAminoMsg(message: MsgUpdateChannelPermissions): MsgUpdateChannelPermissionsAminoMsg;
    fromProtoMsg(message: MsgUpdateChannelPermissionsProtoMsg): MsgUpdateChannelPermissions;
    toProto(message: MsgUpdateChannelPermissions): Uint8Array;
    toProtoMsg(message: MsgUpdateChannelPermissions): MsgUpdateChannelPermissionsProtoMsg;
};
export declare const MsgUpdateChannelPermissionsResponse: {
    typeUrl: string;
    encode(_: MsgUpdateChannelPermissionsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateChannelPermissionsResponse;
    fromJSON(_: any): MsgUpdateChannelPermissionsResponse;
    toJSON(_: MsgUpdateChannelPermissionsResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgUpdateChannelPermissionsResponse;
    fromSDK(_: MsgUpdateChannelPermissionsResponseSDKType): MsgUpdateChannelPermissionsResponse;
    toSDK(_: MsgUpdateChannelPermissionsResponse): MsgUpdateChannelPermissionsResponseSDKType;
    fromAmino(_: MsgUpdateChannelPermissionsResponseAmino): MsgUpdateChannelPermissionsResponse;
    toAmino(_: MsgUpdateChannelPermissionsResponse): MsgUpdateChannelPermissionsResponseAmino;
    fromAminoMsg(object: MsgUpdateChannelPermissionsResponseAminoMsg): MsgUpdateChannelPermissionsResponse;
    toAminoMsg(message: MsgUpdateChannelPermissionsResponse): MsgUpdateChannelPermissionsResponseAminoMsg;
    fromProtoMsg(message: MsgUpdateChannelPermissionsResponseProtoMsg): MsgUpdateChannelPermissionsResponse;
    toProto(message: MsgUpdateChannelPermissionsResponse): Uint8Array;
    toProtoMsg(message: MsgUpdateChannelPermissionsResponse): MsgUpdateChannelPermissionsResponseProtoMsg;
};
export declare const MsgMintModuleTokens: {
    typeUrl: string;
    encode(message: MsgMintModuleTokens, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgMintModuleTokens;
    fromJSON(object: any): MsgMintModuleTokens;
    toJSON(message: MsgMintModuleTokens): unknown;
    fromPartial<I extends {
        authority?: string;
        amount?: string;
    } & {
        authority?: string;
        amount?: string;
    } & Record<Exclude<keyof I, keyof MsgMintModuleTokens>, never>>(object: I): MsgMintModuleTokens;
    fromSDK(object: MsgMintModuleTokensSDKType): MsgMintModuleTokens;
    toSDK(message: MsgMintModuleTokens): MsgMintModuleTokensSDKType;
    fromAmino(object: MsgMintModuleTokensAmino): MsgMintModuleTokens;
    toAmino(message: MsgMintModuleTokens): MsgMintModuleTokensAmino;
    fromAminoMsg(object: MsgMintModuleTokensAminoMsg): MsgMintModuleTokens;
    toAminoMsg(message: MsgMintModuleTokens): MsgMintModuleTokensAminoMsg;
    fromProtoMsg(message: MsgMintModuleTokensProtoMsg): MsgMintModuleTokens;
    toProto(message: MsgMintModuleTokens): Uint8Array;
    toProtoMsg(message: MsgMintModuleTokens): MsgMintModuleTokensProtoMsg;
};
export declare const MsgMintModuleTokensResponse: {
    typeUrl: string;
    encode(_: MsgMintModuleTokensResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgMintModuleTokensResponse;
    fromJSON(_: any): MsgMintModuleTokensResponse;
    toJSON(_: MsgMintModuleTokensResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgMintModuleTokensResponse;
    fromSDK(_: MsgMintModuleTokensResponseSDKType): MsgMintModuleTokensResponse;
    toSDK(_: MsgMintModuleTokensResponse): MsgMintModuleTokensResponseSDKType;
    fromAmino(_: MsgMintModuleTokensResponseAmino): MsgMintModuleTokensResponse;
    toAmino(_: MsgMintModuleTokensResponse): MsgMintModuleTokensResponseAmino;
    fromAminoMsg(object: MsgMintModuleTokensResponseAminoMsg): MsgMintModuleTokensResponse;
    toAminoMsg(message: MsgMintModuleTokensResponse): MsgMintModuleTokensResponseAminoMsg;
    fromProtoMsg(message: MsgMintModuleTokensResponseProtoMsg): MsgMintModuleTokensResponse;
    toProto(message: MsgMintModuleTokensResponse): Uint8Array;
    toProtoMsg(message: MsgMintModuleTokensResponse): MsgMintModuleTokensResponseProtoMsg;
};
/** Msg defines the crosschain Msg service. */
export interface Msg {
    /**
     * UpdateParams defines a governance operation for updating the x/crosschain module parameters.
     * The authority is defined in the keeper.
     *
     * Since: cosmos-sdk 0.47
     */
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
    /**
     * UpdateChannelPermissions defines a governance operation for updating the channel permissions.
     * The authority is defined in the keeper.
     */
    UpdateChannelPermissions(request: MsgUpdateChannelPermissions): Promise<MsgUpdateChannelPermissionsResponse>;
    /**
     * MintModuleTokens defines a governance operation for minting tokens for the crosschain module.
     * The authority is defined in the keeper.
     */
    MintModuleTokens(request: MsgMintModuleTokens): Promise<MsgMintModuleTokensResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
    UpdateChannelPermissions(request: MsgUpdateChannelPermissions): Promise<MsgUpdateChannelPermissionsResponse>;
    MintModuleTokens(request: MsgMintModuleTokens): Promise<MsgMintModuleTokensResponse>;
}
