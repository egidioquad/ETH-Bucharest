import { Any, AnyProtoMsg, AnyAmino, AnySDKType } from "../../../google/protobuf/any";
import { Timestamp, TimestampSDKType } from "../../../google/protobuf/timestamp";
import { SendAuthorization, SendAuthorizationProtoMsg, SendAuthorizationSDKType } from "../../bank/v1beta1/authz";
import { StakeAuthorization, StakeAuthorizationProtoMsg, StakeAuthorizationSDKType } from "../../staking/v1beta1/authz";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "cosmos.authz.v1beta1";
/**
 * GenericAuthorization gives the grantee unrestricted permissions to execute
 * the provided method on behalf of the granter's account.
 */
export interface GenericAuthorization {
    $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
    /** Msg, identified by it's type URL, to grant unrestricted permissions to execute */
    msg: string;
}
export interface GenericAuthorizationProtoMsg {
    typeUrl: "/cosmos.authz.v1beta1.GenericAuthorization";
    value: Uint8Array;
}
/**
 * GenericAuthorization gives the grantee unrestricted permissions to execute
 * the provided method on behalf of the granter's account.
 */
export interface GenericAuthorizationAmino {
    /** Msg, identified by it's type URL, to grant unrestricted permissions to execute */
    msg?: string;
}
export interface GenericAuthorizationAminoMsg {
    type: "cosmos-sdk/GenericAuthorization";
    value: GenericAuthorizationAmino;
}
/**
 * GenericAuthorization gives the grantee unrestricted permissions to execute
 * the provided method on behalf of the granter's account.
 */
export interface GenericAuthorizationSDKType {
    $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
    msg: string;
}
/**
 * Grant gives permissions to execute
 * the provide method with expiration time.
 */
export interface Grant {
    authorization?: GenericAuthorization | SendAuthorization | StakeAuthorization | Any | undefined;
    /**
     * time when the grant will expire and will be pruned. If null, then the grant
     * doesn't have a time expiration (other conditions  in `authorization`
     * may apply to invalidate the grant)
     */
    expiration?: Timestamp;
}
export interface GrantProtoMsg {
    typeUrl: "/cosmos.authz.v1beta1.Grant";
    value: Uint8Array;
}
export type GrantEncoded = Omit<Grant, "authorization"> & {
    authorization?: GenericAuthorizationProtoMsg | SendAuthorizationProtoMsg | StakeAuthorizationProtoMsg | AnyProtoMsg | undefined;
};
/**
 * Grant gives permissions to execute
 * the provide method with expiration time.
 */
export interface GrantAmino {
    authorization?: AnyAmino;
    /**
     * time when the grant will expire and will be pruned. If null, then the grant
     * doesn't have a time expiration (other conditions  in `authorization`
     * may apply to invalidate the grant)
     */
    expiration?: string;
}
export interface GrantAminoMsg {
    type: "cosmos-sdk/Grant";
    value: GrantAmino;
}
/**
 * Grant gives permissions to execute
 * the provide method with expiration time.
 */
export interface GrantSDKType {
    authorization?: GenericAuthorizationSDKType | SendAuthorizationSDKType | StakeAuthorizationSDKType | AnySDKType | undefined;
    expiration?: TimestampSDKType;
}
/**
 * GrantAuthorization extends a grant with both the addresses of the grantee and granter.
 * It is used in genesis.proto and query.proto
 */
export interface GrantAuthorization {
    granter: string;
    grantee: string;
    authorization?: GenericAuthorization | SendAuthorization | StakeAuthorization | Any | undefined;
    expiration?: Timestamp;
}
export interface GrantAuthorizationProtoMsg {
    typeUrl: "/cosmos.authz.v1beta1.GrantAuthorization";
    value: Uint8Array;
}
export type GrantAuthorizationEncoded = Omit<GrantAuthorization, "authorization"> & {
    authorization?: GenericAuthorizationProtoMsg | SendAuthorizationProtoMsg | StakeAuthorizationProtoMsg | AnyProtoMsg | undefined;
};
/**
 * GrantAuthorization extends a grant with both the addresses of the grantee and granter.
 * It is used in genesis.proto and query.proto
 */
export interface GrantAuthorizationAmino {
    granter?: string;
    grantee?: string;
    authorization?: AnyAmino;
    expiration?: string;
}
export interface GrantAuthorizationAminoMsg {
    type: "cosmos-sdk/GrantAuthorization";
    value: GrantAuthorizationAmino;
}
/**
 * GrantAuthorization extends a grant with both the addresses of the grantee and granter.
 * It is used in genesis.proto and query.proto
 */
export interface GrantAuthorizationSDKType {
    granter: string;
    grantee: string;
    authorization?: GenericAuthorizationSDKType | SendAuthorizationSDKType | StakeAuthorizationSDKType | AnySDKType | undefined;
    expiration?: TimestampSDKType;
}
/** GrantQueueItem contains the list of TypeURL of a sdk.Msg. */
export interface GrantQueueItem {
    /** msg_type_urls contains the list of TypeURL of a sdk.Msg. */
    msgTypeUrls: string[];
}
export interface GrantQueueItemProtoMsg {
    typeUrl: "/cosmos.authz.v1beta1.GrantQueueItem";
    value: Uint8Array;
}
/** GrantQueueItem contains the list of TypeURL of a sdk.Msg. */
export interface GrantQueueItemAmino {
    /** msg_type_urls contains the list of TypeURL of a sdk.Msg. */
    msg_type_urls?: string[];
}
export interface GrantQueueItemAminoMsg {
    type: "cosmos-sdk/GrantQueueItem";
    value: GrantQueueItemAmino;
}
/** GrantQueueItem contains the list of TypeURL of a sdk.Msg. */
export interface GrantQueueItemSDKType {
    msg_type_urls: string[];
}
export declare const GenericAuthorization: {
    typeUrl: string;
    encode(message: GenericAuthorization, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenericAuthorization;
    fromJSON(object: any): GenericAuthorization;
    toJSON(message: GenericAuthorization): unknown;
    fromPartial<I extends {
        $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
        msg?: string;
    } & {
        $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
        msg?: string;
    } & Record<Exclude<keyof I, keyof GenericAuthorization>, never>>(object: I): GenericAuthorization;
    fromSDK(object: GenericAuthorizationSDKType): GenericAuthorization;
    toSDK(message: GenericAuthorization): GenericAuthorizationSDKType;
    fromAmino(object: GenericAuthorizationAmino): GenericAuthorization;
    toAmino(message: GenericAuthorization): GenericAuthorizationAmino;
    fromAminoMsg(object: GenericAuthorizationAminoMsg): GenericAuthorization;
    toAminoMsg(message: GenericAuthorization): GenericAuthorizationAminoMsg;
    fromProtoMsg(message: GenericAuthorizationProtoMsg): GenericAuthorization;
    toProto(message: GenericAuthorization): Uint8Array;
    toProtoMsg(message: GenericAuthorization): GenericAuthorizationProtoMsg;
};
export declare const Grant: {
    typeUrl: string;
    encode(message: Grant, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Grant;
    fromJSON(object: any): Grant;
    toJSON(message: Grant): unknown;
    fromPartial<I extends {
        authorization?: {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        } | {
            $typeUrl?: "/cosmos.bank.v1beta1.SendAuthorization";
            spendLimit?: {
                denom?: string;
                amount?: string;
            }[];
            allowList?: string[];
        } | {
            $typeUrl?: "/cosmos.staking.v1beta1.StakeAuthorization";
            maxTokens?: {
                denom?: string;
                amount?: string;
            };
            allowList?: {
                address?: string[];
            };
            denyList?: {
                address?: string[];
            };
            authorizationType?: import("../../staking/v1beta1/authz").AuthorizationType;
        } | {
            $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
            msg?: string;
        };
        expiration?: {
            seconds?: string | number | import("long").Long;
            nanos?: number;
        };
    } & {
        authorization?: ({
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        } & {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        } & Record<Exclude<keyof I["authorization"], keyof Any>, never>) | ({
            $typeUrl?: "/cosmos.bank.v1beta1.SendAuthorization";
            spendLimit?: {
                denom?: string;
                amount?: string;
            }[];
            allowList?: string[];
        } & {
            $typeUrl?: "/cosmos.bank.v1beta1.SendAuthorization";
            spendLimit?: {
                denom?: string;
                amount?: string;
            }[] & ({
                denom?: string;
                amount?: string;
            } & {
                denom?: string;
                amount?: string;
            } & Record<Exclude<keyof I["authorization"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["authorization"]["spendLimit"], keyof {
                denom?: string;
                amount?: string;
            }[]>, never>;
            allowList?: string[] & string[] & Record<Exclude<keyof I["authorization"]["allowList"], keyof string[]>, never>;
        } & Record<Exclude<keyof I["authorization"], keyof SendAuthorization>, never>) | ({
            $typeUrl?: "/cosmos.staking.v1beta1.StakeAuthorization";
            maxTokens?: {
                denom?: string;
                amount?: string;
            };
            allowList?: {
                address?: string[];
            };
            denyList?: {
                address?: string[];
            };
            authorizationType?: import("../../staking/v1beta1/authz").AuthorizationType;
        } & {
            $typeUrl?: "/cosmos.staking.v1beta1.StakeAuthorization";
            maxTokens?: {
                denom?: string;
                amount?: string;
            } & {
                denom?: string;
                amount?: string;
            } & Record<Exclude<keyof I["authorization"]["maxTokens"], keyof import("../../base/v1beta1/coin").Coin>, never>;
            allowList?: {
                address?: string[];
            } & {
                address?: string[] & string[] & Record<Exclude<keyof I["authorization"]["allowList"]["address"], keyof string[]>, never>;
            } & Record<Exclude<keyof I["authorization"]["allowList"], "address">, never>;
            denyList?: {
                address?: string[];
            } & {
                address?: string[] & string[] & Record<Exclude<keyof I["authorization"]["denyList"]["address"], keyof string[]>, never>;
            } & Record<Exclude<keyof I["authorization"]["denyList"], "address">, never>;
            authorizationType?: import("../../staking/v1beta1/authz").AuthorizationType;
        } & Record<Exclude<keyof I["authorization"], keyof StakeAuthorization>, never>) | ({
            $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
            msg?: string;
        } & {
            $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
            msg?: string;
        } & Record<Exclude<keyof I["authorization"], keyof GenericAuthorization>, never>);
        expiration?: {
            seconds?: string | number | import("long").Long;
            nanos?: number;
        } & {
            seconds?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["expiration"]["seconds"], keyof import("long").Long>, never>);
            nanos?: number;
        } & Record<Exclude<keyof I["expiration"], keyof Timestamp>, never>;
    } & Record<Exclude<keyof I, keyof Grant>, never>>(object: I): Grant;
    fromSDK(object: GrantSDKType): Grant;
    toSDK(message: Grant): GrantSDKType;
    fromAmino(object: GrantAmino): Grant;
    toAmino(message: Grant): GrantAmino;
    fromAminoMsg(object: GrantAminoMsg): Grant;
    toAminoMsg(message: Grant): GrantAminoMsg;
    fromProtoMsg(message: GrantProtoMsg): Grant;
    toProto(message: Grant): Uint8Array;
    toProtoMsg(message: Grant): GrantProtoMsg;
};
export declare const GrantAuthorization: {
    typeUrl: string;
    encode(message: GrantAuthorization, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GrantAuthorization;
    fromJSON(object: any): GrantAuthorization;
    toJSON(message: GrantAuthorization): unknown;
    fromPartial<I extends {
        granter?: string;
        grantee?: string;
        authorization?: {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        } | {
            $typeUrl?: "/cosmos.bank.v1beta1.SendAuthorization";
            spendLimit?: {
                denom?: string;
                amount?: string;
            }[];
            allowList?: string[];
        } | {
            $typeUrl?: "/cosmos.staking.v1beta1.StakeAuthorization";
            maxTokens?: {
                denom?: string;
                amount?: string;
            };
            allowList?: {
                address?: string[];
            };
            denyList?: {
                address?: string[];
            };
            authorizationType?: import("../../staking/v1beta1/authz").AuthorizationType;
        } | {
            $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
            msg?: string;
        };
        expiration?: {
            seconds?: string | number | import("long").Long;
            nanos?: number;
        };
    } & {
        granter?: string;
        grantee?: string;
        authorization?: ({
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        } & {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        } & Record<Exclude<keyof I["authorization"], keyof Any>, never>) | ({
            $typeUrl?: "/cosmos.bank.v1beta1.SendAuthorization";
            spendLimit?: {
                denom?: string;
                amount?: string;
            }[];
            allowList?: string[];
        } & {
            $typeUrl?: "/cosmos.bank.v1beta1.SendAuthorization";
            spendLimit?: {
                denom?: string;
                amount?: string;
            }[] & ({
                denom?: string;
                amount?: string;
            } & {
                denom?: string;
                amount?: string;
            } & Record<Exclude<keyof I["authorization"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["authorization"]["spendLimit"], keyof {
                denom?: string;
                amount?: string;
            }[]>, never>;
            allowList?: string[] & string[] & Record<Exclude<keyof I["authorization"]["allowList"], keyof string[]>, never>;
        } & Record<Exclude<keyof I["authorization"], keyof SendAuthorization>, never>) | ({
            $typeUrl?: "/cosmos.staking.v1beta1.StakeAuthorization";
            maxTokens?: {
                denom?: string;
                amount?: string;
            };
            allowList?: {
                address?: string[];
            };
            denyList?: {
                address?: string[];
            };
            authorizationType?: import("../../staking/v1beta1/authz").AuthorizationType;
        } & {
            $typeUrl?: "/cosmos.staking.v1beta1.StakeAuthorization";
            maxTokens?: {
                denom?: string;
                amount?: string;
            } & {
                denom?: string;
                amount?: string;
            } & Record<Exclude<keyof I["authorization"]["maxTokens"], keyof import("../../base/v1beta1/coin").Coin>, never>;
            allowList?: {
                address?: string[];
            } & {
                address?: string[] & string[] & Record<Exclude<keyof I["authorization"]["allowList"]["address"], keyof string[]>, never>;
            } & Record<Exclude<keyof I["authorization"]["allowList"], "address">, never>;
            denyList?: {
                address?: string[];
            } & {
                address?: string[] & string[] & Record<Exclude<keyof I["authorization"]["denyList"]["address"], keyof string[]>, never>;
            } & Record<Exclude<keyof I["authorization"]["denyList"], "address">, never>;
            authorizationType?: import("../../staking/v1beta1/authz").AuthorizationType;
        } & Record<Exclude<keyof I["authorization"], keyof StakeAuthorization>, never>) | ({
            $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
            msg?: string;
        } & {
            $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
            msg?: string;
        } & Record<Exclude<keyof I["authorization"], keyof GenericAuthorization>, never>);
        expiration?: {
            seconds?: string | number | import("long").Long;
            nanos?: number;
        } & {
            seconds?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["expiration"]["seconds"], keyof import("long").Long>, never>);
            nanos?: number;
        } & Record<Exclude<keyof I["expiration"], keyof Timestamp>, never>;
    } & Record<Exclude<keyof I, keyof GrantAuthorization>, never>>(object: I): GrantAuthorization;
    fromSDK(object: GrantAuthorizationSDKType): GrantAuthorization;
    toSDK(message: GrantAuthorization): GrantAuthorizationSDKType;
    fromAmino(object: GrantAuthorizationAmino): GrantAuthorization;
    toAmino(message: GrantAuthorization): GrantAuthorizationAmino;
    fromAminoMsg(object: GrantAuthorizationAminoMsg): GrantAuthorization;
    toAminoMsg(message: GrantAuthorization): GrantAuthorizationAminoMsg;
    fromProtoMsg(message: GrantAuthorizationProtoMsg): GrantAuthorization;
    toProto(message: GrantAuthorization): Uint8Array;
    toProtoMsg(message: GrantAuthorization): GrantAuthorizationProtoMsg;
};
export declare const GrantQueueItem: {
    typeUrl: string;
    encode(message: GrantQueueItem, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GrantQueueItem;
    fromJSON(object: any): GrantQueueItem;
    toJSON(message: GrantQueueItem): unknown;
    fromPartial<I extends {
        msgTypeUrls?: string[];
    } & {
        msgTypeUrls?: string[] & string[] & Record<Exclude<keyof I["msgTypeUrls"], keyof string[]>, never>;
    } & Record<Exclude<keyof I, "msgTypeUrls">, never>>(object: I): GrantQueueItem;
    fromSDK(object: GrantQueueItemSDKType): GrantQueueItem;
    toSDK(message: GrantQueueItem): GrantQueueItemSDKType;
    fromAmino(object: GrantQueueItemAmino): GrantQueueItem;
    toAmino(message: GrantQueueItem): GrantQueueItemAmino;
    fromAminoMsg(object: GrantQueueItemAminoMsg): GrantQueueItem;
    toAminoMsg(message: GrantQueueItem): GrantQueueItemAminoMsg;
    fromProtoMsg(message: GrantQueueItemProtoMsg): GrantQueueItem;
    toProto(message: GrantQueueItem): Uint8Array;
    toProtoMsg(message: GrantQueueItem): GrantQueueItemProtoMsg;
};
export declare const Cosmos_authzv1beta1Authorization_InterfaceDecoder: (input: _m0.Reader | Uint8Array) => GenericAuthorization | SendAuthorization | StakeAuthorization | Any;
export declare const Cosmos_authzv1beta1Authorization_FromAmino: (content: AnyAmino) => Any;
export declare const Cosmos_authzv1beta1Authorization_ToAmino: (content: Any) => AnyAmino;
