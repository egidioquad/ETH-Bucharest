import { Grant, GrantAmino, GrantSDKType } from "./authz";
import { Any, AnyProtoMsg, AnyAmino, AnySDKType } from "../../../google/protobuf/any";
import * as _m0 from "protobufjs/minimal";
import { Rpc } from "../../../helpers";
export declare const protobufPackage = "cosmos.authz.v1beta1";
/**
 * MsgGrant is a request type for Grant method. It declares authorization to the grantee
 * on behalf of the granter with the provided expiration time.
 */
export interface MsgGrant {
    granter: string;
    grantee: string;
    grant: Grant;
}
export interface MsgGrantProtoMsg {
    typeUrl: "/cosmos.authz.v1beta1.MsgGrant";
    value: Uint8Array;
}
/**
 * MsgGrant is a request type for Grant method. It declares authorization to the grantee
 * on behalf of the granter with the provided expiration time.
 */
export interface MsgGrantAmino {
    granter?: string;
    grantee?: string;
    grant: GrantAmino;
}
export interface MsgGrantAminoMsg {
    type: "cosmos-sdk/MsgGrant";
    value: MsgGrantAmino;
}
/**
 * MsgGrant is a request type for Grant method. It declares authorization to the grantee
 * on behalf of the granter with the provided expiration time.
 */
export interface MsgGrantSDKType {
    granter: string;
    grantee: string;
    grant: GrantSDKType;
}
/** MsgExecResponse defines the Msg/MsgExecResponse response type. */
export interface MsgExecResponse {
    results: Uint8Array[];
}
export interface MsgExecResponseProtoMsg {
    typeUrl: "/cosmos.authz.v1beta1.MsgExecResponse";
    value: Uint8Array;
}
/** MsgExecResponse defines the Msg/MsgExecResponse response type. */
export interface MsgExecResponseAmino {
    results?: string[];
}
export interface MsgExecResponseAminoMsg {
    type: "cosmos-sdk/MsgExecResponse";
    value: MsgExecResponseAmino;
}
/** MsgExecResponse defines the Msg/MsgExecResponse response type. */
export interface MsgExecResponseSDKType {
    results: Uint8Array[];
}
/**
 * MsgExec attempts to execute the provided messages using
 * authorizations granted to the grantee. Each message should have only
 * one signer corresponding to the granter of the authorization.
 */
export interface MsgExec {
    grantee: string;
    /**
     * Execute Msg.
     * The x/authz will try to find a grant matching (msg.signers[0], grantee, MsgTypeURL(msg))
     * triple and validate it.
     */
    msgs: (Any)[] | Any[];
}
export interface MsgExecProtoMsg {
    typeUrl: "/cosmos.authz.v1beta1.MsgExec";
    value: Uint8Array;
}
export type MsgExecEncoded = Omit<MsgExec, "msgs"> & {
    /**
     * Execute Msg.
     * The x/authz will try to find a grant matching (msg.signers[0], grantee, MsgTypeURL(msg))
     * triple and validate it.
     */
    msgs: (AnyProtoMsg)[];
};
/**
 * MsgExec attempts to execute the provided messages using
 * authorizations granted to the grantee. Each message should have only
 * one signer corresponding to the granter of the authorization.
 */
export interface MsgExecAmino {
    grantee?: string;
    /**
     * Execute Msg.
     * The x/authz will try to find a grant matching (msg.signers[0], grantee, MsgTypeURL(msg))
     * triple and validate it.
     */
    msgs?: AnyAmino[];
}
export interface MsgExecAminoMsg {
    type: "cosmos-sdk/MsgExec";
    value: MsgExecAmino;
}
/**
 * MsgExec attempts to execute the provided messages using
 * authorizations granted to the grantee. Each message should have only
 * one signer corresponding to the granter of the authorization.
 */
export interface MsgExecSDKType {
    grantee: string;
    msgs: (AnySDKType)[];
}
/** MsgGrantResponse defines the Msg/MsgGrant response type. */
export interface MsgGrantResponse {
}
export interface MsgGrantResponseProtoMsg {
    typeUrl: "/cosmos.authz.v1beta1.MsgGrantResponse";
    value: Uint8Array;
}
/** MsgGrantResponse defines the Msg/MsgGrant response type. */
export interface MsgGrantResponseAmino {
}
export interface MsgGrantResponseAminoMsg {
    type: "cosmos-sdk/MsgGrantResponse";
    value: MsgGrantResponseAmino;
}
/** MsgGrantResponse defines the Msg/MsgGrant response type. */
export interface MsgGrantResponseSDKType {
}
/**
 * MsgRevoke revokes any authorization with the provided sdk.Msg type on the
 * granter's account with that has been granted to the grantee.
 */
export interface MsgRevoke {
    granter: string;
    grantee: string;
    msgTypeUrl: string;
}
export interface MsgRevokeProtoMsg {
    typeUrl: "/cosmos.authz.v1beta1.MsgRevoke";
    value: Uint8Array;
}
/**
 * MsgRevoke revokes any authorization with the provided sdk.Msg type on the
 * granter's account with that has been granted to the grantee.
 */
export interface MsgRevokeAmino {
    granter?: string;
    grantee?: string;
    msg_type_url?: string;
}
export interface MsgRevokeAminoMsg {
    type: "cosmos-sdk/MsgRevoke";
    value: MsgRevokeAmino;
}
/**
 * MsgRevoke revokes any authorization with the provided sdk.Msg type on the
 * granter's account with that has been granted to the grantee.
 */
export interface MsgRevokeSDKType {
    granter: string;
    grantee: string;
    msg_type_url: string;
}
/** MsgRevokeResponse defines the Msg/MsgRevokeResponse response type. */
export interface MsgRevokeResponse {
}
export interface MsgRevokeResponseProtoMsg {
    typeUrl: "/cosmos.authz.v1beta1.MsgRevokeResponse";
    value: Uint8Array;
}
/** MsgRevokeResponse defines the Msg/MsgRevokeResponse response type. */
export interface MsgRevokeResponseAmino {
}
export interface MsgRevokeResponseAminoMsg {
    type: "cosmos-sdk/MsgRevokeResponse";
    value: MsgRevokeResponseAmino;
}
/** MsgRevokeResponse defines the Msg/MsgRevokeResponse response type. */
export interface MsgRevokeResponseSDKType {
}
export declare const MsgGrant: {
    typeUrl: string;
    encode(message: MsgGrant, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgGrant;
    fromJSON(object: any): MsgGrant;
    toJSON(message: MsgGrant): unknown;
    fromPartial<I extends {
        granter?: string;
        grantee?: string;
        grant?: {
            authorization?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.bank.v1beta1.SendAuthorization";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                allowList?: string[];
            } | {
                $typeUrl?: "/cosmos.staking.v1beta1.StakeAuthorization";
                maxTokens?: {
                    denom?: string;
                    amount?: string;
                };
                allowList?: {
                    address?: string[];
                };
                denyList?: {
                    address?: string[];
                };
                authorizationType?: import("../../staking/v1beta1/authz").AuthorizationType;
            } | {
                $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
                msg?: string;
            };
            expiration?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            };
        };
    } & {
        granter?: string;
        grantee?: string;
        grant?: {
            authorization?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.bank.v1beta1.SendAuthorization";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                allowList?: string[];
            } | {
                $typeUrl?: "/cosmos.staking.v1beta1.StakeAuthorization";
                maxTokens?: {
                    denom?: string;
                    amount?: string;
                };
                allowList?: {
                    address?: string[];
                };
                denyList?: {
                    address?: string[];
                };
                authorizationType?: import("../../staking/v1beta1/authz").AuthorizationType;
            } | {
                $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
                msg?: string;
            };
            expiration?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            };
        } & {
            authorization?: ({
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } & {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } & Record<Exclude<keyof I["grant"]["authorization"], keyof Any>, never>) | ({
                $typeUrl?: "/cosmos.bank.v1beta1.SendAuthorization";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                allowList?: string[];
            } & {
                $typeUrl?: "/cosmos.bank.v1beta1.SendAuthorization";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[] & ({
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["grant"]["authorization"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["grant"]["authorization"]["spendLimit"], keyof {
                    denom?: string;
                    amount?: string;
                }[]>, never>;
                allowList?: string[] & string[] & Record<Exclude<keyof I["grant"]["authorization"]["allowList"], keyof string[]>, never>;
            } & Record<Exclude<keyof I["grant"]["authorization"], keyof import("../../bank/v1beta1/authz").SendAuthorization>, never>) | ({
                $typeUrl?: "/cosmos.staking.v1beta1.StakeAuthorization";
                maxTokens?: {
                    denom?: string;
                    amount?: string;
                };
                allowList?: {
                    address?: string[];
                };
                denyList?: {
                    address?: string[];
                };
                authorizationType?: import("../../staking/v1beta1/authz").AuthorizationType;
            } & {
                $typeUrl?: "/cosmos.staking.v1beta1.StakeAuthorization";
                maxTokens?: {
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["grant"]["authorization"]["maxTokens"], keyof import("../../base/v1beta1/coin").Coin>, never>;
                allowList?: {
                    address?: string[];
                } & {
                    address?: string[] & string[] & Record<Exclude<keyof I["grant"]["authorization"]["allowList"]["address"], keyof string[]>, never>;
                } & Record<Exclude<keyof I["grant"]["authorization"]["allowList"], "address">, never>;
                denyList?: {
                    address?: string[];
                } & {
                    address?: string[] & string[] & Record<Exclude<keyof I["grant"]["authorization"]["denyList"]["address"], keyof string[]>, never>;
                } & Record<Exclude<keyof I["grant"]["authorization"]["denyList"], "address">, never>;
                authorizationType?: import("../../staking/v1beta1/authz").AuthorizationType;
            } & Record<Exclude<keyof I["grant"]["authorization"], keyof import("../../staking/v1beta1/authz").StakeAuthorization>, never>) | ({
                $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
                msg?: string;
            } & {
                $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
                msg?: string;
            } & Record<Exclude<keyof I["grant"]["authorization"], keyof import("./authz").GenericAuthorization>, never>);
            expiration?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            } & {
                seconds?: string | number | (import("long").Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | import("long").Long) => import("long").Long;
                    and: (other: string | number | import("long").Long) => import("long").Long;
                    compare: (other: string | number | import("long").Long) => number;
                    comp: (other: string | number | import("long").Long) => number;
                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                    equals: (other: string | number | import("long").Long) => boolean;
                    eq: (other: string | number | import("long").Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | import("long").Long) => boolean;
                    gt: (other: string | number | import("long").Long) => boolean;
                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                    gte: (other: string | number | import("long").Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | import("long").Long) => boolean;
                    lt: (other: string | number | import("long").Long) => boolean;
                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                    lte: (other: string | number | import("long").Long) => boolean;
                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                    mod: (other: string | number | import("long").Long) => import("long").Long;
                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                    negate: () => import("long").Long;
                    neg: () => import("long").Long;
                    not: () => import("long").Long;
                    notEquals: (other: string | number | import("long").Long) => boolean;
                    neq: (other: string | number | import("long").Long) => boolean;
                    or: (other: string | number | import("long").Long) => import("long").Long;
                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                    shl: (numBits: number | import("long").Long) => import("long").Long;
                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                    shr: (numBits: number | import("long").Long) => import("long").Long;
                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                    shru: (numBits: number | import("long").Long) => import("long").Long;
                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => import("long").Long;
                    toString: (radix?: number) => string;
                    toUnsigned: () => import("long").Long;
                    xor: (other: string | number | import("long").Long) => import("long").Long;
                } & Record<Exclude<keyof I["grant"]["expiration"]["seconds"], keyof import("long").Long>, never>);
                nanos?: number;
            } & Record<Exclude<keyof I["grant"]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
        } & Record<Exclude<keyof I["grant"], keyof Grant>, never>;
    } & Record<Exclude<keyof I, keyof MsgGrant>, never>>(object: I): MsgGrant;
    fromSDK(object: MsgGrantSDKType): MsgGrant;
    toSDK(message: MsgGrant): MsgGrantSDKType;
    fromAmino(object: MsgGrantAmino): MsgGrant;
    toAmino(message: MsgGrant): MsgGrantAmino;
    fromAminoMsg(object: MsgGrantAminoMsg): MsgGrant;
    toAminoMsg(message: MsgGrant): MsgGrantAminoMsg;
    fromProtoMsg(message: MsgGrantProtoMsg): MsgGrant;
    toProto(message: MsgGrant): Uint8Array;
    toProtoMsg(message: MsgGrant): MsgGrantProtoMsg;
};
export declare const MsgExecResponse: {
    typeUrl: string;
    encode(message: MsgExecResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgExecResponse;
    fromJSON(object: any): MsgExecResponse;
    toJSON(message: MsgExecResponse): unknown;
    fromPartial<I extends {
        results?: Uint8Array[];
    } & {
        results?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["results"], keyof Uint8Array[]>, never>;
    } & Record<Exclude<keyof I, "results">, never>>(object: I): MsgExecResponse;
    fromSDK(object: MsgExecResponseSDKType): MsgExecResponse;
    toSDK(message: MsgExecResponse): MsgExecResponseSDKType;
    fromAmino(object: MsgExecResponseAmino): MsgExecResponse;
    toAmino(message: MsgExecResponse): MsgExecResponseAmino;
    fromAminoMsg(object: MsgExecResponseAminoMsg): MsgExecResponse;
    toAminoMsg(message: MsgExecResponse): MsgExecResponseAminoMsg;
    fromProtoMsg(message: MsgExecResponseProtoMsg): MsgExecResponse;
    toProto(message: MsgExecResponse): Uint8Array;
    toProtoMsg(message: MsgExecResponse): MsgExecResponseProtoMsg;
};
export declare const MsgExec: {
    typeUrl: string;
    encode(message: MsgExec, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgExec;
    fromJSON(object: any): MsgExec;
    toJSON(message: MsgExec): unknown;
    fromPartial<I extends {
        grantee?: string;
        msgs?: {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        }[];
    } & {
        grantee?: string;
        msgs?: {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        }[] & ({
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        } & {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        } & Record<Exclude<keyof I["msgs"][number], keyof Any>, never>)[] & Record<Exclude<keyof I["msgs"], keyof {
            $typeUrl?: "/google.protobuf.Any";
            typeUrl?: string;
            value?: Uint8Array;
        }[]>, never>;
    } & Record<Exclude<keyof I, keyof MsgExec>, never>>(object: I): MsgExec;
    fromSDK(object: MsgExecSDKType): MsgExec;
    toSDK(message: MsgExec): MsgExecSDKType;
    fromAmino(object: MsgExecAmino): MsgExec;
    toAmino(message: MsgExec): MsgExecAmino;
    fromAminoMsg(object: MsgExecAminoMsg): MsgExec;
    toAminoMsg(message: MsgExec): MsgExecAminoMsg;
    fromProtoMsg(message: MsgExecProtoMsg): MsgExec;
    toProto(message: MsgExec): Uint8Array;
    toProtoMsg(message: MsgExec): MsgExecProtoMsg;
};
export declare const MsgGrantResponse: {
    typeUrl: string;
    encode(_: MsgGrantResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgGrantResponse;
    fromJSON(_: any): MsgGrantResponse;
    toJSON(_: MsgGrantResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgGrantResponse;
    fromSDK(_: MsgGrantResponseSDKType): MsgGrantResponse;
    toSDK(_: MsgGrantResponse): MsgGrantResponseSDKType;
    fromAmino(_: MsgGrantResponseAmino): MsgGrantResponse;
    toAmino(_: MsgGrantResponse): MsgGrantResponseAmino;
    fromAminoMsg(object: MsgGrantResponseAminoMsg): MsgGrantResponse;
    toAminoMsg(message: MsgGrantResponse): MsgGrantResponseAminoMsg;
    fromProtoMsg(message: MsgGrantResponseProtoMsg): MsgGrantResponse;
    toProto(message: MsgGrantResponse): Uint8Array;
    toProtoMsg(message: MsgGrantResponse): MsgGrantResponseProtoMsg;
};
export declare const MsgRevoke: {
    typeUrl: string;
    encode(message: MsgRevoke, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRevoke;
    fromJSON(object: any): MsgRevoke;
    toJSON(message: MsgRevoke): unknown;
    fromPartial<I extends {
        granter?: string;
        grantee?: string;
        msgTypeUrl?: string;
    } & {
        granter?: string;
        grantee?: string;
        msgTypeUrl?: string;
    } & Record<Exclude<keyof I, keyof MsgRevoke>, never>>(object: I): MsgRevoke;
    fromSDK(object: MsgRevokeSDKType): MsgRevoke;
    toSDK(message: MsgRevoke): MsgRevokeSDKType;
    fromAmino(object: MsgRevokeAmino): MsgRevoke;
    toAmino(message: MsgRevoke): MsgRevokeAmino;
    fromAminoMsg(object: MsgRevokeAminoMsg): MsgRevoke;
    toAminoMsg(message: MsgRevoke): MsgRevokeAminoMsg;
    fromProtoMsg(message: MsgRevokeProtoMsg): MsgRevoke;
    toProto(message: MsgRevoke): Uint8Array;
    toProtoMsg(message: MsgRevoke): MsgRevokeProtoMsg;
};
export declare const MsgRevokeResponse: {
    typeUrl: string;
    encode(_: MsgRevokeResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRevokeResponse;
    fromJSON(_: any): MsgRevokeResponse;
    toJSON(_: MsgRevokeResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgRevokeResponse;
    fromSDK(_: MsgRevokeResponseSDKType): MsgRevokeResponse;
    toSDK(_: MsgRevokeResponse): MsgRevokeResponseSDKType;
    fromAmino(_: MsgRevokeResponseAmino): MsgRevokeResponse;
    toAmino(_: MsgRevokeResponse): MsgRevokeResponseAmino;
    fromAminoMsg(object: MsgRevokeResponseAminoMsg): MsgRevokeResponse;
    toAminoMsg(message: MsgRevokeResponse): MsgRevokeResponseAminoMsg;
    fromProtoMsg(message: MsgRevokeResponseProtoMsg): MsgRevokeResponse;
    toProto(message: MsgRevokeResponse): Uint8Array;
    toProtoMsg(message: MsgRevokeResponse): MsgRevokeResponseProtoMsg;
};
export declare const Cosmos_basev1beta1Msg_InterfaceDecoder: (input: _m0.Reader | Uint8Array) => Any;
export declare const Cosmos_basev1beta1Msg_FromAmino: (content: AnyAmino) => Any;
export declare const Cosmos_basev1beta1Msg_ToAmino: (content: Any) => AnyAmino;
/** Msg defines the authz Msg service. */
export interface Msg {
    /**
     * Grant grants the provided authorization to the grantee on the granter's
     * account with the provided expiration time. If there is already a grant
     * for the given (granter, grantee, Authorization) triple, then the grant
     * will be overwritten.
     */
    Grant(request: MsgGrant): Promise<MsgGrantResponse>;
    /**
     * Exec attempts to execute the provided messages using
     * authorizations granted to the grantee. Each message should have only
     * one signer corresponding to the granter of the authorization.
     */
    Exec(request: MsgExec): Promise<MsgExecResponse>;
    /**
     * Revoke revokes any authorization corresponding to the provided method name on the
     * granter's account that has been granted to the grantee.
     */
    Revoke(request: MsgRevoke): Promise<MsgRevokeResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    Grant(request: MsgGrant): Promise<MsgGrantResponse>;
    Exec(request: MsgExec): Promise<MsgExecResponse>;
    Revoke(request: MsgRevoke): Promise<MsgRevokeResponse>;
}
