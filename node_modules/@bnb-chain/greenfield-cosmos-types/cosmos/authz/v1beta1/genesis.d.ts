import { GrantAuthorization, GrantAuthorizationAmino, GrantAuthorizationSDKType } from "./authz";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "cosmos.authz.v1beta1";
/** GenesisState defines the authz module's genesis state. */
export interface GenesisState {
    authorization: GrantAuthorization[];
}
export interface GenesisStateProtoMsg {
    typeUrl: "/cosmos.authz.v1beta1.GenesisState";
    value: Uint8Array;
}
/** GenesisState defines the authz module's genesis state. */
export interface GenesisStateAmino {
    authorization: GrantAuthorizationAmino[];
}
export interface GenesisStateAminoMsg {
    type: "cosmos-sdk/GenesisState";
    value: GenesisStateAmino;
}
/** GenesisState defines the authz module's genesis state. */
export interface GenesisStateSDKType {
    authorization: GrantAuthorizationSDKType[];
}
export declare const GenesisState: {
    typeUrl: string;
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    fromPartial<I extends {
        authorization?: {
            granter?: string;
            grantee?: string;
            authorization?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.bank.v1beta1.SendAuthorization";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                allowList?: string[];
            } | {
                $typeUrl?: "/cosmos.staking.v1beta1.StakeAuthorization";
                maxTokens?: {
                    denom?: string;
                    amount?: string;
                };
                allowList?: {
                    address?: string[];
                };
                denyList?: {
                    address?: string[];
                };
                authorizationType?: import("../../staking/v1beta1/authz").AuthorizationType;
            } | {
                $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
                msg?: string;
            };
            expiration?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            };
        }[];
    } & {
        authorization?: {
            granter?: string;
            grantee?: string;
            authorization?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.bank.v1beta1.SendAuthorization";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                allowList?: string[];
            } | {
                $typeUrl?: "/cosmos.staking.v1beta1.StakeAuthorization";
                maxTokens?: {
                    denom?: string;
                    amount?: string;
                };
                allowList?: {
                    address?: string[];
                };
                denyList?: {
                    address?: string[];
                };
                authorizationType?: import("../../staking/v1beta1/authz").AuthorizationType;
            } | {
                $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
                msg?: string;
            };
            expiration?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            };
        }[] & ({
            granter?: string;
            grantee?: string;
            authorization?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.bank.v1beta1.SendAuthorization";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                allowList?: string[];
            } | {
                $typeUrl?: "/cosmos.staking.v1beta1.StakeAuthorization";
                maxTokens?: {
                    denom?: string;
                    amount?: string;
                };
                allowList?: {
                    address?: string[];
                };
                denyList?: {
                    address?: string[];
                };
                authorizationType?: import("../../staking/v1beta1/authz").AuthorizationType;
            } | {
                $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
                msg?: string;
            };
            expiration?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            };
        } & {
            granter?: string;
            grantee?: string;
            authorization?: ({
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } & {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } & Record<Exclude<keyof I["authorization"][number]["authorization"], keyof import("../../../google/protobuf/any").Any>, never>) | ({
                $typeUrl?: "/cosmos.bank.v1beta1.SendAuthorization";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                allowList?: string[];
            } & {
                $typeUrl?: "/cosmos.bank.v1beta1.SendAuthorization";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[] & ({
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["authorization"][number]["authorization"]["spendLimit"][number], keyof import("../../base/v1beta1/coin").Coin>, never>)[] & Record<Exclude<keyof I["authorization"][number]["authorization"]["spendLimit"], keyof {
                    denom?: string;
                    amount?: string;
                }[]>, never>;
                allowList?: string[] & string[] & Record<Exclude<keyof I["authorization"][number]["authorization"]["allowList"], keyof string[]>, never>;
            } & Record<Exclude<keyof I["authorization"][number]["authorization"], keyof import("../../bank/v1beta1/authz").SendAuthorization>, never>) | ({
                $typeUrl?: "/cosmos.staking.v1beta1.StakeAuthorization";
                maxTokens?: {
                    denom?: string;
                    amount?: string;
                };
                allowList?: {
                    address?: string[];
                };
                denyList?: {
                    address?: string[];
                };
                authorizationType?: import("../../staking/v1beta1/authz").AuthorizationType;
            } & {
                $typeUrl?: "/cosmos.staking.v1beta1.StakeAuthorization";
                maxTokens?: {
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I["authorization"][number]["authorization"]["maxTokens"], keyof import("../../base/v1beta1/coin").Coin>, never>;
                allowList?: {
                    address?: string[];
                } & {
                    address?: string[] & string[] & Record<Exclude<keyof I["authorization"][number]["authorization"]["allowList"]["address"], keyof string[]>, never>;
                } & Record<Exclude<keyof I["authorization"][number]["authorization"]["allowList"], "address">, never>;
                denyList?: {
                    address?: string[];
                } & {
                    address?: string[] & string[] & Record<Exclude<keyof I["authorization"][number]["authorization"]["denyList"]["address"], keyof string[]>, never>;
                } & Record<Exclude<keyof I["authorization"][number]["authorization"]["denyList"], "address">, never>;
                authorizationType?: import("../../staking/v1beta1/authz").AuthorizationType;
            } & Record<Exclude<keyof I["authorization"][number]["authorization"], keyof import("../../staking/v1beta1/authz").StakeAuthorization>, never>) | ({
                $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
                msg?: string;
            } & {
                $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
                msg?: string;
            } & Record<Exclude<keyof I["authorization"][number]["authorization"], keyof import("./authz").GenericAuthorization>, never>);
            expiration?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            } & {
                seconds?: string | number | (import("long").Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | import("long").Long) => import("long").Long;
                    and: (other: string | number | import("long").Long) => import("long").Long;
                    compare: (other: string | number | import("long").Long) => number;
                    comp: (other: string | number | import("long").Long) => number;
                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                    equals: (other: string | number | import("long").Long) => boolean;
                    eq: (other: string | number | import("long").Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | import("long").Long) => boolean;
                    gt: (other: string | number | import("long").Long) => boolean;
                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                    gte: (other: string | number | import("long").Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | import("long").Long) => boolean;
                    lt: (other: string | number | import("long").Long) => boolean;
                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                    lte: (other: string | number | import("long").Long) => boolean;
                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                    mod: (other: string | number | import("long").Long) => import("long").Long;
                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                    negate: () => import("long").Long;
                    neg: () => import("long").Long;
                    not: () => import("long").Long;
                    notEquals: (other: string | number | import("long").Long) => boolean;
                    neq: (other: string | number | import("long").Long) => boolean;
                    or: (other: string | number | import("long").Long) => import("long").Long;
                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                    shl: (numBits: number | import("long").Long) => import("long").Long;
                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                    shr: (numBits: number | import("long").Long) => import("long").Long;
                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                    shru: (numBits: number | import("long").Long) => import("long").Long;
                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => import("long").Long;
                    toString: (radix?: number) => string;
                    toUnsigned: () => import("long").Long;
                    xor: (other: string | number | import("long").Long) => import("long").Long;
                } & Record<Exclude<keyof I["authorization"][number]["expiration"]["seconds"], keyof import("long").Long>, never>);
                nanos?: number;
            } & Record<Exclude<keyof I["authorization"][number]["expiration"], keyof import("../../../google/protobuf/timestamp").Timestamp>, never>;
        } & Record<Exclude<keyof I["authorization"][number], keyof GrantAuthorization>, never>)[] & Record<Exclude<keyof I["authorization"], keyof {
            granter?: string;
            grantee?: string;
            authorization?: {
                $typeUrl?: "/google.protobuf.Any";
                typeUrl?: string;
                value?: Uint8Array;
            } | {
                $typeUrl?: "/cosmos.bank.v1beta1.SendAuthorization";
                spendLimit?: {
                    denom?: string;
                    amount?: string;
                }[];
                allowList?: string[];
            } | {
                $typeUrl?: "/cosmos.staking.v1beta1.StakeAuthorization";
                maxTokens?: {
                    denom?: string;
                    amount?: string;
                };
                allowList?: {
                    address?: string[];
                };
                denyList?: {
                    address?: string[];
                };
                authorizationType?: import("../../staking/v1beta1/authz").AuthorizationType;
            } | {
                $typeUrl?: "/cosmos.authz.v1beta1.GenericAuthorization";
                msg?: string;
            };
            expiration?: {
                seconds?: string | number | import("long").Long;
                nanos?: number;
            };
        }[]>, never>;
    } & Record<Exclude<keyof I, "authorization">, never>>(object: I): GenesisState;
    fromSDK(object: GenesisStateSDKType): GenesisState;
    toSDK(message: GenesisState): GenesisStateSDKType;
    fromAmino(object: GenesisStateAmino): GenesisState;
    toAmino(message: GenesisState): GenesisStateAmino;
    fromAminoMsg(object: GenesisStateAminoMsg): GenesisState;
    toAminoMsg(message: GenesisState): GenesisStateAminoMsg;
    fromProtoMsg(message: GenesisStateProtoMsg): GenesisState;
    toProto(message: GenesisState): Uint8Array;
    toProtoMsg(message: GenesisState): GenesisStateProtoMsg;
};
